/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.grammatech.cs;

public class symbol implements Comparable<symbol> {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected symbol(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(symbol obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        csJNI.delete_symbol(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  protected static long getCPtrAndDisown(symbol obj) {
    if (obj != null) obj.swigCMemOwn= false;
    return getCPtr(obj);
  }

  public int compareTo(symbol other) {
    return csJNI.symbol_compareTo(swigCPtr, this, symbol.getCPtr(other), other);
  }

  public int hashCode() {
    return csJNI.symbol_hashCode(swigCPtr, this);
  }

  public boolean equals(symbol other) throws result {
    return csJNI.symbol_equals(swigCPtr, this, symbol.getCPtr(other), other);
  }

  public symbol_kind get_kind() throws result {
    return new symbol_kind(csJNI.symbol_get_kind(swigCPtr, this), true);
  }

  public var_attrs get_var_attrs() throws result {
    return new var_attrs(csJNI.symbol_get_var_attrs(swigCPtr, this), true);
  }

  public func_attrs get_func_attrs() throws result {
    return new func_attrs(csJNI.symbol_get_func_attrs(swigCPtr, this), true);
  }

  public boolean is_global() throws result {
    return csJNI.symbol_is_global(swigCPtr, this);
  }

  public boolean is_heap() throws result {
    return csJNI.symbol_is_heap(swigCPtr, this);
  }

  public boolean is_function() throws result {
    return csJNI.symbol_is_function(swigCPtr, this);
  }

  public boolean is_static_function() throws result {
    return csJNI.symbol_is_static_function(swigCPtr, this);
  }

  public boolean is_string() throws result {
    return csJNI.symbol_is_string(swigCPtr, this);
  }

  public boolean is_file_static() throws result {
    return csJNI.symbol_is_file_static(swigCPtr, this);
  }

  public boolean is_local_static() throws result {
    return csJNI.symbol_is_local_static(swigCPtr, this);
  }

  public boolean is_local() throws result {
    return csJNI.symbol_is_local(swigCPtr, this);
  }

  public boolean is_formal() throws result {
    return csJNI.symbol_is_formal(swigCPtr, this);
  }

  public boolean extern_only() throws result {
    return csJNI.symbol_extern_only(swigCPtr, this);
  }

  public String name() throws result {
    return csJNI.symbol_name(swigCPtr, this);
  }

  public procedure as_procedure() throws result {
    return new procedure(csJNI.symbol_as_procedure(swigCPtr, this), true);
  }

  public String represented_string() throws result {
    return csJNI.symbol_represented_string(swigCPtr, this);
  }

  public point_set declarations() throws result {
    return new point_set(csJNI.symbol_declarations(swigCPtr, this), true);
  }

  public point primary_declaration() throws result {
    return new point(csJNI.symbol_primary_declaration(swigCPtr, this), true);
  }

  public procedure get_procedure() throws result {
    return new procedure(csJNI.symbol_get_procedure(swigCPtr, this), true);
  }

  public compunit get_compunit() throws result {
    return new compunit(csJNI.symbol_get_compunit(swigCPtr, this), true);
  }

  public ast get_ast(ast_family family) throws result {
    return new ast(csJNI.symbol_get_ast__SWIG_0(swigCPtr, this, ast_family.getCPtr(family), family), true);
  }

  public ast get_ast() throws result {
    return new ast(csJNI.symbol_get_ast__SWIG_1(swigCPtr, this), true);
  }

  public void set_ast(ast_family family, ast val) throws result {
    csJNI.symbol_set_ast(swigCPtr, this, ast_family.getCPtr(family), family, ast.getCPtr(val), val);
  }

  public ast get_type(ast_family family) throws result {
    return new ast(csJNI.symbol_get_type__SWIG_0(swigCPtr, this, ast_family.getCPtr(family), family), true);
  }

  public ast get_type() throws result {
    return new ast(csJNI.symbol_get_type__SWIG_1(swigCPtr, this), true);
  }

  public void set_type(ast_family family, ast val) throws result {
    csJNI.symbol_set_type(swigCPtr, this, ast_family.getCPtr(family), family, ast.getCPtr(val), val);
  }

  public sfileinst_line_pair file_line() throws result {
    return new sfileinst_line_pair(csJNI.symbol_file_line(swigCPtr, this), true);
  }

  public compunit_line_pair compunit_line() throws result {
    return new compunit_line_pair(csJNI.symbol_compunit_line(swigCPtr, this), true);
  }

  public symbol_set pointed_to_by() throws result {
    return new symbol_set(csJNI.symbol_pointed_to_by(swigCPtr, this), true);
  }

  public symbol_set points_to() throws result {
    return new symbol_set(csJNI.symbol_points_to(swigCPtr, this), true);
  }

  public point_set used_points() throws result {
    return new point_set(csJNI.symbol_used_points(swigCPtr, this), true);
  }

  public point_set killed_points() throws result {
    return new point_set(csJNI.symbol_killed_points(swigCPtr, this), true);
  }

  public point_set cond_killed_points() throws result {
    return new point_set(csJNI.symbol_cond_killed_points(swigCPtr, this), true);
  }

  public point_set may_killed_points() throws result {
    return new point_set(csJNI.symbol_may_killed_points(swigCPtr, this), true);
  }

  public symbol_vector fields() throws result {
    return new symbol_vector(csJNI.symbol_fields(swigCPtr, this), true);
  }

  public symbol container() throws result {
    return new symbol(csJNI.symbol_container(swigCPtr, this), true);
  }

  public symbol_vector inline_targets() throws result {
    return new symbol_vector(csJNI.symbol_inline_targets(swigCPtr, this), true);
  }

  public symbol inline_source() throws result {
    return new symbol(csJNI.symbol_inline_source(swigCPtr, this), true);
  }

  public String temp_source() throws result {
    return csJNI.symbol_temp_source(swigCPtr, this);
  }

  public String as_string() throws result {
    return csJNI.symbol_as_string(swigCPtr, this);
  }

  public String toString() {
    return csJNI.symbol_toString(swigCPtr, this);
  }

}
