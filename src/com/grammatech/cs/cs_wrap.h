/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_cs_WRAP_H_
#define SWIG_cs_WRAP_H_

class SwigDirector_predsucc_filter : public cs::predsucc_filter, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_predsucc_filter(JNIEnv *jenv);
    virtual std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind > operator ()(cs::point p);
    virtual ~SwigDirector_predsucc_filter();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};

class SwigDirector_metric_sfile_filter : public cs::metric_sfile_filter, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_metric_sfile_filter(JNIEnv *jenv);
    SwigDirector_metric_sfile_filter(JNIEnv *jenv, cs::metric_sfile_filter const &arg0);
    virtual bool operator ()(cs::sfile arg0);
    virtual ~SwigDirector_metric_sfile_filter();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};

class SwigDirector_project_metric_function : public cs::metric_function< cs::project >, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_project_metric_function(JNIEnv *jenv);
    SwigDirector_project_metric_function(JNIEnv *jenv, cs::metric_function< cs::project > const &arg0);
    virtual double operator ()(cs::project arg0);
    virtual ~SwigDirector_project_metric_function();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};

class SwigDirector_compunit_metric_function : public cs::metric_function< cs::compunit >, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_compunit_metric_function(JNIEnv *jenv);
    SwigDirector_compunit_metric_function(JNIEnv *jenv, cs::metric_function< cs::compunit > const &arg0);
    virtual double operator ()(cs::compunit arg0);
    virtual ~SwigDirector_compunit_metric_function();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};

class SwigDirector_sfile_metric_function : public cs::metric_function< cs::sfile >, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_sfile_metric_function(JNIEnv *jenv);
    SwigDirector_sfile_metric_function(JNIEnv *jenv, cs::metric_function< cs::sfile > const &arg0);
    virtual double operator ()(cs::sfile arg0);
    virtual ~SwigDirector_sfile_metric_function();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};

class SwigDirector_procedure_metric_function : public cs::metric_function< cs::procedure >, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_procedure_metric_function(JNIEnv *jenv);
    SwigDirector_procedure_metric_function(JNIEnv *jenv, cs::metric_function< cs::procedure > const &arg0);
    virtual double operator ()(cs::procedure arg0);
    virtual ~SwigDirector_procedure_metric_function();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};


#endif
