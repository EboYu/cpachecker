/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.grammatech.cs;

public class project {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected project(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(project obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        csJNI.delete_project(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  protected static long getCPtrAndDisown(project obj) {
    if (obj != null) obj.swigCMemOwn= false;
    return getCPtr(obj);
  }

  public static void load(String file_path, boolean read_only) throws result {
    csJNI.project_load(file_path, read_only);
  }

  public static void unload() throws result {
    csJNI.project_unload();
  }

  public static project current() throws result {
    return new project(csJNI.project_current(), true);
  }

  public symbol_universe_iterator symbols() throws result {
    return new symbol_universe_iterator(csJNI.project_symbols(swigCPtr, this), true);
  }

  public symbol param_symbol(long num) throws result {
    return new symbol(csJNI.project_param_symbol(swigCPtr, this, num), true);
  }

  public symbol lookup_symbol(String symname) throws result {
    return new symbol(csJNI.project_lookup_symbol(swigCPtr, this, symname), true);
  }

  public interest_set_vector interest_sets() throws result {
    return new interest_set_vector(csJNI.project_interest_sets(swigCPtr, this), true);
  }

  public void set_interest_sets(interest_set_vector sets) throws result {
    csJNI.project_set_interest_sets(swigCPtr, this, interest_set_vector.getCPtr(sets), sets);
  }

  public string_vector interest_set_names() throws result {
    return new string_vector(csJNI.project_interest_set_names(swigCPtr, this), true);
  }

  public point_set get_interest_set(String setname) throws result {
    return new point_set(csJNI.project_get_interest_set(swigCPtr, this, setname), true);
  }

  public void set_interest_set(String setname, point_set set) throws result {
    csJNI.project_set_interest_set(swigCPtr, this, setname, point_set.getCPtr(set), set);
  }

  public long erase_interest_set(String setname) throws result {
    return csJNI.project_erase_interest_set(swigCPtr, this, setname);
  }

  public procedure find_procedure(String procname) throws result {
    return new procedure(csJNI.project_find_procedure__SWIG_0(swigCPtr, this, procname), true);
  }

  public procedure find_procedure(long id) throws result {
    return new procedure(csJNI.project_find_procedure__SWIG_1(swigCPtr, this, id), true);
  }

  public project_procedures_iterator procedures() throws result {
    return new project_procedures_iterator(csJNI.project_procedures(swigCPtr, this), true);
  }

  public procedure_vector procedures_vector() throws result {
    return new procedure_vector(csJNI.project_procedures_vector(swigCPtr, this), true);
  }

  public procedure_vector_vector sccs() throws result {
    return new procedure_vector_vector(csJNI.project_sccs(swigCPtr, this), true);
  }

  public compunit_vector compunits_vector() throws result {
    return new compunit_vector(csJNI.project_compunits_vector(swigCPtr, this), true);
  }

  public project_compunits_iterator compunits() throws result {
    return new project_compunits_iterator(csJNI.project_compunits(swigCPtr, this), true);
  }

  public project_sfiles_iterator sfiles() throws result {
    return new project_sfiles_iterator(csJNI.project_sfiles(swigCPtr, this), true);
  }

  public compunit_vector ignored_compunits() throws result {
    return new compunit_vector(csJNI.project_ignored_compunits(swigCPtr, this), true);
  }

  public project_root_directories_iterator root_directories() throws result {
    return new project_root_directories_iterator(csJNI.project_root_directories(swigCPtr, this), true);
  }

  public String name() throws result {
    return csJNI.project_name(swigCPtr, this);
  }

  public long error_count(boolean including_ignored) throws result {
    return csJNI.project_error_count__SWIG_0(swigCPtr, this, including_ignored);
  }

  public long error_count() throws result {
    return csJNI.project_error_count__SWIG_1(swigCPtr, this);
  }

  public long warning_count(boolean including_ignored) throws result {
    return csJNI.project_warning_count__SWIG_0(swigCPtr, this, including_ignored);
  }

  public long warning_count() throws result {
    return csJNI.project_warning_count__SWIG_1(swigCPtr, this);
  }

  public static boolean is_loaded() throws result {
    return csJNI.project_is_loaded();
  }

  public boolean is_read_only() throws result {
    return csJNI.project_is_read_only(swigCPtr, this);
  }

  public boolean file_is_newer(String fn) throws result {
    return csJNI.project_file_is_newer(swigCPtr, this, fn);
  }

  public boolean has_unnormalized_c_asts() throws result {
    return csJNI.project_has_unnormalized_c_asts(swigCPtr, this);
  }

  public boolean incremental_capable() throws result {
    return csJNI.project_incremental_capable(swigCPtr, this);
  }

  public xr_query_iterator token_search(xr_query q) throws result {
    return new xr_query_iterator(csJNI.project_token_search(swigCPtr, this, xr_query.getCPtr(q), q), true);
  }

  public ir_factory get_ir_factory() throws result {
    return new ir_factory(csJNI.project_get_ir_factory(swigCPtr, this), true);
  }

  public String as_string() throws result {
    return csJNI.project_as_string(swigCPtr, this);
  }

  public String toString() {
    return csJNI.project_toString(swigCPtr, this);
  }

  public amc_analysis get_vsa_results() throws result {
    return new amc_analysis(csJNI.project_get_vsa_results(swigCPtr, this), true);
  }

  public amc_analysis run_multiinterval_analysis(procedure_name_to_model_vector fn_to_model_str) throws result {
    return new amc_analysis(csJNI.project_run_multiinterval_analysis(swigCPtr, this, procedure_name_to_model_vector.getCPtr(fn_to_model_str), fn_to_model_str), true);
  }

  public symbol_set find_symbols_by_address(java.math.BigInteger ea) throws result {
    return new symbol_set(csJNI.project_find_symbols_by_address(swigCPtr, this, ea), true);
  }

  public symbol_set find_containing_symbols_by_address(java.math.BigInteger ea) throws result {
    return new symbol_set(csJNI.project_find_containing_symbols_by_address(swigCPtr, this, ea), true);
  }

  public point_set find_points_by_address(java.math.BigInteger ea) throws result {
    return new point_set(csJNI.project_find_points_by_address(swigCPtr, this, ea), true);
  }

  public procedure find_procedure_by_address(java.math.BigInteger ea) throws result {
    return new procedure(csJNI.project_find_procedure_by_address(swigCPtr, this, ea), true);
  }

}
