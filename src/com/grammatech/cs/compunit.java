/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.grammatech.cs;

public class compunit implements Comparable<compunit> {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected compunit(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(compunit obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        csJNI.delete_compunit(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  protected static long getCPtrAndDisown(compunit obj) {
    if (obj != null) obj.swigCMemOwn= false;
    return getCPtr(obj);
  }

  public int compareTo(compunit other) {
    return csJNI.compunit_compareTo(swigCPtr, this, compunit.getCPtr(other), other);
  }

  public int hashCode() {
    return csJNI.compunit_hashCode(swigCPtr, this);
  }

  public boolean equals(compunit other) throws result {
    return csJNI.compunit_equals(swigCPtr, this, compunit.getCPtr(other), other);
  }

  public String name() throws result {
    return csJNI.compunit_name(swigCPtr, this);
  }

  public String normalized_name() throws result {
    return csJNI.compunit_normalized_name(swigCPtr, this);
  }

  public symbol lookup_symbol(String name) throws result {
    return new symbol(csJNI.compunit_lookup_symbol(swigCPtr, this, name), true);
  }

  public ast get_ast(ast_family family) throws result {
    return new ast(csJNI.compunit_get_ast(swigCPtr, this, ast_family.getCPtr(family), family), true);
  }

  public void set_ast(ast_family family, ast val) throws result {
    csJNI.compunit_set_ast(swigCPtr, this, ast_family.getCPtr(family), family, ast.getCPtr(val), val);
  }

  public ast_vector asts_at(long uline, ast_class_vector classes) throws result {
    return new ast_vector(csJNI.compunit_asts_at(swigCPtr, this, uline, ast_class_vector.getCPtr(classes), classes), true);
  }

  public String read(long offset, long limit) throws result {
    return csJNI.compunit_read__SWIG_0(swigCPtr, this, offset, limit);
  }

  public String read(long offset) throws result {
    return csJNI.compunit_read__SWIG_1(swigCPtr, this, offset);
  }

  public String read() throws result {
    return csJNI.compunit_read__SWIG_2(swigCPtr, this);
  }

  public sfileinst_line_pair offset_to_sfileinst_line(long offset) throws result {
    return new sfileinst_line_pair(csJNI.compunit_offset_to_sfileinst_line(swigCPtr, this, offset), true);
  }

  public sfileinst_line_column offset_to_sfileinst_line_column(long offset) throws result {
    return new sfileinst_line_column(csJNI.compunit_offset_to_sfileinst_line_column(swigCPtr, this, offset), true);
  }

  public sfileinst_line_pair line_to_sfileinst_line(long ln) throws result {
    return new sfileinst_line_pair(csJNI.compunit_line_to_sfileinst_line(swigCPtr, this, ln), true);
  }

  public long offset_to_line(long offset) throws result {
    return csJNI.compunit_offset_to_line(swigCPtr, this, offset);
  }

  public sfileinst_range offset_range_to_sfileinst_range(long start, long end) throws result {
    return new sfileinst_range(csJNI.compunit_offset_range_to_sfileinst_range(swigCPtr, this, start, end), true);
  }

  public language get_language() throws result {
    return new language(csJNI.compunit_get_language(swigCPtr, this), true);
  }

  public String csonar_front_end_run_id() throws result {
    return csJNI.compunit_csonar_front_end_run_id(swigCPtr, this);
  }

  public String compiler_model() throws result {
    return csJNI.compunit_compiler_model(swigCPtr, this);
  }

  public string_vector compiler_command_line() throws result {
    return new string_vector(csJNI.compunit_compiler_command_line(swigCPtr, this), true);
  }

  public string_vector effective_compiler_flags() throws result {
    return new string_vector(csJNI.compunit_effective_compiler_flags(swigCPtr, this), true);
  }

  public string_vector cs_frontend_command_line() throws result {
    return new string_vector(csJNI.compunit_cs_frontend_command_line(swigCPtr, this), true);
  }

  public long error_count() throws result {
    return csJNI.compunit_error_count(swigCPtr, this);
  }

  public long warning_count() throws result {
    return csJNI.compunit_warning_count(swigCPtr, this);
  }

  public sfileinst get_sfileinst() throws result {
    return new sfileinst(csJNI.compunit_get_sfileinst(swigCPtr, this), true);
  }

  public compunit_procedure_iterator procedures() throws result {
    return new compunit_procedure_iterator(csJNI.compunit_procedures(swigCPtr, this), true);
  }

  public compunit_global_iterator global_symbols() throws result {
    return new compunit_global_iterator(csJNI.compunit_global_symbols(swigCPtr, this), true);
  }

  public boolean is_valid() throws result {
    return csJNI.compunit_is_valid(swigCPtr, this);
  }

  public boolean is_user() throws result {
    return csJNI.compunit_is_user(swigCPtr, this);
  }

  public boolean is_library_model() throws result {
    return csJNI.compunit_is_library_model(swigCPtr, this);
  }

  public boolean is_rewriting() throws result {
    return csJNI.compunit_is_rewriting(swigCPtr, this);
  }

  public boolean is_backend() throws result {
    return csJNI.compunit_is_backend(swigCPtr, this);
  }

  public boolean is_shared() throws result {
    return csJNI.compunit_is_shared(swigCPtr, this);
  }

  public boolean is_hidden_binary() throws result {
    return csJNI.compunit_is_hidden_binary(swigCPtr, this);
  }

  public sfile_line_pair line_to_sfile_line(long ln) throws result {
    return new sfile_line_pair(csJNI.compunit_line_to_sfile_line(swigCPtr, this, ln), true);
  }

  public String as_string() throws result {
    return csJNI.compunit_as_string(swigCPtr, this);
  }

  public String toString() {
    return csJNI.compunit_toString(swigCPtr, this);
  }

}
