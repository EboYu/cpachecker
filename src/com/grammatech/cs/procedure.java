/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.grammatech.cs;

public class procedure implements Comparable<procedure> {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected procedure(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(procedure obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        csJNI.delete_procedure(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  protected static long getCPtrAndDisown(procedure obj) {
    if (obj != null) obj.swigCMemOwn= false;
    return getCPtr(obj);
  }

  public int compareTo(procedure other) {
    return csJNI.procedure_compareTo(swigCPtr, this, procedure.getCPtr(other), other);
  }

  public int hashCode() {
    return csJNI.procedure_hashCode(swigCPtr, this);
  }

  public boolean equals(procedure other) throws result {
    return csJNI.procedure_equals(swigCPtr, this, procedure.getCPtr(other), other);
  }

  public procedure_kind get_kind() throws result {
    return new procedure_kind(csJNI.procedure_get_kind(swigCPtr, this), true);
  }

  public ast get_ast(ast_family family) throws result {
    return new ast(csJNI.procedure_get_ast(swigCPtr, this, ast_family.getCPtr(family), family), true);
  }

  public void set_ast(ast_family family, ast val) throws result {
    csJNI.procedure_set_ast(swigCPtr, this, ast_family.getCPtr(family), family, ast.getCPtr(val), val);
  }

  public sfileinst_line_pair file_line() throws result {
    return new sfileinst_line_pair(csJNI.procedure_file_line(swigCPtr, this), true);
  }

  public compunit_line_pair compunit_line() throws result {
    return new compunit_line_pair(csJNI.procedure_compunit_line(swigCPtr, this), true);
  }

  public symbol get_symbol() throws result {
    return new symbol(csJNI.procedure_get_symbol(swigCPtr, this), true);
  }

  public compunit get_compunit() throws result {
    return new compunit(csJNI.procedure_get_compunit(swigCPtr, this), true);
  }

  public point entry_point() throws result {
    return new point(csJNI.procedure_entry_point(swigCPtr, this), true);
  }

  public point exit_point() throws result {
    return new point(csJNI.procedure_exit_point(swigCPtr, this), true);
  }

  public long id() throws result {
    return csJNI.procedure_id(swigCPtr, this);
  }

  public String verbose_name() throws result {
    return csJNI.procedure_verbose_name(swigCPtr, this);
  }

  public String name() throws result {
    return csJNI.procedure_name(swigCPtr, this);
  }

  public point_set points() throws result {
    return new point_set(csJNI.procedure_points(swigCPtr, this), true);
  }

  public procedure_locals_iterator local_symbols() throws result {
    return new procedure_locals_iterator(csJNI.procedure_local_symbols(swigCPtr, this), true);
  }

  public symbol_vector declared_symbols() throws result {
    return new symbol_vector(csJNI.procedure_declared_symbols(swigCPtr, this), true);
  }

  public symbol find_symbol_by_offset(int off) throws result {
    return new symbol(csJNI.procedure_find_symbol_by_offset(swigCPtr, this, off), true);
  }

  public symbol find_containing_symbol_by_offset(int off) throws result {
    return new symbol(csJNI.procedure_find_containing_symbol_by_offset(swigCPtr, this, off), true);
  }

  public point add_declaration(symbol al) throws result {
    return new point(csJNI.procedure_add_declaration(swigCPtr, this, symbol.getCPtr(al), al), true);
  }

  public point_vector call_sites_vector(procedure_call_sites_flags flags) throws result {
    return new point_vector(csJNI.procedure_call_sites_vector__SWIG_0(swigCPtr, this, procedure_call_sites_flags.getCPtr(flags), flags), true);
  }

  public point_vector call_sites_vector() throws result {
    return new point_vector(csJNI.procedure_call_sites_vector__SWIG_1(swigCPtr, this), true);
  }

  public long call_sites_count(procedure_call_sites_flags flags) throws result {
    return csJNI.procedure_call_sites_count__SWIG_0(swigCPtr, this, procedure_call_sites_flags.getCPtr(flags), flags);
  }

  public long call_sites_count() throws result {
    return csJNI.procedure_call_sites_count__SWIG_1(swigCPtr, this);
  }

  public procedure_call_sites_iterator call_sites(procedure_call_sites_flags flags) throws result {
    return new procedure_call_sites_iterator(csJNI.procedure_call_sites__SWIG_0(swigCPtr, this, procedure_call_sites_flags.getCPtr(flags), flags), true);
  }

  public procedure_call_sites_iterator call_sites() throws result {
    return new procedure_call_sites_iterator(csJNI.procedure_call_sites__SWIG_1(swigCPtr, this), true);
  }

  public long callers_count() throws result {
    return csJNI.procedure_callers_count(swigCPtr, this);
  }

  public procedure_callers_iterator callers() throws result {
    return new procedure_callers_iterator(csJNI.procedure_callers(swigCPtr, this), true);
  }

  public point_set formal_ins() throws result {
    return new point_set(csJNI.procedure_formal_ins(swigCPtr, this), true);
  }

  public point_vector formal_ins_vector() throws result {
    return new point_vector(csJNI.procedure_formal_ins_vector(swigCPtr, this), true);
  }

  public point formal_in(long rank) throws result {
    return new point(csJNI.procedure_formal_in(swigCPtr, this, rank), true);
  }

  public void set_formal_ins(symbol_vector v) throws result {
    csJNI.procedure_set_formal_ins(swigCPtr, this, symbol_vector.getCPtr(v), v);
  }

  public point_set formal_outs() throws result {
    return new point_set(csJNI.procedure_formal_outs(swigCPtr, this), true);
  }

  public point_vector formal_outs_vector() throws result {
    return new point_vector(csJNI.procedure_formal_outs_vector(swigCPtr, this), true);
  }

  public void set_formal_outs(symbol_vector v) throws result {
    csJNI.procedure_set_formal_outs(swigCPtr, this, symbol_vector.getCPtr(v), v);
  }

  public point retrieve_point(long _id) throws result {
    return new point(csJNI.procedure_retrieve_point(swigCPtr, this, _id), true);
  }

  public point_set used_points(symbol al) throws result {
    return new point_set(csJNI.procedure_used_points(swigCPtr, this, symbol.getCPtr(al), al), true);
  }

  public point_set used_points_from_set(symbol_set s) throws result {
    return new point_set(csJNI.procedure_used_points_from_set(swigCPtr, this, symbol_set.getCPtr(s), s), true);
  }

  public point_set killed_points(symbol al) throws result {
    return new point_set(csJNI.procedure_killed_points(swigCPtr, this, symbol.getCPtr(al), al), true);
  }

  public point_set killed_points_from_set(symbol_set s) throws result {
    return new point_set(csJNI.procedure_killed_points_from_set(swigCPtr, this, symbol_set.getCPtr(s), s), true);
  }

  public point_set cond_killed_points(symbol al) throws result {
    return new point_set(csJNI.procedure_cond_killed_points(swigCPtr, this, symbol.getCPtr(al), al), true);
  }

  public point_set cond_killed_points_from_set(symbol_set s) throws result {
    return new point_set(csJNI.procedure_cond_killed_points_from_set(swigCPtr, this, symbol_set.getCPtr(s), s), true);
  }

  public point_set may_killed_points(symbol al) throws result {
    return new point_set(csJNI.procedure_may_killed_points(swigCPtr, this, symbol.getCPtr(al), al), true);
  }

  public point_set may_killed_points_from_set(symbol_set s) throws result {
    return new point_set(csJNI.procedure_may_killed_points_from_set(swigCPtr, this, symbol_set.getCPtr(s), s), true);
  }

  public symbol_set gref() throws result {
    return new symbol_set(csJNI.procedure_gref(swigCPtr, this), true);
  }

  public symbol_set gmod() throws result {
    return new symbol_set(csJNI.procedure_gmod(swigCPtr, this), true);
  }

  public boolean has_vararg() throws result {
    return csJNI.procedure_has_vararg(swigCPtr, this);
  }

  public boolean has_incomplete_summary() throws result {
    return csJNI.procedure_has_incomplete_summary(swigCPtr, this);
  }

  public long scc_id() throws result {
    return csJNI.procedure_scc_id(swigCPtr, this);
  }

  public basic_block retrieve_basic_block(long id) throws result {
    return new basic_block(csJNI.procedure_retrieve_basic_block(swigCPtr, this, id), true);
  }

  public basic_block entry_basic_block() throws result {
    return new basic_block(csJNI.procedure_entry_basic_block(swigCPtr, this), true);
  }

  public basic_block exit_basic_block() throws result {
    return new basic_block(csJNI.procedure_exit_basic_block(swigCPtr, this), true);
  }

  public basic_block_set basic_blocks() throws result {
    return new basic_block_set(csJNI.procedure_basic_blocks(swigCPtr, this), true);
  }

  public point normal_exit() throws result {
    return new point(csJNI.procedure_normal_exit(swigCPtr, this), true);
  }

  public exceptional_return_vector exceptional_exits() throws result {
    return new exceptional_return_vector(csJNI.procedure_exceptional_exits(swigCPtr, this), true);
  }

  public String as_string() throws result {
    return csJNI.procedure_as_string(swigCPtr, this);
  }

  public String toString() {
    return csJNI.procedure_toString(swigCPtr, this);
  }

  public java.math.BigInteger get_address() throws result {
    return csJNI.procedure_get_address(swigCPtr, this);
  }

}
