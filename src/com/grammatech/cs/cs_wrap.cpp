/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for 
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
      jenv->DeleteLocalRef(jobj);
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  class DirectorException {
      JNIEnv *m_jenv;
      DirectorException();
  public:
      DirectorException(JNIEnv *jenv)
          : m_jenv(jenv) {}
          
      JNIEnv *get_jenv()
      { return m_jenv; }

      static void raise(JNIEnv *jenv)
      { throw DirectorException(jenv); }
  };
}

#endif /* __cplusplus */


namespace Swig {
  namespace {
    jclass jclass_csJNI = NULL;
    jmethodID director_methids[6];
  }
}

#include "csurf/src/api/cpp/cs_api_swig.hpp"


#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#include <algorithm>


#include <stdexcept>


#include <utility>


#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>

SWIGINTERN size_t cs_xr_result_counters_get_scanned(cs::xr_result_counters *self){ return self->scanned; }
SWIGINTERN size_t cs_xr_result_counters_get_unscanned(cs::xr_result_counters *self){ return self->unscanned; }
SWIGINTERN size_t cs_xr_result_counters_get_matched(cs::xr_result_counters *self){ return self->matched; }
SWIGINTERN unsigned int const &std_pair_Sl_csuint32_Sc_csuint32_Sg__get_first(std::pair< csuint32,csuint32 > *self){ return self->first; }
SWIGINTERN unsigned int const &std_pair_Sl_csuint32_Sc_csuint32_Sg__get_second(std::pair< csuint32,csuint32 > *self){ return self->second; }
SWIGINTERN std::pair< unsigned int,unsigned int > const &std_pair_Sl_std_pair_Sl_cs_line_number_Sc_cs_column_number_Sg__Sc_std_pair_Sl_cs_line_number_Sc_cs_column_number_Sg__Sg__get_first(std::pair< std::pair< cs::line_number,cs::column_number >,std::pair< cs::line_number,cs::column_number > > *self){ return self->first; }
SWIGINTERN std::pair< unsigned int,unsigned int > const &std_pair_Sl_std_pair_Sl_cs_line_number_Sc_cs_column_number_Sg__Sc_std_pair_Sl_cs_line_number_Sc_cs_column_number_Sg__Sg__get_second(std::pair< std::pair< cs::line_number,cs::column_number >,std::pair< cs::line_number,cs::column_number > > *self){ return self->second; }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN cs::compunit const &std_pair_Sl_cs_compunit_Sc_cs_compunit_line_Sg__get_first(std::pair< cs::compunit,cs::compunit_line > *self){ return self->first; }
SWIGINTERN unsigned int const &std_pair_Sl_cs_compunit_Sc_cs_compunit_line_Sg__get_second(std::pair< cs::compunit,cs::compunit_line > *self){ return self->second; }
SWIGINTERN cs::sfileinst const &std_pair_Sl_cs_sfileinst_Sc_std_pair_Sl_cs_line_number_Sc_cs_column_number_Sg__Sg__get_first(std::pair< cs::sfileinst,std::pair< cs::line_number,cs::column_number > > *self){ return self->first; }
SWIGINTERN std::pair< unsigned int,unsigned int > const &std_pair_Sl_cs_sfileinst_Sc_std_pair_Sl_cs_line_number_Sc_cs_column_number_Sg__Sg__get_second(std::pair< cs::sfileinst,std::pair< cs::line_number,cs::column_number > > *self){ return self->second; }
SWIGINTERN cs::sfileinst const &std_pair_Sl_cs_sfileinst_Sc_cs_line_number_Sg__get_first(std::pair< cs::sfileinst,cs::line_number > *self){ return self->first; }
SWIGINTERN unsigned int const &std_pair_Sl_cs_sfileinst_Sc_cs_line_number_Sg__get_second(std::pair< cs::sfileinst,cs::line_number > *self){ return self->second; }
SWIGINTERN cs::sfile const &std_pair_Sl_cs_sfile_Sc_cs_line_number_Sg__get_first(std::pair< cs::sfile,cs::line_number > *self){ return self->first; }
SWIGINTERN unsigned int const &std_pair_Sl_cs_sfile_Sc_cs_line_number_Sg__get_second(std::pair< cs::sfile,cs::line_number > *self){ return self->second; }
SWIGINTERN cs::point const &std_pair_Sl_cs_point_Sc_cs_edge_label_Sg__get_first(std::pair< cs::point,cs::edge_label > *self){ return self->first; }
SWIGINTERN cs::edge_label const &std_pair_Sl_cs_point_Sc_cs_edge_label_Sg__get_second(std::pair< cs::point,cs::edge_label > *self){ return self->second; }
SWIGINTERN cs::point const &std_pair_Sl_cs_point_Sc_cs_pdg_edge_label_Sg__get_first(std::pair< cs::point,cs::pdg_edge_label > *self){ return self->first; }
SWIGINTERN cs::pdg_edge_label const &std_pair_Sl_cs_point_Sc_cs_pdg_edge_label_Sg__get_second(std::pair< cs::point,cs::pdg_edge_label > *self){ return self->second; }
SWIGINTERN cs::point const &std_pair_Sl_cs_point_Sc_cs_pdg_edge_kind_Sg__get_first(std::pair< cs::point,cs::pdg_edge_kind > *self){ return self->first; }
SWIGINTERN cs::pdg_edge_kind const &std_pair_Sl_cs_point_Sc_cs_pdg_edge_kind_Sg__get_second(std::pair< cs::point,cs::pdg_edge_kind > *self){ return self->second; }
SWIGINTERN std::vector< cs::procedure >::const_reference std_vector_Sl_cs_procedure_Sg__get(std::vector< cs::procedure > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cs_procedure_Sg__set(std::vector< cs::procedure > *self,int i,std::vector< cs::procedure >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::vector< cs::procedure > >::const_reference std_vector_Sl_std_vector_Sl_cs_procedure_Sg__Sg__get(std::vector< std::vector< cs::procedure > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_cs_procedure_Sg__Sg__set(std::vector< std::vector< cs::procedure > > *self,int i,std::vector< std::vector< cs::procedure > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< cs::compunit >::const_reference std_vector_Sl_cs_compunit_Sg__get(std::vector< cs::compunit > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cs_compunit_Sg__set(std::vector< cs::compunit > *self,int i,std::vector< cs::compunit >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< cs::point >::const_reference std_vector_Sl_cs_point_Sg__get(std::vector< cs::point > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cs_point_Sg__set(std::vector< cs::point > *self,int i,std::vector< cs::point >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN cs::procedure const &std_pair_Sl_cs_procedure_Sc_cs_mutable_set_Sl_cs_point_Sg__Sg__get_first(std::pair< cs::procedure,cs::mutable_set< cs::point > > *self){ return self->first; }
SWIGINTERN cs::mutable_set< cs::point > const &std_pair_Sl_cs_procedure_Sc_cs_mutable_set_Sl_cs_point_Sg__Sg__get_second(std::pair< cs::procedure,cs::mutable_set< cs::point > > *self){ return self->second; }
SWIGINTERN std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > >::const_reference std_vector_Sl_cs_procedure_and_points_Sg__get(std::vector< cs::procedure_and_points > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cs_procedure_and_points_Sg__set(std::vector< cs::procedure_and_points > *self,int i,std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN cs::compunit const &std_pair_Sl_cs_compunit_Sc_cs_procedure_and_points_vector_Sg__get_first(std::pair< cs::compunit,cs::procedure_and_points_vector > *self){ return self->first; }
SWIGINTERN std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > > const &std_pair_Sl_cs_compunit_Sc_cs_procedure_and_points_vector_Sg__get_second(std::pair< cs::compunit,cs::procedure_and_points_vector > *self){ return self->second; }
SWIGINTERN cs::compunit const &std_pair_Sl_cs_compunit_Sc_cs_point_set_Sg__get_first(std::pair< cs::compunit,cs::point_set > *self){ return self->first; }
SWIGINTERN cs::mutable_set< cs::point > const &std_pair_Sl_cs_compunit_Sc_cs_point_set_Sg__get_second(std::pair< cs::compunit,cs::point_set > *self){ return self->second; }
SWIGINTERN std::vector< std::pair< cs::compunit,cs::mutable_set< cs::point > > >::const_reference std_vector_Sl_cs_compunit_points_pair_Sg__get(std::vector< cs::compunit_points_pair > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cs_compunit_points_pair_Sg__set(std::vector< cs::compunit_points_pair > *self,int i,std::vector< std::pair< cs::compunit,cs::mutable_set< cs::point > > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::pair< cs::compunit,std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > > > >::const_reference std_vector_Sl_cs_compunit_points_Sg__get(std::vector< cs::compunit_points > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cs_compunit_points_Sg__set(std::vector< cs::compunit_points > *self,int i,std::vector< std::pair< cs::compunit,std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > > > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< cs::xr_kind >::const_reference std_vector_Sl_cs_xr_kind_Sg__get(std::vector< cs::xr_kind > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cs_xr_kind_Sg__set(std::vector< cs::xr_kind > *self,int i,std::vector< cs::xr_kind >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< cs::xr_role >::const_reference std_vector_Sl_cs_xr_role_Sg__get(std::vector< cs::xr_role > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cs_xr_role_Sg__set(std::vector< cs::xr_role > *self,int i,std::vector< cs::xr_role >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< cs::xr_kind_role >::const_reference std_vector_Sl_cs_xr_kind_role_Sg__get(std::vector< cs::xr_kind_role > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cs_xr_kind_role_Sg__set(std::vector< cs::xr_kind_role > *self,int i,std::vector< cs::xr_kind_role >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN cs::xr_kind const &std_pair_Sl_cs_xr_kind_Sc_cs_xr_role_Sg__get_first(std::pair< cs::xr_kind,cs::xr_role > *self){ return self->first; }
SWIGINTERN cs::xr_role const &std_pair_Sl_cs_xr_kind_Sc_cs_xr_role_Sg__get_second(std::pair< cs::xr_kind,cs::xr_role > *self){ return self->second; }
SWIGINTERN std::vector< cs::language >::const_reference std_vector_Sl_cs_language_Sg__get(std::vector< cs::language > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cs_language_Sg__set(std::vector< cs::language > *self,int i,std::vector< cs::language >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN cs::point const &std_pair_Sl_cs_point_Sc_std_string_Sg__get_first(std::pair< cs::point,std::string > *self){ return self->first; }
SWIGINTERN std::string const &std_pair_Sl_cs_point_Sc_std_string_Sg__get_second(std::pair< cs::point,std::string > *self){ return self->second; }
SWIGINTERN std::vector< std::pair< cs::point,std::string > >::const_reference std_vector_Sl_cs_exceptional_return_Sg__get(std::vector< cs::exceptional_return > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cs_exceptional_return_Sg__set(std::vector< cs::exceptional_return > *self,int i,std::vector< std::pair< cs::point,std::string > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::pair< unsigned int,unsigned int > >::const_reference std_vector_Sl_cs_int_pair_Sg__get(std::vector< cs::int_pair > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cs_int_pair_Sg__set(std::vector< cs::int_pair > *self,int i,std::vector< std::pair< unsigned int,unsigned int > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN cs::basic_block const &std_pair_Sl_cs_basic_block_Sc_cs_edge_label_Sg__get_first(std::pair< cs::basic_block,cs::edge_label > *self){ return self->first; }
SWIGINTERN cs::edge_label const &std_pair_Sl_cs_basic_block_Sc_cs_edge_label_Sg__get_second(std::pair< cs::basic_block,cs::edge_label > *self){ return self->second; }
SWIGINTERN std::vector< cs::sfile >::const_reference std_vector_Sl_cs_sfile_Sg__get(std::vector< cs::sfile > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cs_sfile_Sg__set(std::vector< cs::sfile > *self,int i,std::vector< cs::sfile >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< cs::sfileinst >::const_reference std_vector_Sl_cs_sfileinst_Sg__get(std::vector< cs::sfileinst > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cs_sfileinst_Sg__set(std::vector< cs::sfileinst > *self,int i,std::vector< cs::sfileinst >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< unsigned int >::const_reference std_vector_Sl_cs_line_number_Sg__get(std::vector< cs::line_number > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cs_line_number_Sg__set(std::vector< cs::line_number > *self,int i,std::vector< unsigned int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< cs::symbol >::const_reference std_vector_Sl_cs_symbol_Sg__get(std::vector< cs::symbol > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cs_symbol_Sg__set(std::vector< cs::symbol > *self,int i,std::vector< cs::symbol >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::pair< cs::basic_block,cs::edge_label > >::const_reference std_vector_Sl_cs_basic_block_cfg_edge_Sg__get(std::vector< cs::basic_block_cfg_edge > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cs_basic_block_cfg_edge_Sg__set(std::vector< cs::basic_block_cfg_edge > *self,int i,std::vector< std::pair< cs::basic_block,cs::edge_label > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< cs::basic_block >::const_reference std_vector_Sl_cs_basic_block_Sg__get(std::vector< cs::basic_block > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cs_basic_block_Sg__set(std::vector< cs::basic_block > *self,int i,std::vector< cs::basic_block >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::pair< cs::point,cs::edge_label > >::const_reference std_vector_Sl_cs_cfg_edge_Sg__get(std::vector< cs::cfg_edge > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cs_cfg_edge_Sg__set(std::vector< cs::cfg_edge > *self,int i,std::vector< std::pair< cs::point,cs::edge_label > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::pair< cs::point,cs::pdg_edge_label > >::const_reference std_vector_Sl_cs_labeled_pdg_edge_Sg__get(std::vector< cs::labeled_pdg_edge > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cs_labeled_pdg_edge_Sg__set(std::vector< cs::labeled_pdg_edge > *self,int i,std::vector< std::pair< cs::point,cs::pdg_edge_label > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::pair< cs::point,cs::pdg_edge_kind > >::const_reference std_vector_Sl_cs_pdg_edge_Sg__get(std::vector< cs::pdg_edge > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cs_pdg_edge_Sg__set(std::vector< cs::pdg_edge > *self,int i,std::vector< std::pair< cs::point,cs::pdg_edge_kind > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< cs::ast_field >::const_reference std_vector_Sl_cs_ast_field_Sg__get(std::vector< cs::ast_field > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cs_ast_field_Sg__set(std::vector< cs::ast_field > *self,int i,std::vector< cs::ast_field >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::string const &std_pair_Sl_std_string_Sc_cs_ast_field_Sg__get_first(std::pair< std::string,cs::ast_field > *self){ return self->first; }
SWIGINTERN cs::ast_field const &std_pair_Sl_std_string_Sc_cs_ast_field_Sg__get_second(std::pair< std::string,cs::ast_field > *self){ return self->second; }
SWIGINTERN std::vector< std::pair< std::string,cs::ast_field > >::const_reference std_vector_Sl_cs_string_ast_field_pair_Sg__get(std::vector< cs::string_ast_field_pair > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cs_string_ast_field_pair_Sg__set(std::vector< cs::string_ast_field_pair > *self,int i,std::vector< std::pair< std::string,cs::ast_field > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< cs::ast >::const_reference std_vector_Sl_cs_ast_Sg__get(std::vector< cs::ast > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cs_ast_Sg__set(std::vector< cs::ast > *self,int i,std::vector< cs::ast >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< cs::ast_class >::const_reference std_vector_Sl_cs_ast_class_Sg__get(std::vector< cs::ast_class > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cs_ast_class_Sg__set(std::vector< cs::ast_class > *self,int i,std::vector< cs::ast_class >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN cs::predsucc_filter_directive const &std_pair_Sl_cs_predsucc_filter_directive_Sc_cs_pdg_edge_kind_Sg__get_first(std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind > *self){ return self->first; }
SWIGINTERN cs::pdg_edge_kind const &std_pair_Sl_cs_predsucc_filter_directive_Sc_cs_pdg_edge_kind_Sg__get_second(std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind > *self){ return self->second; }
SWIGINTERN cs::mutable_set< cs::point > const &std_pair_Sl_cs_point_set_Sc_bool_Sg__get_first(std::pair< cs::point_set,bool > *self){ return self->first; }
SWIGINTERN bool const &std_pair_Sl_cs_point_set_Sc_bool_Sg__get_second(std::pair< cs::point_set,bool > *self){ return self->second; }
SWIGINTERN std::string const &std_pair_Sl_std_string_Sc_cs_point_set_Sg__get_first(std::pair< std::string,cs::point_set > *self){ return self->first; }
SWIGINTERN cs::mutable_set< cs::point > const &std_pair_Sl_std_string_Sc_cs_point_set_Sg__get_second(std::pair< std::string,cs::point_set > *self){ return self->second; }
SWIGINTERN std::vector< std::pair< std::string,cs::mutable_set< cs::point > > >::const_reference std_vector_Sl_cs_interest_set_Sg__get(std::vector< cs::interest_set > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cs_interest_set_Sg__set(std::vector< cs::interest_set > *self,int i,std::vector< std::pair< std::string,cs::mutable_set< cs::point > > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN cs::symbol const &std_pair_Sl_cs_symbol_Sc_cs_value_set_Sg__get_first(std::pair< cs::symbol,cs::value_set > *self){ return self->first; }
SWIGINTERN cs::value_set const &std_pair_Sl_cs_symbol_Sc_cs_value_set_Sg__get_second(std::pair< cs::symbol,cs::value_set > *self){ return self->second; }
SWIGINTERN cs::calling_context const &std_pair_Sl_cs_calling_context_Sc_cs_amc_Sg__get_first(std::pair< cs::calling_context,cs::amc > *self){ return self->first; }
SWIGINTERN cs::amc const &std_pair_Sl_cs_calling_context_Sc_cs_amc_Sg__get_second(std::pair< cs::calling_context,cs::amc > *self){ return self->second; }
SWIGINTERN std::vector< cs::string_pair >::const_reference std_vector_Sl_cs_string_pair_Sg__get(std::vector< cs::string_pair > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cs_string_pair_Sg__set(std::vector< cs::string_pair > *self,int i,std::vector< cs::string_pair >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN cs::ast_field cs_ast_field_from_int8(cs::ast_ordinal ord,csint8 v){ return cs::ast_field(ord, v); }
SWIGINTERN cs::ast_field cs_ast_field_from_uint8(cs::ast_ordinal ord,csuint8 v){ return cs::ast_field(ord, v); }
SWIGINTERN cs::ast_field cs_ast_field_from_int16(cs::ast_ordinal ord,csint16 v){ return cs::ast_field(ord, v); }
SWIGINTERN cs::ast_field cs_ast_field_from_uint16(cs::ast_ordinal ord,csuint16 v){ return cs::ast_field(ord, v); }
SWIGINTERN cs::ast_field cs_ast_field_from_int32(cs::ast_ordinal ord,csint32 v){ return cs::ast_field(ord, v); }
SWIGINTERN cs::ast_field cs_ast_field_from_uint32(cs::ast_ordinal ord,csuint32 v){ return cs::ast_field(ord, v); }
SWIGINTERN cs::ast_field cs_ast_field_from_int64(cs::ast_ordinal ord,csint64 v){ return cs::ast_field(ord, v); }
SWIGINTERN cs::ast_field cs_ast_field_from_uint64(cs::ast_ordinal ord,csuint64 v){ return cs::ast_field(ord, v); }
SWIGINTERN cs::ast_field cs_ast_field_from_float(cs::ast_ordinal ord,float v){ return cs::ast_field(ord, v); }
SWIGINTERN cs::ast_field cs_ast_field_from_double(cs::ast_ordinal ord,double v){ return cs::ast_field(ord, v); }
SWIGINTERN std::vector< cs::metric< cs::procedure > >::const_reference std_vector_Sl_cs_metric_Sl_cs_procedure_Sg__Sg__get(std::vector< cs::metric< cs::procedure > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cs_metric_Sl_cs_procedure_Sg__Sg__set(std::vector< cs::metric< cs::procedure > > *self,int i,std::vector< cs::metric< cs::procedure > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< cs::metric< cs::sfile > >::const_reference std_vector_Sl_cs_metric_Sl_cs_sfile_Sg__Sg__get(std::vector< cs::metric< cs::sfile > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cs_metric_Sl_cs_sfile_Sg__Sg__set(std::vector< cs::metric< cs::sfile > > *self,int i,std::vector< cs::metric< cs::sfile > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< cs::metric< cs::compunit > >::const_reference std_vector_Sl_cs_metric_Sl_cs_compunit_Sg__Sg__get(std::vector< cs::metric< cs::compunit > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cs_metric_Sl_cs_compunit_Sg__Sg__set(std::vector< cs::metric< cs::compunit > > *self,int i,std::vector< cs::metric< cs::compunit > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< cs::metric< cs::project > >::const_reference std_vector_Sl_cs_metric_Sl_cs_project_Sg__Sg__get(std::vector< cs::metric< cs::project > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cs_metric_Sl_cs_project_Sg__Sg__set(std::vector< cs::metric< cs::project > > *self,int i,std::vector< cs::metric< cs::project > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "cs_wrap.h"

SwigDirector_predsucc_filter::SwigDirector_predsucc_filter(JNIEnv *jenv) : cs::predsucc_filter(), Swig::Director(jenv) {
}

std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind > SwigDirector_predsucc_filter::operator ()(cs::point p) {
  SwigValueWrapper< std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind > > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jp  ;
  std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind > *argp ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method cs::predsucc_filter::operator ().");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jp = 0;
    *((cs::point **)&jp) = &p; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_csJNI, Swig::director_methids[0], swigjobj, jp);
    if (jenv->ExceptionCheck() == JNI_TRUE)
    Swig::DirectorException::raise(jenv);
    argp = *(std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

SwigDirector_predsucc_filter::~SwigDirector_predsucc_filter() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_predsucc_filter::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "visit", "(Lcom/grammatech/cs/point;)Lcom/grammatech/cs/predsucc_filter_pair;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/grammatech/cs/predsucc_filter");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_metric_sfile_filter::SwigDirector_metric_sfile_filter(JNIEnv *jenv) : cs::metric_sfile_filter(), Swig::Director(jenv) {
}

SwigDirector_metric_sfile_filter::SwigDirector_metric_sfile_filter(JNIEnv *jenv, cs::metric_sfile_filter const &arg0) : cs::metric_sfile_filter(arg0), Swig::Director(jenv) {
}

bool SwigDirector_metric_sfile_filter::operator ()(cs::sfile arg0) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method cs::metric_sfile_filter::operator ().");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((cs::sfile **)&jarg0) = &arg0; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_csJNI, Swig::director_methids[1], swigjobj, jarg0);
    if (jenv->ExceptionCheck() == JNI_TRUE)
    Swig::DirectorException::raise(jenv);
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

SwigDirector_metric_sfile_filter::~SwigDirector_metric_sfile_filter() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_metric_sfile_filter::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "filter", "(Lcom/grammatech/cs/sfile;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/grammatech/cs/metric_sfile_filter");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_project_metric_function::SwigDirector_project_metric_function(JNIEnv *jenv) : cs::metric_function< cs::project >(), Swig::Director(jenv) {
}

SwigDirector_project_metric_function::SwigDirector_project_metric_function(JNIEnv *jenv, cs::metric_function< cs::project > const &arg0) : cs::metric_function< cs::project >(arg0), Swig::Director(jenv) {
}

double SwigDirector_project_metric_function::operator ()(cs::project arg0) {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method cs::metric_function< cs::project >::operator ().");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((cs::project **)&jarg0) = &arg0; 
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_csJNI, Swig::director_methids[2], swigjobj, jarg0);
    if (jenv->ExceptionCheck() == JNI_TRUE)
    Swig::DirectorException::raise(jenv);
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

SwigDirector_project_metric_function::~SwigDirector_project_metric_function() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_project_metric_function::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "evaluate", "(Lcom/grammatech/cs/project;)D", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/grammatech/cs/project_metric_function");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_compunit_metric_function::SwigDirector_compunit_metric_function(JNIEnv *jenv) : cs::metric_function< cs::compunit >(), Swig::Director(jenv) {
}

SwigDirector_compunit_metric_function::SwigDirector_compunit_metric_function(JNIEnv *jenv, cs::metric_function< cs::compunit > const &arg0) : cs::metric_function< cs::compunit >(arg0), Swig::Director(jenv) {
}

double SwigDirector_compunit_metric_function::operator ()(cs::compunit arg0) {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method cs::metric_function< cs::compunit >::operator ().");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((cs::compunit **)&jarg0) = &arg0; 
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_csJNI, Swig::director_methids[3], swigjobj, jarg0);
    if (jenv->ExceptionCheck() == JNI_TRUE)
    Swig::DirectorException::raise(jenv);
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

SwigDirector_compunit_metric_function::~SwigDirector_compunit_metric_function() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_compunit_metric_function::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "evaluate", "(Lcom/grammatech/cs/compunit;)D", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/grammatech/cs/compunit_metric_function");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_sfile_metric_function::SwigDirector_sfile_metric_function(JNIEnv *jenv) : cs::metric_function< cs::sfile >(), Swig::Director(jenv) {
}

SwigDirector_sfile_metric_function::SwigDirector_sfile_metric_function(JNIEnv *jenv, cs::metric_function< cs::sfile > const &arg0) : cs::metric_function< cs::sfile >(arg0), Swig::Director(jenv) {
}

double SwigDirector_sfile_metric_function::operator ()(cs::sfile arg0) {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method cs::metric_function< cs::sfile >::operator ().");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((cs::sfile **)&jarg0) = &arg0; 
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_csJNI, Swig::director_methids[4], swigjobj, jarg0);
    if (jenv->ExceptionCheck() == JNI_TRUE)
    Swig::DirectorException::raise(jenv);
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

SwigDirector_sfile_metric_function::~SwigDirector_sfile_metric_function() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_sfile_metric_function::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "evaluate", "(Lcom/grammatech/cs/sfile;)D", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/grammatech/cs/sfile_metric_function");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_procedure_metric_function::SwigDirector_procedure_metric_function(JNIEnv *jenv) : cs::metric_function< cs::procedure >(), Swig::Director(jenv) {
}

SwigDirector_procedure_metric_function::SwigDirector_procedure_metric_function(JNIEnv *jenv, cs::metric_function< cs::procedure > const &arg0) : cs::metric_function< cs::procedure >(arg0), Swig::Director(jenv) {
}

double SwigDirector_procedure_metric_function::operator ()(cs::procedure arg0) {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method cs::metric_function< cs::procedure >::operator ().");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((cs::procedure **)&jarg0) = &arg0; 
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_csJNI, Swig::director_methids[5], swigjobj, jarg0);
    if (jenv->ExceptionCheck() == JNI_TRUE)
    Swig::DirectorException::raise(jenv);
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

SwigDirector_procedure_metric_function::~SwigDirector_procedure_metric_function() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_procedure_metric_function::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "evaluate", "(Lcom/grammatech/cs/procedure;)D", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/grammatech/cs/procedure_metric_function");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (cs::result *)new cs::result(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_result_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::result *arg1 = (cs::result *) 0 ;
  cs::result *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::result **)&jarg1; 
  arg2 = *(cs::result **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::result const & reference is null");
    return 0;
  } 
  result = (int)((cs::result const *)arg1)->cmp((cs::result const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_result_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::result *arg1 = (cs::result *) 0 ;
  cs::result *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::result **)&jarg1; 
  arg2 = *(cs::result **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::result const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::result const *)arg1)->operator ==((cs::result const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_result_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::result *arg1 = (cs::result *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::result **)&jarg1; 
  result = (int)((cs::result const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_result_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::result *arg1 = (cs::result *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::result **)&jarg1; 
  {
    try {
      result = ((cs::result const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_result_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::result *arg1 = (cs::result *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::result **)&jarg1; 
  result = ((cs::result const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_result_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::result *arg1 = (cs::result *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::result **)&jarg1; 
  {
    try {
      result = ((cs::result const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1SUCCESS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::SUCCESS;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1OUT_1OF_1ELEMENTS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::OUT_OF_ELEMENTS;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1TRUNCATED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::TRUNCATED;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ELEMENT_1NOT_1PRESENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ELEMENT_NOT_PRESENT;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ELEMENT_1ALREADY_1PRESENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ELEMENT_ALREADY_PRESENT;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1REPLACED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::REPLACED;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1NO_1LOWER_1BOUND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::NO_LOWER_BOUND;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1NO_1UPPER_1BOUND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::NO_UPPER_BOUND;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1NO_1BOUNDS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::NO_BOUNDS;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1NOT_1A_1MANGLED_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::NOT_A_MANGLED_NAME;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1DEMANGLE_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::DEMANGLE_FAILED;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1GENERATED_1COMPILATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::GENERATED_COMPILATION;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1NO_1SOURCE_1CORRESPONDENCE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::NO_SOURCE_CORRESPONDENCE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1FILTERED_1OUT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::FILTERED_OUT;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ABS_1LOC_1HAS_1NO_1PARENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ABS_LOC_HAS_NO_PARENT;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ABS_1LOC_1HAS_1NO_1INLINE_1SOURCE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ABS_LOC_HAS_NO_INLINE_SOURCE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1DECLARATIONS_1UNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::DECLARATIONS_UNKNOWN;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1NO_1PRIMARY_1DECLARATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::NO_PRIMARY_DECLARATION;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ABS_1LOC_1NOT_1FUNCTION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ABS_LOC_NOT_FUNCTION;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ABS_1LOC_1HAS_1NO_1PDG_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ABS_LOC_HAS_NO_PDG;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1NO_1REPRESENTED_1STRING_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::NO_REPRESENTED_STRING;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ABS_1LOC_1IS_1GLOBAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ABS_LOC_IS_GLOBAL;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ABS_1LOC_1PDG_1UNDEFINED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ABS_LOC_PDG_UNDEFINED;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1PDG_1NOT_1FOUND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::PDG_NOT_FOUND;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1PDG_1IS_1UNDEFINED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::PDG_IS_UNDEFINED;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1PDG_1VERTEX_1HAS_1NO_1SYMBOL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::PDG_VERTEX_HAS_NO_SYMBOL;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1PDG_1VERTEX_1HAS_1ZERO_1OR_1MULTIPLE_1SUCCESSORS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::PDG_VERTEX_HAS_ZERO_OR_MULTIPLE_SUCCESSORS;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1PDG_1VERTEX_1HAS_1ZERO_1OR_1MULTIPLE_1PREDECESSORS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::PDG_VERTEX_HAS_ZERO_OR_MULTIPLE_PREDECESSORS;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1PDGV_1NOT_1IN_1BASIC_1BLOCK_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::PDGV_NOT_IN_BASIC_BLOCK;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1NO_1SUCH_1BASIC_1BLOCK_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::NO_SUCH_BASIC_BLOCK;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1NO_1SUCH_1PDG_1VERTEX_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::NO_SUCH_PDG_VERTEX;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1NO_1SUCH_1PDG_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::NO_SUCH_PDG;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1PDG_1HAS_1NO_1NORMAL_1EXIT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::PDG_HAS_NO_NORMAL_EXIT;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1PDG_1HAS_1NO_1NORMAL_1RETURN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::PDG_HAS_NO_NORMAL_RETURN;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1VERTEX_1HAS_1NO_1RANK_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::VERTEX_HAS_NO_RANK;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1NO_1POSITION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::NO_POSITION;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1NOT_1IMPLEMENTED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::NOT_IMPLEMENTED;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1CALLER_1SHOULD_1HANDLE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::CALLER_SHOULD_HANDLE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1FRONT_1END_1DOES_1NOT_1IMPLEMENT_1FEATURE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::FRONT_END_DOES_NOT_IMPLEMENT_FEATURE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1DISCRETIONARY_1ERROR_1IO_1PARTIAL_1READ_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::DISCRETIONARY_ERROR_IO_PARTIAL_READ;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1INVALID_1SDG_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_INVALID_SDG;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1PATH_1INFEASIBLE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::PATH_INFEASIBLE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1INVALID_1SDG_1STORE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_INVALID_SDG_STORE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1INVALID_1OPERATOR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_INVALID_OPERATOR;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1INVALID_1ATTRIBUTE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_INVALID_ATTRIBUTE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1SDG_1NOT_1PRESENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_SDG_NOT_PRESENT;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1AN_1SDG_1ALREADY_1PRESENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_AN_SDG_ALREADY_PRESENT;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1NO_1CFG_1EDGES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_NO_CFG_EDGES;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1NO_1INTER_1CFG_1EDGES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_NO_INTER_CFG_EDGES;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1NO_1USE_1DEF_1SETS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_NO_USE_DEF_SETS;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1NO_1BACKWARD_1CFG_1EDGES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_NO_BACKWARD_CFG_EDGES;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1NO_1BASIC_1BLOCKS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_NO_BASIC_BLOCKS;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1NO_1POINTER_1ANALYSIS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_NO_POINTER_ANALYSIS;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1NO_1DECL_1VERTICES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_NO_DECL_VERTICES;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1NO_1GMOD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_NO_GMOD;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1NO_1DATA_1DEPENDENCE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_NO_DATA_DEPENDENCE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1NO_1CONTROL_1DEPENDENCE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_NO_CONTROL_DEPENDENCE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1NO_1CONTROL_1DEPENDENCE_1LABELS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_NO_CONTROL_DEPENDENCE_LABELS;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1NO_1DEPENDENCES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_NO_DEPENDENCES;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1NO_1SUB_1OBJECT_1ABS_1LOCS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_NO_SUB_OBJECT_ABS_LOCS;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1NOT_1IN_1BATCH_1MODE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_NOT_IN_BATCH_MODE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1IMMUTABLE_1DATA_1STRUCTURE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_IMMUTABLE_DATA_STRUCTURE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1CANNOT_1FIND_1PATH_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_CANNOT_FIND_PATH;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1INVALID_1SFID_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_INVALID_SFID;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1INVALID_1SFID_1STRING_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_INVALID_SFID_STRING;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1INVALID_1UNITLINE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_INVALID_UNITLINE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1LANGUAGE_1NOT_1FOUND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_LANGUAGE_NOT_FOUND;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1NO_1LICENSE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_NO_LICENSE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1LICENSE_1VERIFICATION_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_LICENSE_VERIFICATION_FAILED;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1LICENSE_1LOCK_1LOST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_LICENSE_LOCK_LOST;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1NO_1BUILDER_1LICENSE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_NO_BUILDER_LICENSE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1NONINCR_1TO_1INCR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_NONINCR_TO_INCR;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1PARAM_1EVAL_1ORDER_1DIFFER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_PARAM_EVAL_ORDER_DIFFER;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1CFG_1EDGES_1DIFFER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_CFG_EDGES_DIFFER;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1BASIC_1BLOCKS_1DIFFER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_BASIC_BLOCKS_DIFFER;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1DISPLAY_1USES_1EXPRS_1DIFFER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_DISPLAY_USES_EXPRS_DIFFER;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1BINARIES_1PRESENT_1DIFFER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_BINARIES_PRESENT_DIFFER;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1PDG_1VERTEX_1TO_1AST_1MAPPING_1DIFFER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_PDG_VERTEX_TO_AST_MAPPING_DIFFER;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1RETAIN_1UNNORMALIZED_1C_1AST_1DIFFER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_RETAIN_UNNORMALIZED_C_AST_DIFFER;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1COMPUTE_1SSA_1DIFFER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_COMPUTE_SSA_DIFFER;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1PI_1NODES_1DIFFER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_PI_NODES_DIFFER;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1NORM_1DISJUNCTIVES_1DIFFER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_NORM_DISJUNCTIVES_DIFFER;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1INVALID_1SET_1KIND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_INVALID_SET_KIND;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1INVALID_1ABS_1LOC_1KIND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_INVALID_ABS_LOC_KIND;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1UNKNOWN_1ABS_1LOC_1KIND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_UNKNOWN_ABS_LOC_KIND;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1INVALID_1PDG_1KIND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_INVALID_PDG_KIND;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1INVALID_1VERTEX_1KIND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_INVALID_VERTEX_KIND;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1INVALID_1VERTEX_1SYNTAX_1KIND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_INVALID_VERTEX_SYNTAX_KIND;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1INVALID_1VERTEX_1SYNTAX_1ELEMENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_INVALID_VERTEX_SYNTAX_ELEMENT;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1INVALID_1PDG_1EDGE_1KIND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_INVALID_PDG_EDGE_KIND;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1INVALID_1FILTER_1PDG_1DIRECTIVE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_INVALID_FILTER_PDG_DIRECTIVE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1INVALID_1FILTER_1PDG_1VERTEX_1DIRECTIVE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_INVALID_FILTER_PDG_VERTEX_DIRECTIVE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1INVALID_1PS_1ENUM_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_INVALID_PS_ENUM;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1NEGATIVE_1THRESHOLD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_NEGATIVE_THRESHOLD;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1FATOBJ_1STORE_1OPEN_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_FATOBJ_STORE_OPEN_FAILED;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1IO_1OPEN_1FILE_1TO_1READ_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_IO_OPEN_FILE_TO_READ;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1IO_1OPEN_1FILE_1TO_1WRITE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_IO_OPEN_FILE_TO_WRITE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1IO_1LOCK_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_IO_LOCK;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1IO_1LOCKED_1BY_1OTHER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_IO_LOCKED_BY_OTHER;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1IO_1SEEK_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_IO_SEEK;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1IO_1SEEK_1TO_1EOF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_IO_SEEK_TO_EOF;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1IO_1FLUSH_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_IO_FLUSH;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1IO_1READ_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_IO_READ;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1IO_1READ_1ZERO_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_IO_READ_ZERO;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1IO_1READ_1TOO_1MUCH_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_IO_READ_TOO_MUCH;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1IO_1WRITE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_IO_WRITE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1IO_1WRITE_1ZERO_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_IO_WRITE_ZERO;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1IO_1WRITE_1TOO_1MUCH_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_IO_WRITE_TOO_MUCH;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1IO_1WRITE_1TO_1READ_1ONLY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_IO_WRITE_TO_READ_ONLY;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1IO_1READ_1PAST_1EOF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_IO_READ_PAST_EOF;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1IO_1WRITE_1PAST_1EOF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_IO_WRITE_PAST_EOF;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1IO_1SEEK_1PAST_1EOF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_IO_SEEK_PAST_EOF;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1IO_1STAT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_IO_STAT;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1IO_1MOVE_1EOF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_IO_MOVE_EOF;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1IO_1GET_1EOF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_IO_GET_EOF;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1IO_1GET_1POSITION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_IO_GET_POSITION;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1IO_1CLOSE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_IO_CLOSE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1IO_1READ_1BAD_1CHECKSUM_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_IO_READ_BAD_CHECKSUM;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1IO_1RENAME_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_IO_RENAME;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1INVALID_1SEEK_1RETURN_1RANGE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_INVALID_SEEK_RETURN_RANGE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1INVALID_1LINE_1POSITION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_INVALID_LINE_POSITION;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1PARAMETER_1TOO_1LARGE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_PARAMETER_TOO_LARGE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1PYTHON_1EXCEPTION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_PYTHON_EXCEPTION;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1FORK_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_FORK_FAILED;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1CREATE_1THREAD_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_CREATE_THREAD_FAILED;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1NOT_1A_1CALL_1SITE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_NOT_A_CALL_SITE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1NOT_1AN_1ACTUAL_1IN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_NOT_AN_ACTUAL_IN;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1NOT_1AN_1ACTUAL_1OUT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_NOT_AN_ACTUAL_OUT;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1NO_1EXCEPTIONS_1OR_1ABNORMAL_1EXITS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_NO_EXCEPTIONS_OR_ABNORMAL_EXITS;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1DISALLOWED_1SET_1KIND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_DISALLOWED_SET_KIND;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1NO_1SUMMARY_1EDGES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_NO_SUMMARY_EDGES;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1NO_1SCC_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_NO_SCC;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1UID_1NOT_1FOUND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_UID_NOT_FOUND;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1INVALID_1OFFSET_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_INVALID_OFFSET;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1COUNT_1UNKNOWN_1BUT_1POSITIVE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_COUNT_UNKNOWN_BUT_POSITIVE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1COUNT_1UNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_COUNT_UNKNOWN;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1INVALID_1SFID_1OR_1LINE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_INVALID_SFID_OR_LINE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1INVALID_1COLORING_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_INVALID_COLORING_ID;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1INVALID_1SYNTAX_1KIND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_INVALID_SYNTAX_KIND;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1INVALID_1TOKDEF_1KIND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_INVALID_TOKDEF_KIND;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1NO_1CONTAINER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_NO_CONTAINER;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1GET_1HOST_1NAME_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_GET_HOST_NAME_FAILED;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1GET_1COMPUTER_1NAME_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_GET_COMPUTER_NAME_FAILED;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1GET_1PW_1UID_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_GET_PW_UID_FAILED;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1GET_1USER_1NAME_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_GET_USER_NAME_FAILED;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1INVALID_1ARGUMENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_INVALID_ARGUMENT;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1OVERFLOW_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_OVERFLOW;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1OUT_1OF_1MEMORY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_OUT_OF_MEMORY;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1INVALID_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_INVALID_TYPE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1NO_1SUCH_1PDG_1HAMMOCK_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_NO_SUCH_PDG_HAMMOCK;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1HAMMOCK_1NUM_1EXIT_1EDGE_1SETS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_HAMMOCK_NUM_EXIT_EDGE_SETS;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1STOP_1TRAVERSAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_STOP_TRAVERSAL;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INCOMPATIBLE_1ARGUMENTS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INCOMPATIBLE_ARGUMENTS;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INVALID_1DATA_1FORMAT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INVALID_DATA_FORMAT;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1GRAN_1MISMATCH_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_GRAN_MISMATCH;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1METRIC_1NOT_1COMPUTED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::METRIC_NOT_COMPUTED;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1TIMEOUT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::TIMEOUT;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1MISMATCH_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_MISMATCH;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1INVALID_1SLAVE_1OPERATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_INVALID_SLAVE_OPERATION;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1INVALID_1PHASE_1FOR_1OPERATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_INVALID_PHASE_FOR_OPERATION;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1DISABLED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::DISABLED;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1CODESURFER_1ONLY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_CODESURFER_ONLY;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1INCOMPATIBLE_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_INCOMPATIBLE_VERSION;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1AMC_1IS_1BOTTOM_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::AMC_IS_BOTTOM;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1AMC_1NOT_1AVAILABLE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::AMC_NOT_AVAILABLE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1NOT_1MACHINE_1CODE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::NOT_MACHINE_CODE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1MODULE_1IR_1NOT_1AVAILABLE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::MODULE_IR_NOT_AVAILABLE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ERROR_1ANALYSIS_1NOT_1RUN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ERROR_ANALYSIS_NOT_RUN;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1BAD_1ABS_1LOC_1KIND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_BAD_ABS_LOC_KIND;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1BAD_1ABS_1LOC_1UID_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_BAD_ABS_LOC_UID;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1NULL_1ABS_1LOC_1FIELD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_NULL_ABS_LOC_FIELD;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1NULL_1ABS_1LOC_1FIELDS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_NULL_ABS_LOC_FIELDS;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1NULL_1INL_1TARGET_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_NULL_INL_TARGET;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1NULL_1INL_1TARGETS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_NULL_INL_TARGETS;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1NULL_1LAST_1VERTEX_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_NULL_LAST_VERTEX;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1NULL_1LAST_1VERTEX_12_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_NULL_LAST_VERTEX_2;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1ABS_1LOC_1SET_1CLOSE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_ABS_LOC_SET_CLOSE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1BB_1SET_1CLOSE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_BB_SET_CLOSE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1PDGV_1SET_1CLOSE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_PDGV_SET_CLOSE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1IP_1SET_1CLOSE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_IP_SET_CLOSE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1IP_1MAP_1COMPUTE_1FAIL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_IP_MAP_COMPUTE_FAIL;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1BAD_1FORMAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_BAD_FORMAL;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1PDG_1MISSING_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_PDG_MISSING;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1PDG_1MISSING_102_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_PDG_MISSING_02;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1AIN_1NO_1CALL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_AIN_NO_CALL;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1PDG_1CALL_1NO_1CALLEE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_PDG_CALL_NO_CALLEE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1PDG_1CALL_1NO_1CALLEE_12_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_PDG_CALL_NO_CALLEE_2;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1PDG_1CALL_1NO_1CALLEE_13_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_PDG_CALL_NO_CALLEE_3;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1GET_1ISET_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_GET_ISET;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1GET_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_GET_LENGTH;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1UNION_1P_1FAILS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_UNION_P_FAILS;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1UID_1SFID_1HANDLES_1NOT_1DEFINED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_UID_SFID_HANDLES_NOT_DEFINED;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1UID_1SFID_1HANDLES_1NOT_1LIST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_UID_SFID_HANDLES_NOT_LIST;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1UID_1SFID_1HANDLES_1NOT_1PAIR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_UID_SFID_HANDLES_NOT_PAIR;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1UID_1SFID_1HANDLES_1NOT_1SHANDLE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_UID_SFID_HANDLES_NOT_SHANDLE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1UID_1SFID_1HANDLES_1NOT_1SFID_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_UID_SFID_HANDLES_NOT_SFID;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1UID_1SFID_1HANDLES_1MISSING_1TMPDIR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_UID_SFID_HANDLES_MISSING_TMPDIR;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1U2S_1MISSING_1TMPDIR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_U2S_MISSING_TMPDIR;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1TRY_1AGAIN_1LATER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_TRY_AGAIN_LATER;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1GETCWD_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_GETCWD_FAILED;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1GETCURRENTDIRECTORY_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_GETCURRENTDIRECTORY_FAILED;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1UNEXPECTED_1RESPONSE_1CODE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_UNEXPECTED_RESPONSE_CODE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1UNEXPECTED_1MESSAGE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_UNEXPECTED_MESSAGE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1CONNECTION_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_CONNECTION_FAILED;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1OPENSCMANAGER_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_OPENSCMANAGER_FAILED;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1CREATESERVICE_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_CREATESERVICE_FAILED;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1OPENSERVICE_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_OPENSERVICE_FAILED;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1STARTSERVICE_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_STARTSERVICE_FAILED;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1SERVICE_1DID_1NOT_1START_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_SERVICE_DID_NOT_START;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1QUERYSERVICESTATUS_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_QUERYSERVICESTATUS_FAILED;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1DELETESERVICE_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_DELETESERVICE_FAILED;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1TERMINAL_1SERVER_1NOT_1OK_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_TERMINAL_SERVER_NOT_OK;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1KERNEL_1OBJECT_1NAME_1UNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_KERNEL_OBJECT_NAME_UNKNOWN;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1GET_1NTDLL_1BASE_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_GET_NTDLL_BASE_FAILED;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1UNFAMILIAR_1SYSCALL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_UNFAMILIAR_SYSCALL;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1DRVHOOKCS_1CONFIGURE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_DRVHOOKCS_CONFIGURE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1DRVHOOKCS_1ACTIVATE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_DRVHOOKCS_ACTIVATE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1DRVHOOKCS_1FLTLIB_1LOADLIBRARY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_DRVHOOKCS_FLTLIB_LOADLIBRARY;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1DRVHOOKCS_1FLTLIB_1GETPROCADDRESS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_DRVHOOKCS_FLTLIB_GETPROCADDRESS;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1MULTIBYTETOWIDECHAR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_MULTIBYTETOWIDECHAR;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1ABS_1LOC_1FUNCTION_1TO_1PDG_1NO_1PDG_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_ABS_LOC_FUNCTION_TO_PDG_NO_PDG;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1REGISTRY_1WRITE_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_REGISTRY_WRITE_FAILED;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1DRVHOOKCS_1SINGLE_1PARSE_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_DRVHOOKCS_SINGLE_PARSE_VERSION;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1DRVHOOKCS_1INCOMPATIBLE_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_DRVHOOKCS_INCOMPATIBLE_VERSION;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1VALUESET_1NOT_1FOUND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_VALUESET_NOT_FOUND;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1NO_1VALUESET_1INTERFACE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_NO_VALUESET_INTERFACE;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ON_1BAD_1FILE_1SYSTEM_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ON_BAD_FILE_SYSTEM;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1ACCESS_1DENIED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::ACCESS_DENIED;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1SSL_1CERTIFICATE_1HOSTNAME_1MISMATCH_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::SSL_CERTIFICATE_HOSTNAME_MISMATCH;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_result_1INTERNAL_1ERROR_1UNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::result *)&cs::result::INTERNAL_ERROR_UNKNOWN;
  *(cs::result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::result *arg1 = (cs::result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1set_1kind(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  cs::set_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (cs::set_kind *)new cs::set_kind(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::set_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_set_1kind_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::set_kind *arg1 = (cs::set_kind *) 0 ;
  cs::set_kind *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::set_kind **)&jarg1; 
  arg2 = *(cs::set_kind **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::set_kind const & reference is null");
    return 0;
  } 
  result = (int)((cs::set_kind const *)arg1)->cmp((cs::set_kind const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_set_1kind_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::set_kind *arg1 = (cs::set_kind *) 0 ;
  cs::set_kind *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::set_kind **)&jarg1; 
  arg2 = *(cs::set_kind **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::set_kind const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::set_kind const *)arg1)->operator ==((cs::set_kind const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_set_1kind_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::set_kind *arg1 = (cs::set_kind *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::set_kind **)&jarg1; 
  result = (int)((cs::set_kind const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_set_1kind_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::set_kind *arg1 = (cs::set_kind *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::set_kind **)&jarg1; 
  {
    try {
      result = ((cs::set_kind const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_set_1kind_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::set_kind *arg1 = (cs::set_kind *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::set_kind **)&jarg1; 
  result = ((cs::set_kind const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_set_1kind_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::set_kind *arg1 = (cs::set_kind *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::set_kind **)&jarg1; 
  {
    try {
      result = ((cs::set_kind const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_set_1kind_1FAST_1VECTOR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::set_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::set_kind *)&cs::set_kind::FAST_VECTOR;
  *(cs::set_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_set_1kind_1LIST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::set_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::set_kind *)&cs::set_kind::LIST;
  *(cs::set_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_set_1kind_1TREE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::set_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::set_kind *)&cs::set_kind::TREE;
  *(cs::set_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_set_1kind_1BIT_1VECTOR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::set_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::set_kind *)&cs::set_kind::BIT_VECTOR;
  *(cs::set_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_set_1kind_1TRIE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::set_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::set_kind *)&cs::set_kind::TRIE;
  *(cs::set_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1set_1kind(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::set_kind *arg1 = (cs::set_kind *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::set_kind **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_string_1pair_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cs::string_pair *arg1 = (cs::string_pair *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::string_pair **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_string_1pair_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::string_pair *arg1 = (cs::string_pair *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::string_pair **)&jarg1; 
  result = (std::string *) & ((arg1)->first);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_string_1pair_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cs::string_pair *arg1 = (cs::string_pair *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::string_pair **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_string_1pair_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::string_pair *arg1 = (cs::string_pair *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::string_pair **)&jarg1; 
  result = (std::string *) & ((arg1)->second);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1string_1pair_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::string_pair *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (cs::string_pair *)new cs::string_pair();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::string_pair **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1string_1pair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  cs::string_pair *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (cs::string_pair *)new cs::string_pair((std::string const &)*arg1,(std::string const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::string_pair **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1string_1pair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::string_pair *arg1 = (cs::string_pair *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::string_pair **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1result_1counters_1get_1scanned(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::xr_result_counters *arg1 = (cs::xr_result_counters *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_result_counters **)&jarg1; 
  {
    try {
      result = cs_xr_result_counters_get_scanned(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1result_1counters_1get_1unscanned(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::xr_result_counters *arg1 = (cs::xr_result_counters *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_result_counters **)&jarg1; 
  {
    try {
      result = cs_xr_result_counters_get_unscanned(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1result_1counters_1get_1matched(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::xr_result_counters *arg1 = (cs::xr_result_counters *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_result_counters **)&jarg1; 
  {
    try {
      result = cs_xr_result_counters_get_matched(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1xr_1result_1counters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::xr_result_counters *arg1 = (cs::xr_result_counters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::xr_result_counters **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1int_1pair_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  std::pair< csuint32,csuint32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (std::pair< csuint32,csuint32 > *)new std::pair< csuint32,csuint32 >(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< csuint32,csuint32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1int_1pair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< csuint32,csuint32 > *arg1 = 0 ;
  std::pair< csuint32,csuint32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< csuint32,csuint32 > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< csuint32,csuint32 > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< csuint32,csuint32 > *)new std::pair< csuint32,csuint32 >((std::pair< csuint32,csuint32 > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< csuint32,csuint32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1get_1first(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< csuint32,csuint32 > *arg1 = (std::pair< csuint32,csuint32 > *) 0 ;
  unsigned int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< csuint32,csuint32 > **)&jarg1; 
  {
    try {
      result = (unsigned int *) &std_pair_Sl_csuint32_Sc_csuint32_Sg__get_first(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1get_1second(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< csuint32,csuint32 > *arg1 = (std::pair< csuint32,csuint32 > *) 0 ;
  unsigned int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< csuint32,csuint32 > **)&jarg1; 
  {
    try {
      result = (unsigned int *) &std_pair_Sl_csuint32_Sc_csuint32_Sg__get_second(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1int_1pair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< csuint32,csuint32 > *arg1 = (std::pair< csuint32,csuint32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< csuint32,csuint32 > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1position_1range_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::pair< unsigned int,unsigned int > > arg1 ;
  SwigValueWrapper< std::pair< unsigned int,unsigned int > > arg2 ;
  std::pair< unsigned int,unsigned int > *argp1 ;
  std::pair< unsigned int,unsigned int > *argp2 ;
  std::pair< std::pair< cs::line_number,cs::column_number >,std::pair< cs::line_number,cs::column_number > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::pair< unsigned int,unsigned int > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::pair< unsigned int,unsigned int >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::pair< unsigned int,unsigned int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::pair< unsigned int,unsigned int >");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (std::pair< std::pair< cs::line_number,cs::column_number >,std::pair< cs::line_number,cs::column_number > > *)new std::pair< std::pair< cs::line_number,cs::column_number >,std::pair< cs::line_number,cs::column_number > >(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< std::pair< cs::line_number,cs::column_number >,std::pair< cs::line_number,cs::column_number > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1position_1range_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< std::pair< cs::line_number,cs::column_number >,std::pair< cs::line_number,cs::column_number > > *arg1 = 0 ;
  std::pair< std::pair< cs::line_number,cs::column_number >,std::pair< cs::line_number,cs::column_number > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::pair< cs::line_number,cs::column_number >,std::pair< cs::line_number,cs::column_number > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< std::pair< cs::line_number,cs::column_number >,std::pair< cs::line_number,cs::column_number > > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< std::pair< cs::line_number,cs::column_number >,std::pair< cs::line_number,cs::column_number > > *)new std::pair< std::pair< cs::line_number,cs::column_number >,std::pair< cs::line_number,cs::column_number > >((std::pair< std::pair< cs::line_number,cs::column_number >,std::pair< cs::line_number,cs::column_number > > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< std::pair< cs::line_number,cs::column_number >,std::pair< cs::line_number,cs::column_number > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_position_1range_1get_1first(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< std::pair< cs::line_number,cs::column_number >,std::pair< cs::line_number,cs::column_number > > *arg1 = (std::pair< std::pair< cs::line_number,cs::column_number >,std::pair< cs::line_number,cs::column_number > > *) 0 ;
  std::pair< unsigned int,unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::pair< cs::line_number,cs::column_number >,std::pair< cs::line_number,cs::column_number > > **)&jarg1; 
  {
    try {
      result = (std::pair< unsigned int,unsigned int > *) &std_pair_Sl_std_pair_Sl_cs_line_number_Sc_cs_column_number_Sg__Sc_std_pair_Sl_cs_line_number_Sc_cs_column_number_Sg__Sg__get_first(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< unsigned int,unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_position_1range_1get_1second(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< std::pair< cs::line_number,cs::column_number >,std::pair< cs::line_number,cs::column_number > > *arg1 = (std::pair< std::pair< cs::line_number,cs::column_number >,std::pair< cs::line_number,cs::column_number > > *) 0 ;
  std::pair< unsigned int,unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::pair< cs::line_number,cs::column_number >,std::pair< cs::line_number,cs::column_number > > **)&jarg1; 
  {
    try {
      result = (std::pair< unsigned int,unsigned int > *) &std_pair_Sl_std_pair_Sl_cs_line_number_Sc_cs_column_number_Sg__Sc_std_pair_Sl_cs_line_number_Sc_cs_column_number_Sg__Sg__get_second(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< unsigned int,unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1position_1range(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< std::pair< cs::line_number,cs::column_number >,std::pair< cs::line_number,cs::column_number > > *arg1 = (std::pair< std::pair< cs::line_number,cs::column_number >,std::pair< cs::line_number,cs::column_number > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< std::pair< cs::line_number,cs::column_number >,std::pair< cs::line_number,cs::column_number > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1string_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1string_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_string_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_string_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_string_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_string_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< std::string > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_string_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_string_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_string_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_string_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      try {
        std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1string_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1compunit_1line_1pair_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::compunit > arg1 ;
  unsigned int arg2 ;
  cs::compunit *argp1 ;
  std::pair< cs::compunit,cs::compunit_line > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(cs::compunit **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::compunit");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (std::pair< cs::compunit,cs::compunit_line > *)new std::pair< cs::compunit,cs::compunit_line >(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::compunit,cs::compunit_line > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1compunit_1line_1pair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::compunit,cs::compunit_line > *arg1 = 0 ;
  std::pair< cs::compunit,cs::compunit_line > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::compunit,cs::compunit_line > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< cs::compunit,cs::compunit_line > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< cs::compunit,cs::compunit_line > *)new std::pair< cs::compunit,cs::compunit_line >((std::pair< cs::compunit,cs::compunit_line > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::compunit,cs::compunit_line > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1line_1pair_1get_1first(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::compunit,cs::compunit_line > *arg1 = (std::pair< cs::compunit,cs::compunit_line > *) 0 ;
  cs::compunit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::compunit,cs::compunit_line > **)&jarg1; 
  {
    try {
      result = (cs::compunit *) &std_pair_Sl_cs_compunit_Sc_cs_compunit_line_Sg__get_first(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::compunit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1line_1pair_1get_1second(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::compunit,cs::compunit_line > *arg1 = (std::pair< cs::compunit,cs::compunit_line > *) 0 ;
  unsigned int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::compunit,cs::compunit_line > **)&jarg1; 
  {
    try {
      result = (unsigned int *) &std_pair_Sl_cs_compunit_Sc_cs_compunit_line_Sg__get_second(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1compunit_1line_1pair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< cs::compunit,cs::compunit_line > *arg1 = (std::pair< cs::compunit,cs::compunit_line > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< cs::compunit,cs::compunit_line > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1sfileinst_1line_1column_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::sfileinst > arg1 ;
  SwigValueWrapper< std::pair< unsigned int,unsigned int > > arg2 ;
  cs::sfileinst *argp1 ;
  std::pair< unsigned int,unsigned int > *argp2 ;
  std::pair< cs::sfileinst,std::pair< cs::line_number,cs::column_number > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(cs::sfileinst **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::sfileinst");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::pair< unsigned int,unsigned int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::pair< unsigned int,unsigned int >");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (std::pair< cs::sfileinst,std::pair< cs::line_number,cs::column_number > > *)new std::pair< cs::sfileinst,std::pair< cs::line_number,cs::column_number > >(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::sfileinst,std::pair< cs::line_number,cs::column_number > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1sfileinst_1line_1column_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::sfileinst,std::pair< cs::line_number,cs::column_number > > *arg1 = 0 ;
  std::pair< cs::sfileinst,std::pair< cs::line_number,cs::column_number > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::sfileinst,std::pair< cs::line_number,cs::column_number > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< cs::sfileinst,std::pair< cs::line_number,cs::column_number > > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< cs::sfileinst,std::pair< cs::line_number,cs::column_number > > *)new std::pair< cs::sfileinst,std::pair< cs::line_number,cs::column_number > >((std::pair< cs::sfileinst,std::pair< cs::line_number,cs::column_number > > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::sfileinst,std::pair< cs::line_number,cs::column_number > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1line_1column_1get_1first(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::sfileinst,std::pair< cs::line_number,cs::column_number > > *arg1 = (std::pair< cs::sfileinst,std::pair< cs::line_number,cs::column_number > > *) 0 ;
  cs::sfileinst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::sfileinst,std::pair< cs::line_number,cs::column_number > > **)&jarg1; 
  {
    try {
      result = (cs::sfileinst *) &std_pair_Sl_cs_sfileinst_Sc_std_pair_Sl_cs_line_number_Sc_cs_column_number_Sg__Sg__get_first(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::sfileinst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1line_1column_1get_1second(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::sfileinst,std::pair< cs::line_number,cs::column_number > > *arg1 = (std::pair< cs::sfileinst,std::pair< cs::line_number,cs::column_number > > *) 0 ;
  std::pair< unsigned int,unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::sfileinst,std::pair< cs::line_number,cs::column_number > > **)&jarg1; 
  {
    try {
      result = (std::pair< unsigned int,unsigned int > *) &std_pair_Sl_cs_sfileinst_Sc_std_pair_Sl_cs_line_number_Sc_cs_column_number_Sg__Sg__get_second(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< unsigned int,unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1sfileinst_1line_1column(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< cs::sfileinst,std::pair< cs::line_number,cs::column_number > > *arg1 = (std::pair< cs::sfileinst,std::pair< cs::line_number,cs::column_number > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< cs::sfileinst,std::pair< cs::line_number,cs::column_number > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1sfileinst_1line_1pair_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::sfileinst > arg1 ;
  unsigned int arg2 ;
  cs::sfileinst *argp1 ;
  std::pair< cs::sfileinst,cs::line_number > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(cs::sfileinst **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::sfileinst");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (std::pair< cs::sfileinst,cs::line_number > *)new std::pair< cs::sfileinst,cs::line_number >(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::sfileinst,cs::line_number > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1sfileinst_1line_1pair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::sfileinst,cs::line_number > *arg1 = 0 ;
  std::pair< cs::sfileinst,cs::line_number > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::sfileinst,cs::line_number > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< cs::sfileinst,cs::line_number > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< cs::sfileinst,cs::line_number > *)new std::pair< cs::sfileinst,cs::line_number >((std::pair< cs::sfileinst,cs::line_number > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::sfileinst,cs::line_number > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1line_1pair_1get_1first(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::sfileinst,cs::line_number > *arg1 = (std::pair< cs::sfileinst,cs::line_number > *) 0 ;
  cs::sfileinst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::sfileinst,cs::line_number > **)&jarg1; 
  {
    try {
      result = (cs::sfileinst *) &std_pair_Sl_cs_sfileinst_Sc_cs_line_number_Sg__get_first(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::sfileinst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1line_1pair_1get_1second(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::sfileinst,cs::line_number > *arg1 = (std::pair< cs::sfileinst,cs::line_number > *) 0 ;
  unsigned int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::sfileinst,cs::line_number > **)&jarg1; 
  {
    try {
      result = (unsigned int *) &std_pair_Sl_cs_sfileinst_Sc_cs_line_number_Sg__get_second(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1sfileinst_1line_1pair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< cs::sfileinst,cs::line_number > *arg1 = (std::pair< cs::sfileinst,cs::line_number > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< cs::sfileinst,cs::line_number > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1sfile_1line_1pair_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::sfile > arg1 ;
  unsigned int arg2 ;
  cs::sfile *argp1 ;
  std::pair< cs::sfile,cs::line_number > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(cs::sfile **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::sfile");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (std::pair< cs::sfile,cs::line_number > *)new std::pair< cs::sfile,cs::line_number >(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::sfile,cs::line_number > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1sfile_1line_1pair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::sfile,cs::line_number > *arg1 = 0 ;
  std::pair< cs::sfile,cs::line_number > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::sfile,cs::line_number > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< cs::sfile,cs::line_number > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< cs::sfile,cs::line_number > *)new std::pair< cs::sfile,cs::line_number >((std::pair< cs::sfile,cs::line_number > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::sfile,cs::line_number > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1line_1pair_1get_1first(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::sfile,cs::line_number > *arg1 = (std::pair< cs::sfile,cs::line_number > *) 0 ;
  cs::sfile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::sfile,cs::line_number > **)&jarg1; 
  {
    try {
      result = (cs::sfile *) &std_pair_Sl_cs_sfile_Sc_cs_line_number_Sg__get_first(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::sfile **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1line_1pair_1get_1second(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::sfile,cs::line_number > *arg1 = (std::pair< cs::sfile,cs::line_number > *) 0 ;
  unsigned int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::sfile,cs::line_number > **)&jarg1; 
  {
    try {
      result = (unsigned int *) &std_pair_Sl_cs_sfile_Sc_cs_line_number_Sg__get_second(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1sfile_1line_1pair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< cs::sfile,cs::line_number > *arg1 = (std::pair< cs::sfile,cs::line_number > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< cs::sfile,cs::line_number > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1cfg_1edge_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::point > arg1 ;
  SwigValueWrapper< cs::edge_label > arg2 ;
  cs::point *argp1 ;
  cs::edge_label *argp2 ;
  std::pair< cs::point,cs::edge_label > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(cs::point **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::point");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(cs::edge_label **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::edge_label");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (std::pair< cs::point,cs::edge_label > *)new std::pair< cs::point,cs::edge_label >(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::point,cs::edge_label > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1cfg_1edge_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::point,cs::edge_label > *arg1 = 0 ;
  std::pair< cs::point,cs::edge_label > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::point,cs::edge_label > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< cs::point,cs::edge_label > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< cs::point,cs::edge_label > *)new std::pair< cs::point,cs::edge_label >((std::pair< cs::point,cs::edge_label > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::point,cs::edge_label > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_cfg_1edge_1get_1first(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::point,cs::edge_label > *arg1 = (std::pair< cs::point,cs::edge_label > *) 0 ;
  cs::point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::point,cs::edge_label > **)&jarg1; 
  {
    try {
      result = (cs::point *) &std_pair_Sl_cs_point_Sc_cs_edge_label_Sg__get_first(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_cfg_1edge_1get_1second(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::point,cs::edge_label > *arg1 = (std::pair< cs::point,cs::edge_label > *) 0 ;
  cs::edge_label *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::point,cs::edge_label > **)&jarg1; 
  {
    try {
      result = (cs::edge_label *) &std_pair_Sl_cs_point_Sc_cs_edge_label_Sg__get_second(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::edge_label **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1cfg_1edge(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< cs::point,cs::edge_label > *arg1 = (std::pair< cs::point,cs::edge_label > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< cs::point,cs::edge_label > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1labeled_1pdg_1edge_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::point > arg1 ;
  SwigValueWrapper< cs::pdg_edge_label > arg2 ;
  cs::point *argp1 ;
  cs::pdg_edge_label *argp2 ;
  std::pair< cs::point,cs::pdg_edge_label > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(cs::point **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::point");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(cs::pdg_edge_label **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::pdg_edge_label");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (std::pair< cs::point,cs::pdg_edge_label > *)new std::pair< cs::point,cs::pdg_edge_label >(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::point,cs::pdg_edge_label > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1labeled_1pdg_1edge_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::point,cs::pdg_edge_label > *arg1 = 0 ;
  std::pair< cs::point,cs::pdg_edge_label > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::point,cs::pdg_edge_label > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< cs::point,cs::pdg_edge_label > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< cs::point,cs::pdg_edge_label > *)new std::pair< cs::point,cs::pdg_edge_label >((std::pair< cs::point,cs::pdg_edge_label > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::point,cs::pdg_edge_label > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_labeled_1pdg_1edge_1get_1first(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::point,cs::pdg_edge_label > *arg1 = (std::pair< cs::point,cs::pdg_edge_label > *) 0 ;
  cs::point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::point,cs::pdg_edge_label > **)&jarg1; 
  {
    try {
      result = (cs::point *) &std_pair_Sl_cs_point_Sc_cs_pdg_edge_label_Sg__get_first(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_labeled_1pdg_1edge_1get_1second(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::point,cs::pdg_edge_label > *arg1 = (std::pair< cs::point,cs::pdg_edge_label > *) 0 ;
  cs::pdg_edge_label *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::point,cs::pdg_edge_label > **)&jarg1; 
  {
    try {
      result = (cs::pdg_edge_label *) &std_pair_Sl_cs_point_Sc_cs_pdg_edge_label_Sg__get_second(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::pdg_edge_label **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1labeled_1pdg_1edge(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< cs::point,cs::pdg_edge_label > *arg1 = (std::pair< cs::point,cs::pdg_edge_label > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< cs::point,cs::pdg_edge_label > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1pdg_1edge_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::point > arg1 ;
  cs::pdg_edge_kind arg2 ;
  cs::point *argp1 ;
  cs::pdg_edge_kind *argp2 ;
  std::pair< cs::point,cs::pdg_edge_kind > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(cs::point **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::point");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(cs::pdg_edge_kind **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::pdg_edge_kind");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (std::pair< cs::point,cs::pdg_edge_kind > *)new std::pair< cs::point,cs::pdg_edge_kind >(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::point,cs::pdg_edge_kind > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1pdg_1edge_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::point,cs::pdg_edge_kind > *arg1 = 0 ;
  std::pair< cs::point,cs::pdg_edge_kind > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::point,cs::pdg_edge_kind > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< cs::point,cs::pdg_edge_kind > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< cs::point,cs::pdg_edge_kind > *)new std::pair< cs::point,cs::pdg_edge_kind >((std::pair< cs::point,cs::pdg_edge_kind > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::point,cs::pdg_edge_kind > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1get_1first(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::point,cs::pdg_edge_kind > *arg1 = (std::pair< cs::point,cs::pdg_edge_kind > *) 0 ;
  cs::point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::point,cs::pdg_edge_kind > **)&jarg1; 
  {
    try {
      result = (cs::point *) &std_pair_Sl_cs_point_Sc_cs_pdg_edge_kind_Sg__get_first(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1get_1second(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::point,cs::pdg_edge_kind > *arg1 = (std::pair< cs::point,cs::pdg_edge_kind > *) 0 ;
  cs::pdg_edge_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::point,cs::pdg_edge_kind > **)&jarg1; 
  {
    try {
      result = (cs::pdg_edge_kind *) &std_pair_Sl_cs_point_Sc_cs_pdg_edge_kind_Sg__get_second(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::pdg_edge_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1pdg_1edge(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< cs::point,cs::pdg_edge_kind > *arg1 = (std::pair< cs::point,cs::pdg_edge_kind > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< cs::point,cs::pdg_edge_kind > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1procedure_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cs::procedure > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< cs::procedure > *)new std::vector< cs::procedure >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::procedure > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::procedure > *arg1 = (std::vector< cs::procedure > *) 0 ;
  std::vector< cs::procedure >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::procedure > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::procedure > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::procedure > *arg1 = (std::vector< cs::procedure > *) 0 ;
  std::vector< cs::procedure >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::procedure > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::procedure > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_procedure_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cs::procedure > *arg1 = (std::vector< cs::procedure > *) 0 ;
  std::vector< cs::procedure >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::procedure > **)&jarg1; 
  arg2 = (std::vector< cs::procedure >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_procedure_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cs::procedure > *arg1 = (std::vector< cs::procedure > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::procedure > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< cs::procedure > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_procedure_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cs::procedure > *arg1 = (std::vector< cs::procedure > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::procedure > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_procedure_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cs::procedure > *arg1 = (std::vector< cs::procedure > *) 0 ;
  std::vector< cs::procedure >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cs::procedure > **)&jarg1; 
  arg2 = *(std::vector< cs::procedure >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::procedure >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< cs::procedure >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cs::procedure > *arg1 = (std::vector< cs::procedure > *) 0 ;
  int arg2 ;
  std::vector< cs::procedure >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::procedure > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< cs::procedure >::value_type *) &std_vector_Sl_cs_procedure_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::procedure >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_procedure_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cs::procedure > *arg1 = (std::vector< cs::procedure > *) 0 ;
  int arg2 ;
  std::vector< cs::procedure >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cs::procedure > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< cs::procedure >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::procedure >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_cs_procedure_Sg__set(arg1,arg2,(cs::procedure const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1procedure_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cs::procedure > *arg1 = (std::vector< cs::procedure > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cs::procedure > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1procedure_1vector_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::vector< cs::procedure > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< std::vector< cs::procedure > > *)new std::vector< std::vector< cs::procedure > >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< std::vector< cs::procedure > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1procedure_1vector_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::vector< cs::procedure > >::size_type arg1 ;
  std::vector< std::vector< cs::procedure > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::vector< cs::procedure > >::size_type)jarg1; 
  {
    try {
      result = (std::vector< std::vector< cs::procedure > > *)new std::vector< std::vector< cs::procedure > >(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< std::vector< cs::procedure > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1vector_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< cs::procedure > > *arg1 = (std::vector< std::vector< cs::procedure > > *) 0 ;
  std::vector< std::vector< cs::procedure > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< cs::procedure > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::vector< cs::procedure > > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1vector_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< cs::procedure > > *arg1 = (std::vector< std::vector< cs::procedure > > *) 0 ;
  std::vector< std::vector< cs::procedure > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< cs::procedure > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::vector< cs::procedure > > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_procedure_1vector_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::vector< cs::procedure > > *arg1 = (std::vector< std::vector< cs::procedure > > *) 0 ;
  std::vector< std::vector< cs::procedure > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< cs::procedure > > **)&jarg1; 
  arg2 = (std::vector< std::vector< cs::procedure > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_procedure_1vector_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::vector< cs::procedure > > *arg1 = (std::vector< std::vector< cs::procedure > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< cs::procedure > > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< std::vector< cs::procedure > > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_procedure_1vector_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::vector< cs::procedure > > *arg1 = (std::vector< std::vector< cs::procedure > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< cs::procedure > > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_procedure_1vector_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::vector< cs::procedure > > *arg1 = (std::vector< std::vector< cs::procedure > > *) 0 ;
  std::vector< std::vector< cs::procedure > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::vector< cs::procedure > > **)&jarg1; 
  arg2 = *(std::vector< std::vector< cs::procedure > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< cs::procedure > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< std::vector< cs::procedure > >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1vector_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::vector< cs::procedure > > *arg1 = (std::vector< std::vector< cs::procedure > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< cs::procedure > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< cs::procedure > > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::vector< cs::procedure > >::value_type *) &std_vector_Sl_std_vector_Sl_cs_procedure_Sg__Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< std::vector< cs::procedure > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_procedure_1vector_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::vector< cs::procedure > > *arg1 = (std::vector< std::vector< cs::procedure > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< cs::procedure > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::vector< cs::procedure > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::vector< cs::procedure > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< cs::procedure > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_cs_procedure_Sg__Sg__set(arg1,arg2,(std::vector< cs::procedure > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1procedure_1vector_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::vector< cs::procedure > > *arg1 = (std::vector< std::vector< cs::procedure > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::vector< cs::procedure > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1compunit_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cs::compunit > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< cs::compunit > *)new std::vector< cs::compunit >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::compunit > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::compunit > *arg1 = (std::vector< cs::compunit > *) 0 ;
  std::vector< cs::compunit >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::compunit > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::compunit > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::compunit > *arg1 = (std::vector< cs::compunit > *) 0 ;
  std::vector< cs::compunit >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::compunit > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::compunit > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_compunit_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cs::compunit > *arg1 = (std::vector< cs::compunit > *) 0 ;
  std::vector< cs::compunit >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::compunit > **)&jarg1; 
  arg2 = (std::vector< cs::compunit >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_compunit_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cs::compunit > *arg1 = (std::vector< cs::compunit > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::compunit > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< cs::compunit > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_compunit_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cs::compunit > *arg1 = (std::vector< cs::compunit > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::compunit > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_compunit_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cs::compunit > *arg1 = (std::vector< cs::compunit > *) 0 ;
  std::vector< cs::compunit >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cs::compunit > **)&jarg1; 
  arg2 = *(std::vector< cs::compunit >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::compunit >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< cs::compunit >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cs::compunit > *arg1 = (std::vector< cs::compunit > *) 0 ;
  int arg2 ;
  std::vector< cs::compunit >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::compunit > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< cs::compunit >::value_type *) &std_vector_Sl_cs_compunit_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::compunit >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_compunit_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cs::compunit > *arg1 = (std::vector< cs::compunit > *) 0 ;
  int arg2 ;
  std::vector< cs::compunit >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cs::compunit > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< cs::compunit >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::compunit >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_cs_compunit_Sg__set(arg1,arg2,(cs::compunit const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1compunit_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cs::compunit > *arg1 = (std::vector< cs::compunit > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cs::compunit > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1point_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cs::point > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< cs::point > *)new std::vector< cs::point >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::point > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::point > *arg1 = (std::vector< cs::point > *) 0 ;
  std::vector< cs::point >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::point > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::point > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::point > *arg1 = (std::vector< cs::point > *) 0 ;
  std::vector< cs::point >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::point > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::point > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_point_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cs::point > *arg1 = (std::vector< cs::point > *) 0 ;
  std::vector< cs::point >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::point > **)&jarg1; 
  arg2 = (std::vector< cs::point >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_point_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cs::point > *arg1 = (std::vector< cs::point > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::point > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< cs::point > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_point_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cs::point > *arg1 = (std::vector< cs::point > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::point > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_point_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cs::point > *arg1 = (std::vector< cs::point > *) 0 ;
  std::vector< cs::point >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cs::point > **)&jarg1; 
  arg2 = *(std::vector< cs::point >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::point >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< cs::point >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cs::point > *arg1 = (std::vector< cs::point > *) 0 ;
  int arg2 ;
  std::vector< cs::point >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::point > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< cs::point >::value_type *) &std_vector_Sl_cs_point_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::point >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_point_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cs::point > *arg1 = (std::vector< cs::point > *) 0 ;
  int arg2 ;
  std::vector< cs::point >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cs::point > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< cs::point >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::point >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_cs_point_Sg__set(arg1,arg2,(cs::point const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1point_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cs::point > *arg1 = (std::vector< cs::point > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cs::point > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1point_1set_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::set_iterator_policy< cs::point > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::point > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::point > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_point_1set_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::point > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::point > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::point > > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::set_iterator_policy< cs::point > > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::point > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::point > > *) 0 ;
  SwigValueWrapper< cs::point > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::point > > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::set_iterator_policy< cs::point > > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::set_iterator_policy< cs::point >::key **)&jresult = new cs::set_iterator_policy< cs::point >::key((const cs::set_iterator_policy< cs::point >::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_point_1set_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::point > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::point > > *) 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::point > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::point > > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::point > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::set_iterator_policy< cs::point > > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::set_iterator_policy< cs::point > > const *)arg1)->operator ==((cs::iterator_adapter< cs::set_iterator_policy< cs::point > > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_point_1set_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::set_iterator_policy< cs::point > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::point > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::point > > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_point_1set_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::point > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::point > > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::point > > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::set_iterator_policy< cs::point > > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_point_1set_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::point > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::point > > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::point > > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::set_iterator_policy< cs::point > > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1procedure_1and_1points_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::procedure > arg1 ;
  cs::mutable_set< cs::point > arg2 ;
  cs::procedure *argp1 ;
  cs::mutable_set< cs::point > *argp2 ;
  std::pair< cs::procedure,cs::mutable_set< cs::point > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(cs::procedure **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::procedure");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(cs::mutable_set< cs::point > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::mutable_set< cs::point >");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (std::pair< cs::procedure,cs::mutable_set< cs::point > > *)new std::pair< cs::procedure,cs::mutable_set< cs::point > >(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::procedure,cs::mutable_set< cs::point > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1procedure_1and_1points_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::procedure,cs::mutable_set< cs::point > > *arg1 = 0 ;
  std::pair< cs::procedure,cs::mutable_set< cs::point > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::procedure,cs::mutable_set< cs::point > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< cs::procedure,cs::mutable_set< cs::point > > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< cs::procedure,cs::mutable_set< cs::point > > *)new std::pair< cs::procedure,cs::mutable_set< cs::point > >((std::pair< cs::procedure,cs::mutable_set< cs::point > > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::procedure,cs::mutable_set< cs::point > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1and_1points_1get_1first(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::procedure,cs::mutable_set< cs::point > > *arg1 = (std::pair< cs::procedure,cs::mutable_set< cs::point > > *) 0 ;
  cs::procedure *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::procedure,cs::mutable_set< cs::point > > **)&jarg1; 
  {
    try {
      result = (cs::procedure *) &std_pair_Sl_cs_procedure_Sc_cs_mutable_set_Sl_cs_point_Sg__Sg__get_first(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::procedure **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1and_1points_1get_1second(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::procedure,cs::mutable_set< cs::point > > *arg1 = (std::pair< cs::procedure,cs::mutable_set< cs::point > > *) 0 ;
  cs::mutable_set< cs::point > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::procedure,cs::mutable_set< cs::point > > **)&jarg1; 
  {
    try {
      result = (cs::mutable_set< cs::point > *) &std_pair_Sl_cs_procedure_Sc_cs_mutable_set_Sl_cs_point_Sg__Sg__get_second(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::point > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1procedure_1and_1points(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< cs::procedure,cs::mutable_set< cs::point > > *arg1 = (std::pair< cs::procedure,cs::mutable_set< cs::point > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< cs::procedure,cs::mutable_set< cs::point > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1procedure_1and_1points_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cs::procedure_and_points > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< cs::procedure_and_points > *)new std::vector< cs::procedure_and_points >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::procedure_and_points > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1and_1points_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::procedure_and_points > *arg1 = (std::vector< cs::procedure_and_points > *) 0 ;
  std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::procedure_and_points > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::procedure_and_points > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1and_1points_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::procedure_and_points > *arg1 = (std::vector< cs::procedure_and_points > *) 0 ;
  std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::procedure_and_points > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::procedure_and_points > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_procedure_1and_1points_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cs::procedure_and_points > *arg1 = (std::vector< cs::procedure_and_points > *) 0 ;
  std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::procedure_and_points > **)&jarg1; 
  arg2 = (std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_procedure_1and_1points_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cs::procedure_and_points > *arg1 = (std::vector< cs::procedure_and_points > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::procedure_and_points > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< cs::procedure_and_points > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_procedure_1and_1points_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cs::procedure_and_points > *arg1 = (std::vector< cs::procedure_and_points > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::procedure_and_points > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_procedure_1and_1points_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cs::procedure_and_points > *arg1 = (std::vector< cs::procedure_and_points > *) 0 ;
  std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cs::procedure_and_points > **)&jarg1; 
  arg2 = *(std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1and_1points_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cs::procedure_and_points > *arg1 = (std::vector< cs::procedure_and_points > *) 0 ;
  int arg2 ;
  std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::procedure_and_points > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > >::value_type *) &std_vector_Sl_cs_procedure_and_points_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_procedure_1and_1points_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cs::procedure_and_points > *arg1 = (std::vector< cs::procedure_and_points > *) 0 ;
  int arg2 ;
  std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cs::procedure_and_points > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_cs_procedure_and_points_Sg__set(arg1,arg2,(std::pair< cs::procedure,cs::mutable_set< cs::point > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1procedure_1and_1points_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cs::procedure_and_points > *arg1 = (std::vector< cs::procedure_and_points > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cs::procedure_and_points > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1compunit_1points_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::compunit > arg1 ;
  SwigValueWrapper< std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > > > arg2 ;
  cs::compunit *argp1 ;
  std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > > *argp2 ;
  std::pair< cs::compunit,cs::procedure_and_points_vector > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(cs::compunit **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::compunit");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > >");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (std::pair< cs::compunit,cs::procedure_and_points_vector > *)new std::pair< cs::compunit,cs::procedure_and_points_vector >(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::compunit,cs::procedure_and_points_vector > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1compunit_1points_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::compunit,cs::procedure_and_points_vector > *arg1 = 0 ;
  std::pair< cs::compunit,cs::procedure_and_points_vector > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::compunit,cs::procedure_and_points_vector > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< cs::compunit,cs::procedure_and_points_vector > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< cs::compunit,cs::procedure_and_points_vector > *)new std::pair< cs::compunit,cs::procedure_and_points_vector >((std::pair< cs::compunit,cs::procedure_and_points_vector > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::compunit,cs::procedure_and_points_vector > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1points_1get_1first(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::compunit,cs::procedure_and_points_vector > *arg1 = (std::pair< cs::compunit,cs::procedure_and_points_vector > *) 0 ;
  cs::compunit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::compunit,cs::procedure_and_points_vector > **)&jarg1; 
  {
    try {
      result = (cs::compunit *) &std_pair_Sl_cs_compunit_Sc_cs_procedure_and_points_vector_Sg__get_first(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::compunit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1points_1get_1second(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::compunit,cs::procedure_and_points_vector > *arg1 = (std::pair< cs::compunit,cs::procedure_and_points_vector > *) 0 ;
  std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::compunit,cs::procedure_and_points_vector > **)&jarg1; 
  {
    try {
      result = (std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > > *) &std_pair_Sl_cs_compunit_Sc_cs_procedure_and_points_vector_Sg__get_second(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1compunit_1points(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< cs::compunit,cs::procedure_and_points_vector > *arg1 = (std::pair< cs::compunit,cs::procedure_and_points_vector > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< cs::compunit,cs::procedure_and_points_vector > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1compunit_1points_1pair_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::compunit > arg1 ;
  cs::mutable_set< cs::point > arg2 ;
  cs::compunit *argp1 ;
  cs::mutable_set< cs::point > *argp2 ;
  std::pair< cs::compunit,cs::point_set > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(cs::compunit **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::compunit");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(cs::mutable_set< cs::point > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::mutable_set< cs::point >");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (std::pair< cs::compunit,cs::point_set > *)new std::pair< cs::compunit,cs::point_set >(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::compunit,cs::point_set > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1compunit_1points_1pair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::compunit,cs::point_set > *arg1 = 0 ;
  std::pair< cs::compunit,cs::point_set > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::compunit,cs::point_set > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< cs::compunit,cs::point_set > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< cs::compunit,cs::point_set > *)new std::pair< cs::compunit,cs::point_set >((std::pair< cs::compunit,cs::point_set > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::compunit,cs::point_set > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1points_1pair_1get_1first(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::compunit,cs::point_set > *arg1 = (std::pair< cs::compunit,cs::point_set > *) 0 ;
  cs::compunit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::compunit,cs::point_set > **)&jarg1; 
  {
    try {
      result = (cs::compunit *) &std_pair_Sl_cs_compunit_Sc_cs_point_set_Sg__get_first(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::compunit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1points_1pair_1get_1second(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::compunit,cs::point_set > *arg1 = (std::pair< cs::compunit,cs::point_set > *) 0 ;
  cs::mutable_set< cs::point > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::compunit,cs::point_set > **)&jarg1; 
  {
    try {
      result = (cs::mutable_set< cs::point > *) &std_pair_Sl_cs_compunit_Sc_cs_point_set_Sg__get_second(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::point > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1compunit_1points_1pair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< cs::compunit,cs::point_set > *arg1 = (std::pair< cs::compunit,cs::point_set > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< cs::compunit,cs::point_set > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1compunit_1points_1pair_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cs::compunit_points_pair > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< cs::compunit_points_pair > *)new std::vector< cs::compunit_points_pair >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::compunit_points_pair > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1points_1pair_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::compunit_points_pair > *arg1 = (std::vector< cs::compunit_points_pair > *) 0 ;
  std::vector< std::pair< cs::compunit,cs::mutable_set< cs::point > > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::compunit_points_pair > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::compunit_points_pair > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1points_1pair_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::compunit_points_pair > *arg1 = (std::vector< cs::compunit_points_pair > *) 0 ;
  std::vector< std::pair< cs::compunit,cs::mutable_set< cs::point > > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::compunit_points_pair > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::compunit_points_pair > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_compunit_1points_1pair_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cs::compunit_points_pair > *arg1 = (std::vector< cs::compunit_points_pair > *) 0 ;
  std::vector< std::pair< cs::compunit,cs::mutable_set< cs::point > > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::compunit_points_pair > **)&jarg1; 
  arg2 = (std::vector< std::pair< cs::compunit,cs::mutable_set< cs::point > > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_compunit_1points_1pair_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cs::compunit_points_pair > *arg1 = (std::vector< cs::compunit_points_pair > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::compunit_points_pair > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< cs::compunit_points_pair > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_compunit_1points_1pair_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cs::compunit_points_pair > *arg1 = (std::vector< cs::compunit_points_pair > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::compunit_points_pair > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_compunit_1points_1pair_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cs::compunit_points_pair > *arg1 = (std::vector< cs::compunit_points_pair > *) 0 ;
  std::vector< std::pair< cs::compunit,cs::mutable_set< cs::point > > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cs::compunit_points_pair > **)&jarg1; 
  arg2 = *(std::vector< std::pair< cs::compunit,cs::mutable_set< cs::point > > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< cs::compunit,cs::mutable_set< cs::point > > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< std::pair< cs::compunit,cs::mutable_set< cs::point > > >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1points_1pair_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cs::compunit_points_pair > *arg1 = (std::vector< cs::compunit_points_pair > *) 0 ;
  int arg2 ;
  std::vector< std::pair< cs::compunit,cs::point_set > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::compunit_points_pair > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::pair< cs::compunit,cs::point_set > >::value_type *) &std_vector_Sl_cs_compunit_points_pair_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< std::pair< cs::compunit,cs::point_set > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_compunit_1points_1pair_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cs::compunit_points_pair > *arg1 = (std::vector< cs::compunit_points_pair > *) 0 ;
  int arg2 ;
  std::vector< std::pair< cs::compunit,cs::mutable_set< cs::point > > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cs::compunit_points_pair > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::pair< cs::compunit,cs::mutable_set< cs::point > > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< cs::compunit,cs::mutable_set< cs::point > > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_cs_compunit_points_pair_Sg__set(arg1,arg2,(std::pair< cs::compunit,cs::mutable_set< cs::point > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1compunit_1points_1pair_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cs::compunit_points_pair > *arg1 = (std::vector< cs::compunit_points_pair > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cs::compunit_points_pair > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1compunit_1points_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cs::compunit_points > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< cs::compunit_points > *)new std::vector< cs::compunit_points >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::compunit_points > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1points_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::compunit_points > *arg1 = (std::vector< cs::compunit_points > *) 0 ;
  std::vector< std::pair< cs::compunit,std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > > > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::compunit_points > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::compunit_points > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1points_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::compunit_points > *arg1 = (std::vector< cs::compunit_points > *) 0 ;
  std::vector< std::pair< cs::compunit,std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > > > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::compunit_points > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::compunit_points > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_compunit_1points_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cs::compunit_points > *arg1 = (std::vector< cs::compunit_points > *) 0 ;
  std::vector< std::pair< cs::compunit,std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > > > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::compunit_points > **)&jarg1; 
  arg2 = (std::vector< std::pair< cs::compunit,std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > > > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_compunit_1points_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cs::compunit_points > *arg1 = (std::vector< cs::compunit_points > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::compunit_points > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< cs::compunit_points > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_compunit_1points_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cs::compunit_points > *arg1 = (std::vector< cs::compunit_points > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::compunit_points > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_compunit_1points_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cs::compunit_points > *arg1 = (std::vector< cs::compunit_points > *) 0 ;
  std::vector< std::pair< cs::compunit,std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > > > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cs::compunit_points > **)&jarg1; 
  arg2 = *(std::vector< std::pair< cs::compunit,std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > > > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< cs::compunit,std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > > > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< std::pair< cs::compunit,std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > > > >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1points_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cs::compunit_points > *arg1 = (std::vector< cs::compunit_points > *) 0 ;
  int arg2 ;
  std::vector< std::pair< cs::compunit,cs::procedure_and_points_vector > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::compunit_points > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::pair< cs::compunit,cs::procedure_and_points_vector > >::value_type *) &std_vector_Sl_cs_compunit_points_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< std::pair< cs::compunit,cs::procedure_and_points_vector > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_compunit_1points_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cs::compunit_points > *arg1 = (std::vector< cs::compunit_points > *) 0 ;
  int arg2 ;
  std::vector< std::pair< cs::compunit,std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > > > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cs::compunit_points > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::pair< cs::compunit,std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > > > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< cs::compunit,std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > > > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_cs_compunit_points_Sg__set(arg1,arg2,(std::pair< cs::compunit,std::vector< std::pair< cs::procedure,cs::mutable_set< cs::point > > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1compunit_1points_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cs::compunit_points > *arg1 = (std::vector< cs::compunit_points > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cs::compunit_points > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1xr_1definition_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::xr_definition_iterator_policy > *arg1 = (cs::iterator_adapter< cs::xr_definition_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::xr_definition_iterator_policy > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_xr_1definition_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::xr_definition_iterator_policy > *arg1 = (cs::iterator_adapter< cs::xr_definition_iterator_policy > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::xr_definition_iterator_policy > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::xr_definition_iterator_policy > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1definition_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::xr_definition_iterator_policy > *arg1 = (cs::iterator_adapter< cs::xr_definition_iterator_policy > *) 0 ;
  SwigValueWrapper< cs::xr_tuple > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::xr_definition_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::xr_definition_iterator_policy > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_definition_iterator_policy::key **)&jresult = new cs::xr_definition_iterator_policy::key((const cs::xr_definition_iterator_policy::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_xr_1definition_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::xr_definition_iterator_policy > *arg1 = (cs::iterator_adapter< cs::xr_definition_iterator_policy > *) 0 ;
  cs::iterator_adapter< cs::xr_definition_iterator_policy > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::xr_definition_iterator_policy > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::xr_definition_iterator_policy > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::xr_definition_iterator_policy > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::xr_definition_iterator_policy > const *)arg1)->operator ==((cs::iterator_adapter< cs::xr_definition_iterator_policy > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1definition_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::xr_definition_iterator_policy > *arg1 = (cs::iterator_adapter< cs::xr_definition_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::xr_definition_iterator_policy > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1definition_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::xr_definition_iterator_policy > *arg1 = (cs::iterator_adapter< cs::xr_definition_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::xr_definition_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::xr_definition_iterator_policy > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1definition_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::xr_definition_iterator_policy > *arg1 = (cs::iterator_adapter< cs::xr_definition_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::xr_definition_iterator_policy > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::xr_definition_iterator_policy > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1xr_1occurrence_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::xr_occurrence_iterator_policy > *arg1 = (cs::iterator_adapter< cs::xr_occurrence_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::xr_occurrence_iterator_policy > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_xr_1occurrence_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::xr_occurrence_iterator_policy > *arg1 = (cs::iterator_adapter< cs::xr_occurrence_iterator_policy > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::xr_occurrence_iterator_policy > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::xr_occurrence_iterator_policy > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1occurrence_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::xr_occurrence_iterator_policy > *arg1 = (cs::iterator_adapter< cs::xr_occurrence_iterator_policy > *) 0 ;
  SwigValueWrapper< cs::xr_tuple > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::xr_occurrence_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::xr_occurrence_iterator_policy > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_occurrence_iterator_policy::key **)&jresult = new cs::xr_occurrence_iterator_policy::key((const cs::xr_occurrence_iterator_policy::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_xr_1occurrence_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::xr_occurrence_iterator_policy > *arg1 = (cs::iterator_adapter< cs::xr_occurrence_iterator_policy > *) 0 ;
  cs::iterator_adapter< cs::xr_occurrence_iterator_policy > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::xr_occurrence_iterator_policy > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::xr_occurrence_iterator_policy > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::xr_occurrence_iterator_policy > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::xr_occurrence_iterator_policy > const *)arg1)->operator ==((cs::iterator_adapter< cs::xr_occurrence_iterator_policy > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1occurrence_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::xr_occurrence_iterator_policy > *arg1 = (cs::iterator_adapter< cs::xr_occurrence_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::xr_occurrence_iterator_policy > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1occurrence_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::xr_occurrence_iterator_policy > *arg1 = (cs::iterator_adapter< cs::xr_occurrence_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::xr_occurrence_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::xr_occurrence_iterator_policy > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1occurrence_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::xr_occurrence_iterator_policy > *arg1 = (cs::iterator_adapter< cs::xr_occurrence_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::xr_occurrence_iterator_policy > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::xr_occurrence_iterator_policy > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1xr_1intra_1definition_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::xr_intra_definition_iterator_policy > *arg1 = (cs::iterator_adapter< cs::xr_intra_definition_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::xr_intra_definition_iterator_policy > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_xr_1intra_1definition_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::xr_intra_definition_iterator_policy > *arg1 = (cs::iterator_adapter< cs::xr_intra_definition_iterator_policy > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::xr_intra_definition_iterator_policy > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::xr_intra_definition_iterator_policy > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1intra_1definition_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::xr_intra_definition_iterator_policy > *arg1 = (cs::iterator_adapter< cs::xr_intra_definition_iterator_policy > *) 0 ;
  SwigValueWrapper< cs::xr_tuple > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::xr_intra_definition_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::xr_intra_definition_iterator_policy > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_intra_definition_iterator_policy::key **)&jresult = new cs::xr_intra_definition_iterator_policy::key((const cs::xr_intra_definition_iterator_policy::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_xr_1intra_1definition_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::xr_intra_definition_iterator_policy > *arg1 = (cs::iterator_adapter< cs::xr_intra_definition_iterator_policy > *) 0 ;
  cs::iterator_adapter< cs::xr_intra_definition_iterator_policy > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::xr_intra_definition_iterator_policy > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::xr_intra_definition_iterator_policy > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::xr_intra_definition_iterator_policy > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::xr_intra_definition_iterator_policy > const *)arg1)->operator ==((cs::iterator_adapter< cs::xr_intra_definition_iterator_policy > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1intra_1definition_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::xr_intra_definition_iterator_policy > *arg1 = (cs::iterator_adapter< cs::xr_intra_definition_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::xr_intra_definition_iterator_policy > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1intra_1definition_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::xr_intra_definition_iterator_policy > *arg1 = (cs::iterator_adapter< cs::xr_intra_definition_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::xr_intra_definition_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::xr_intra_definition_iterator_policy > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1intra_1definition_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::xr_intra_definition_iterator_policy > *arg1 = (cs::iterator_adapter< cs::xr_intra_definition_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::xr_intra_definition_iterator_policy > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::xr_intra_definition_iterator_policy > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1xr_1query_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::xr_query_iterator_policy > *arg1 = (cs::iterator_adapter< cs::xr_query_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::xr_query_iterator_policy > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_xr_1query_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::xr_query_iterator_policy > *arg1 = (cs::iterator_adapter< cs::xr_query_iterator_policy > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::xr_query_iterator_policy > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::xr_query_iterator_policy > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1query_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::xr_query_iterator_policy > *arg1 = (cs::iterator_adapter< cs::xr_query_iterator_policy > *) 0 ;
  SwigValueWrapper< cs::xr_tuple > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::xr_query_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::xr_query_iterator_policy > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_query_iterator_policy::key **)&jresult = new cs::xr_query_iterator_policy::key((const cs::xr_query_iterator_policy::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_xr_1query_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::xr_query_iterator_policy > *arg1 = (cs::iterator_adapter< cs::xr_query_iterator_policy > *) 0 ;
  cs::iterator_adapter< cs::xr_query_iterator_policy > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::xr_query_iterator_policy > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::xr_query_iterator_policy > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::xr_query_iterator_policy > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::xr_query_iterator_policy > const *)arg1)->operator ==((cs::iterator_adapter< cs::xr_query_iterator_policy > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1query_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::xr_query_iterator_policy > *arg1 = (cs::iterator_adapter< cs::xr_query_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::xr_query_iterator_policy > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1query_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::xr_query_iterator_policy > *arg1 = (cs::iterator_adapter< cs::xr_query_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::xr_query_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::xr_query_iterator_policy > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1query_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::xr_query_iterator_policy > *arg1 = (cs::iterator_adapter< cs::xr_query_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::xr_query_iterator_policy > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::xr_query_iterator_policy > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1xr_1kind_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cs::xr_kind > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< cs::xr_kind > *)new std::vector< cs::xr_kind >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::xr_kind > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::xr_kind > *arg1 = (std::vector< cs::xr_kind > *) 0 ;
  std::vector< cs::xr_kind >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::xr_kind > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::xr_kind > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::xr_kind > *arg1 = (std::vector< cs::xr_kind > *) 0 ;
  std::vector< cs::xr_kind >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::xr_kind > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::xr_kind > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cs::xr_kind > *arg1 = (std::vector< cs::xr_kind > *) 0 ;
  std::vector< cs::xr_kind >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::xr_kind > **)&jarg1; 
  arg2 = (std::vector< cs::xr_kind >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cs::xr_kind > *arg1 = (std::vector< cs::xr_kind > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::xr_kind > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< cs::xr_kind > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cs::xr_kind > *arg1 = (std::vector< cs::xr_kind > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::xr_kind > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cs::xr_kind > *arg1 = (std::vector< cs::xr_kind > *) 0 ;
  std::vector< cs::xr_kind >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cs::xr_kind > **)&jarg1; 
  arg2 = *(std::vector< cs::xr_kind >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::xr_kind >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< cs::xr_kind >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cs::xr_kind > *arg1 = (std::vector< cs::xr_kind > *) 0 ;
  int arg2 ;
  std::vector< cs::xr_kind >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::xr_kind > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< cs::xr_kind >::value_type *) &std_vector_Sl_cs_xr_kind_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::xr_kind >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cs::xr_kind > *arg1 = (std::vector< cs::xr_kind > *) 0 ;
  int arg2 ;
  std::vector< cs::xr_kind >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cs::xr_kind > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< cs::xr_kind >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::xr_kind >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_cs_xr_kind_Sg__set(arg1,arg2,(cs::xr_kind const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1xr_1kind_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cs::xr_kind > *arg1 = (std::vector< cs::xr_kind > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cs::xr_kind > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1xr_1role_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cs::xr_role > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< cs::xr_role > *)new std::vector< cs::xr_role >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::xr_role > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::xr_role > *arg1 = (std::vector< cs::xr_role > *) 0 ;
  std::vector< cs::xr_role >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::xr_role > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::xr_role > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::xr_role > *arg1 = (std::vector< cs::xr_role > *) 0 ;
  std::vector< cs::xr_role >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::xr_role > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::xr_role > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cs::xr_role > *arg1 = (std::vector< cs::xr_role > *) 0 ;
  std::vector< cs::xr_role >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::xr_role > **)&jarg1; 
  arg2 = (std::vector< cs::xr_role >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cs::xr_role > *arg1 = (std::vector< cs::xr_role > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::xr_role > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< cs::xr_role > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cs::xr_role > *arg1 = (std::vector< cs::xr_role > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::xr_role > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cs::xr_role > *arg1 = (std::vector< cs::xr_role > *) 0 ;
  std::vector< cs::xr_role >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cs::xr_role > **)&jarg1; 
  arg2 = *(std::vector< cs::xr_role >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::xr_role >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< cs::xr_role >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cs::xr_role > *arg1 = (std::vector< cs::xr_role > *) 0 ;
  int arg2 ;
  std::vector< cs::xr_role >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::xr_role > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< cs::xr_role >::value_type *) &std_vector_Sl_cs_xr_role_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::xr_role >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cs::xr_role > *arg1 = (std::vector< cs::xr_role > *) 0 ;
  int arg2 ;
  std::vector< cs::xr_role >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cs::xr_role > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< cs::xr_role >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::xr_role >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_cs_xr_role_Sg__set(arg1,arg2,(cs::xr_role const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1xr_1role_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cs::xr_role > *arg1 = (std::vector< cs::xr_role > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cs::xr_role > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1xr_1kind_1role_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cs::xr_kind_role > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< cs::xr_kind_role > *)new std::vector< cs::xr_kind_role >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::xr_kind_role > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::xr_kind_role > *arg1 = (std::vector< cs::xr_kind_role > *) 0 ;
  std::vector< cs::xr_kind_role >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::xr_kind_role > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::xr_kind_role > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::xr_kind_role > *arg1 = (std::vector< cs::xr_kind_role > *) 0 ;
  std::vector< cs::xr_kind_role >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::xr_kind_role > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::xr_kind_role > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cs::xr_kind_role > *arg1 = (std::vector< cs::xr_kind_role > *) 0 ;
  std::vector< cs::xr_kind_role >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::xr_kind_role > **)&jarg1; 
  arg2 = (std::vector< cs::xr_kind_role >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cs::xr_kind_role > *arg1 = (std::vector< cs::xr_kind_role > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::xr_kind_role > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< cs::xr_kind_role > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cs::xr_kind_role > *arg1 = (std::vector< cs::xr_kind_role > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::xr_kind_role > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cs::xr_kind_role > *arg1 = (std::vector< cs::xr_kind_role > *) 0 ;
  std::vector< cs::xr_kind_role >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cs::xr_kind_role > **)&jarg1; 
  arg2 = *(std::vector< cs::xr_kind_role >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::xr_kind_role >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< cs::xr_kind_role >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cs::xr_kind_role > *arg1 = (std::vector< cs::xr_kind_role > *) 0 ;
  int arg2 ;
  std::vector< cs::xr_kind_role >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::xr_kind_role > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< cs::xr_kind_role >::value_type *) &std_vector_Sl_cs_xr_kind_role_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::xr_kind_role >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cs::xr_kind_role > *arg1 = (std::vector< cs::xr_kind_role > *) 0 ;
  int arg2 ;
  std::vector< cs::xr_kind_role >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cs::xr_kind_role > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< cs::xr_kind_role >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::xr_kind_role >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_cs_xr_kind_role_Sg__set(arg1,arg2,(cs::xr_kind_role const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1xr_1kind_1role_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cs::xr_kind_role > *arg1 = (std::vector< cs::xr_kind_role > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cs::xr_kind_role > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1xr_1kind_1role_1pair_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::xr_kind > arg1 ;
  SwigValueWrapper< cs::xr_role > arg2 ;
  cs::xr_kind *argp1 ;
  cs::xr_role *argp2 ;
  std::pair< cs::xr_kind,cs::xr_role > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(cs::xr_kind **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::xr_kind");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(cs::xr_role **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::xr_role");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (std::pair< cs::xr_kind,cs::xr_role > *)new std::pair< cs::xr_kind,cs::xr_role >(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::xr_kind,cs::xr_role > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1xr_1kind_1role_1pair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::xr_kind,cs::xr_role > *arg1 = 0 ;
  std::pair< cs::xr_kind,cs::xr_role > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::xr_kind,cs::xr_role > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< cs::xr_kind,cs::xr_role > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< cs::xr_kind,cs::xr_role > *)new std::pair< cs::xr_kind,cs::xr_role >((std::pair< cs::xr_kind,cs::xr_role > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::xr_kind,cs::xr_role > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1pair_1get_1first(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::xr_kind,cs::xr_role > *arg1 = (std::pair< cs::xr_kind,cs::xr_role > *) 0 ;
  cs::xr_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::xr_kind,cs::xr_role > **)&jarg1; 
  {
    try {
      result = (cs::xr_kind *) &std_pair_Sl_cs_xr_kind_Sc_cs_xr_role_Sg__get_first(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1pair_1get_1second(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::xr_kind,cs::xr_role > *arg1 = (std::pair< cs::xr_kind,cs::xr_role > *) 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::xr_kind,cs::xr_role > **)&jarg1; 
  {
    try {
      result = (cs::xr_role *) &std_pair_Sl_cs_xr_kind_Sc_cs_xr_role_Sg__get_second(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1xr_1kind_1role_1pair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< cs::xr_kind,cs::xr_role > *arg1 = (std::pair< cs::xr_kind,cs::xr_role > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< cs::xr_kind,cs::xr_role > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1language_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cs::language > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< cs::language > *)new std::vector< cs::language >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::language > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_language_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::language > *arg1 = (std::vector< cs::language > *) 0 ;
  std::vector< cs::language >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::language > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::language > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_language_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::language > *arg1 = (std::vector< cs::language > *) 0 ;
  std::vector< cs::language >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::language > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::language > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_language_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cs::language > *arg1 = (std::vector< cs::language > *) 0 ;
  std::vector< cs::language >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::language > **)&jarg1; 
  arg2 = (std::vector< cs::language >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_language_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cs::language > *arg1 = (std::vector< cs::language > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::language > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< cs::language > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_language_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cs::language > *arg1 = (std::vector< cs::language > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::language > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_language_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cs::language > *arg1 = (std::vector< cs::language > *) 0 ;
  std::vector< cs::language >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cs::language > **)&jarg1; 
  arg2 = *(std::vector< cs::language >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::language >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< cs::language >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_language_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cs::language > *arg1 = (std::vector< cs::language > *) 0 ;
  int arg2 ;
  std::vector< cs::language >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::language > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< cs::language >::value_type *) &std_vector_Sl_cs_language_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::language >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_language_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cs::language > *arg1 = (std::vector< cs::language > *) 0 ;
  int arg2 ;
  std::vector< cs::language >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cs::language > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< cs::language >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::language >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_cs_language_Sg__set(arg1,arg2,(cs::language const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1language_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cs::language > *arg1 = (std::vector< cs::language > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cs::language > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1exceptional_1return_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::point > arg1 ;
  std::string arg2 ;
  cs::point *argp1 ;
  std::pair< cs::point,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(cs::point **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::point");
    return 0;
  }
  arg1 = *argp1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (std::pair< cs::point,std::string > *)new std::pair< cs::point,std::string >(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::point,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1exceptional_1return_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::point,std::string > *arg1 = 0 ;
  std::pair< cs::point,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::point,std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< cs::point,std::string > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< cs::point,std::string > *)new std::pair< cs::point,std::string >((std::pair< cs::point,std::string > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::point,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_exceptional_1return_1get_1first(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::point,std::string > *arg1 = (std::pair< cs::point,std::string > *) 0 ;
  cs::point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::point,std::string > **)&jarg1; 
  {
    try {
      result = (cs::point *) &std_pair_Sl_cs_point_Sc_std_string_Sg__get_first(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_exceptional_1return_1get_1second(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::pair< cs::point,std::string > *arg1 = (std::pair< cs::point,std::string > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::point,std::string > **)&jarg1; 
  {
    try {
      result = (std::string *) &std_pair_Sl_cs_point_Sc_std_string_Sg__get_second(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1exceptional_1return(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< cs::point,std::string > *arg1 = (std::pair< cs::point,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< cs::point,std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1exceptional_1return_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cs::exceptional_return > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< cs::exceptional_return > *)new std::vector< cs::exceptional_return >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::exceptional_return > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_exceptional_1return_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::exceptional_return > *arg1 = (std::vector< cs::exceptional_return > *) 0 ;
  std::vector< std::pair< cs::point,std::string > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::exceptional_return > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::exceptional_return > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_exceptional_1return_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::exceptional_return > *arg1 = (std::vector< cs::exceptional_return > *) 0 ;
  std::vector< std::pair< cs::point,std::string > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::exceptional_return > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::exceptional_return > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_exceptional_1return_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cs::exceptional_return > *arg1 = (std::vector< cs::exceptional_return > *) 0 ;
  std::vector< std::pair< cs::point,std::string > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::exceptional_return > **)&jarg1; 
  arg2 = (std::vector< std::pair< cs::point,std::string > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_exceptional_1return_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cs::exceptional_return > *arg1 = (std::vector< cs::exceptional_return > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::exceptional_return > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< cs::exceptional_return > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_exceptional_1return_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cs::exceptional_return > *arg1 = (std::vector< cs::exceptional_return > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::exceptional_return > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_exceptional_1return_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cs::exceptional_return > *arg1 = (std::vector< cs::exceptional_return > *) 0 ;
  std::vector< std::pair< cs::point,std::string > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cs::exceptional_return > **)&jarg1; 
  arg2 = *(std::vector< std::pair< cs::point,std::string > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< cs::point,std::string > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< std::pair< cs::point,std::string > >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_exceptional_1return_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cs::exceptional_return > *arg1 = (std::vector< cs::exceptional_return > *) 0 ;
  int arg2 ;
  std::vector< std::pair< cs::point,std::string > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::exceptional_return > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::pair< cs::point,std::string > >::value_type *) &std_vector_Sl_cs_exceptional_return_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< std::pair< cs::point,std::string > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_exceptional_1return_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cs::exceptional_return > *arg1 = (std::vector< cs::exceptional_return > *) 0 ;
  int arg2 ;
  std::vector< std::pair< cs::point,std::string > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cs::exceptional_return > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::pair< cs::point,std::string > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< cs::point,std::string > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_cs_exceptional_return_Sg__set(arg1,arg2,(std::pair< cs::point,std::string > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1exceptional_1return_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cs::exceptional_return > *arg1 = (std::vector< cs::exceptional_return > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cs::exceptional_return > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1int_1pair_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cs::int_pair > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< cs::int_pair > *)new std::vector< cs::int_pair >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::int_pair > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::int_pair > *arg1 = (std::vector< cs::int_pair > *) 0 ;
  std::vector< std::pair< unsigned int,unsigned int > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::int_pair > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::int_pair > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::int_pair > *arg1 = (std::vector< cs::int_pair > *) 0 ;
  std::vector< std::pair< unsigned int,unsigned int > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::int_pair > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::int_pair > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cs::int_pair > *arg1 = (std::vector< cs::int_pair > *) 0 ;
  std::vector< std::pair< unsigned int,unsigned int > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::int_pair > **)&jarg1; 
  arg2 = (std::vector< std::pair< unsigned int,unsigned int > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cs::int_pair > *arg1 = (std::vector< cs::int_pair > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::int_pair > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< cs::int_pair > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cs::int_pair > *arg1 = (std::vector< cs::int_pair > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::int_pair > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cs::int_pair > *arg1 = (std::vector< cs::int_pair > *) 0 ;
  std::vector< std::pair< unsigned int,unsigned int > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cs::int_pair > **)&jarg1; 
  arg2 = *(std::vector< std::pair< unsigned int,unsigned int > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< unsigned int,unsigned int > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< std::pair< unsigned int,unsigned int > >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cs::int_pair > *arg1 = (std::vector< cs::int_pair > *) 0 ;
  int arg2 ;
  std::vector< std::pair< csuint32,csuint32 > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::int_pair > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::pair< csuint32,csuint32 > >::value_type *) &std_vector_Sl_cs_int_pair_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< std::pair< csuint32,csuint32 > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cs::int_pair > *arg1 = (std::vector< cs::int_pair > *) 0 ;
  int arg2 ;
  std::vector< std::pair< unsigned int,unsigned int > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cs::int_pair > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::pair< unsigned int,unsigned int > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< unsigned int,unsigned int > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_cs_int_pair_Sg__set(arg1,arg2,(std::pair< unsigned int,unsigned int > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1int_1pair_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cs::int_pair > *arg1 = (std::vector< cs::int_pair > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cs::int_pair > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1int_1pair_1set_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::set_iterator_policy< cs::int_pair > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::int_pair > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::int_pair > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1set_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::int_pair > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::int_pair > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::int_pair > > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::set_iterator_policy< cs::int_pair > > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1set_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::int_pair > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::int_pair > > *) 0 ;
  SwigValueWrapper< std::pair< unsigned int,unsigned int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::int_pair > > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::set_iterator_policy< cs::int_pair > > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::set_iterator_policy< std::pair< csuint32,csuint32 > >::key **)&jresult = new cs::set_iterator_policy< std::pair< csuint32,csuint32 > >::key((const cs::set_iterator_policy< std::pair< csuint32,csuint32 > >::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1set_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::int_pair > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::int_pair > > *) 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::int_pair > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::int_pair > > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::int_pair > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::set_iterator_policy< cs::int_pair > > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::set_iterator_policy< cs::int_pair > > const *)arg1)->operator ==((cs::iterator_adapter< cs::set_iterator_policy< cs::int_pair > > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1set_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::set_iterator_policy< cs::int_pair > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::int_pair > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::int_pair > > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1set_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::int_pair > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::int_pair > > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::int_pair > > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::set_iterator_policy< cs::int_pair > > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1set_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::int_pair > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::int_pair > > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::int_pair > > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::set_iterator_policy< cs::int_pair > > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1basic_1block_1cfg_1edge_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::basic_block > arg1 ;
  SwigValueWrapper< cs::edge_label > arg2 ;
  cs::basic_block *argp1 ;
  cs::edge_label *argp2 ;
  std::pair< cs::basic_block,cs::edge_label > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(cs::basic_block **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::basic_block");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(cs::edge_label **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::edge_label");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (std::pair< cs::basic_block,cs::edge_label > *)new std::pair< cs::basic_block,cs::edge_label >(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::basic_block,cs::edge_label > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1basic_1block_1cfg_1edge_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::basic_block,cs::edge_label > *arg1 = 0 ;
  std::pair< cs::basic_block,cs::edge_label > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::basic_block,cs::edge_label > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< cs::basic_block,cs::edge_label > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< cs::basic_block,cs::edge_label > *)new std::pair< cs::basic_block,cs::edge_label >((std::pair< cs::basic_block,cs::edge_label > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::basic_block,cs::edge_label > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1cfg_1edge_1get_1first(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::basic_block,cs::edge_label > *arg1 = (std::pair< cs::basic_block,cs::edge_label > *) 0 ;
  cs::basic_block *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::basic_block,cs::edge_label > **)&jarg1; 
  {
    try {
      result = (cs::basic_block *) &std_pair_Sl_cs_basic_block_Sc_cs_edge_label_Sg__get_first(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::basic_block **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1cfg_1edge_1get_1second(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::basic_block,cs::edge_label > *arg1 = (std::pair< cs::basic_block,cs::edge_label > *) 0 ;
  cs::edge_label *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::basic_block,cs::edge_label > **)&jarg1; 
  {
    try {
      result = (cs::edge_label *) &std_pair_Sl_cs_basic_block_Sc_cs_edge_label_Sg__get_second(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::edge_label **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1basic_1block_1cfg_1edge(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< cs::basic_block,cs::edge_label > *arg1 = (std::pair< cs::basic_block,cs::edge_label > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< cs::basic_block,cs::edge_label > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1ast_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::ast_iterator_policy > *arg1 = (cs::iterator_adapter< cs::ast_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::ast_iterator_policy > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_ast_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::ast_iterator_policy > *arg1 = (cs::iterator_adapter< cs::ast_iterator_policy > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::ast_iterator_policy > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::ast_iterator_policy > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::ast_iterator_policy > *arg1 = (cs::iterator_adapter< cs::ast_iterator_policy > *) 0 ;
  SwigValueWrapper< cs::ast > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::ast_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::ast_iterator_policy > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_iterator_policy::key **)&jresult = new cs::ast_iterator_policy::key((const cs::ast_iterator_policy::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_ast_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::ast_iterator_policy > *arg1 = (cs::iterator_adapter< cs::ast_iterator_policy > *) 0 ;
  cs::iterator_adapter< cs::ast_iterator_policy > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::ast_iterator_policy > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::ast_iterator_policy > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::ast_iterator_policy > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::ast_iterator_policy > const *)arg1)->operator ==((cs::iterator_adapter< cs::ast_iterator_policy > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_ast_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::ast_iterator_policy > *arg1 = (cs::iterator_adapter< cs::ast_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::ast_iterator_policy > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::ast_iterator_policy > *arg1 = (cs::iterator_adapter< cs::ast_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::ast_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::ast_iterator_policy > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::ast_iterator_policy > *arg1 = (cs::iterator_adapter< cs::ast_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::ast_iterator_policy > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::ast_iterator_policy > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_ast_1iterator_1apply_1directives(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cs::iterator_adapter< cs::ast_iterator_policy > *arg1 = (cs::iterator_adapter< cs::ast_iterator_policy > *) 0 ;
  cs::ast_traverse_directives *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::ast_iterator_policy > **)&jarg1; 
  arg2 = *(cs::ast_traverse_directives **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::ast_traverse_directives const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->SWIGTEMPLATEDISAMBIGUATOR apply_directives< cs::ast_traverse_directives >((cs::ast_traverse_directives const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1procedure_1locals_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::procedure_locals_iterator_policy > *arg1 = (cs::iterator_adapter< cs::procedure_locals_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::procedure_locals_iterator_policy > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_procedure_1locals_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::procedure_locals_iterator_policy > *arg1 = (cs::iterator_adapter< cs::procedure_locals_iterator_policy > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::procedure_locals_iterator_policy > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::procedure_locals_iterator_policy > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1locals_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::procedure_locals_iterator_policy > *arg1 = (cs::iterator_adapter< cs::procedure_locals_iterator_policy > *) 0 ;
  SwigValueWrapper< cs::symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::procedure_locals_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::procedure_locals_iterator_policy > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::procedure_locals_iterator_policy::key **)&jresult = new cs::procedure_locals_iterator_policy::key((const cs::procedure_locals_iterator_policy::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_procedure_1locals_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::procedure_locals_iterator_policy > *arg1 = (cs::iterator_adapter< cs::procedure_locals_iterator_policy > *) 0 ;
  cs::iterator_adapter< cs::procedure_locals_iterator_policy > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::procedure_locals_iterator_policy > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::procedure_locals_iterator_policy > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::procedure_locals_iterator_policy > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::procedure_locals_iterator_policy > const *)arg1)->operator ==((cs::iterator_adapter< cs::procedure_locals_iterator_policy > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_procedure_1locals_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::procedure_locals_iterator_policy > *arg1 = (cs::iterator_adapter< cs::procedure_locals_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::procedure_locals_iterator_policy > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_procedure_1locals_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::procedure_locals_iterator_policy > *arg1 = (cs::iterator_adapter< cs::procedure_locals_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::procedure_locals_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::procedure_locals_iterator_policy > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_procedure_1locals_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::procedure_locals_iterator_policy > *arg1 = (cs::iterator_adapter< cs::procedure_locals_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::procedure_locals_iterator_policy > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::procedure_locals_iterator_policy > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1procedure_1call_1sites_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::procedure_call_sites_iterator_policy > *arg1 = (cs::iterator_adapter< cs::procedure_call_sites_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::procedure_call_sites_iterator_policy > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_procedure_1call_1sites_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::procedure_call_sites_iterator_policy > *arg1 = (cs::iterator_adapter< cs::procedure_call_sites_iterator_policy > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::procedure_call_sites_iterator_policy > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::procedure_call_sites_iterator_policy > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1call_1sites_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::procedure_call_sites_iterator_policy > *arg1 = (cs::iterator_adapter< cs::procedure_call_sites_iterator_policy > *) 0 ;
  SwigValueWrapper< cs::point > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::procedure_call_sites_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::procedure_call_sites_iterator_policy > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::procedure_call_sites_iterator_policy::key **)&jresult = new cs::procedure_call_sites_iterator_policy::key((const cs::procedure_call_sites_iterator_policy::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_procedure_1call_1sites_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::procedure_call_sites_iterator_policy > *arg1 = (cs::iterator_adapter< cs::procedure_call_sites_iterator_policy > *) 0 ;
  cs::iterator_adapter< cs::procedure_call_sites_iterator_policy > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::procedure_call_sites_iterator_policy > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::procedure_call_sites_iterator_policy > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::procedure_call_sites_iterator_policy > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::procedure_call_sites_iterator_policy > const *)arg1)->operator ==((cs::iterator_adapter< cs::procedure_call_sites_iterator_policy > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_procedure_1call_1sites_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::procedure_call_sites_iterator_policy > *arg1 = (cs::iterator_adapter< cs::procedure_call_sites_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::procedure_call_sites_iterator_policy > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_procedure_1call_1sites_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::procedure_call_sites_iterator_policy > *arg1 = (cs::iterator_adapter< cs::procedure_call_sites_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::procedure_call_sites_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::procedure_call_sites_iterator_policy > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_procedure_1call_1sites_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::procedure_call_sites_iterator_policy > *arg1 = (cs::iterator_adapter< cs::procedure_call_sites_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::procedure_call_sites_iterator_policy > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::procedure_call_sites_iterator_policy > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1procedure_1callers_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::procedure_callers_iterator_policy > *arg1 = (cs::iterator_adapter< cs::procedure_callers_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::procedure_callers_iterator_policy > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_procedure_1callers_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::procedure_callers_iterator_policy > *arg1 = (cs::iterator_adapter< cs::procedure_callers_iterator_policy > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::procedure_callers_iterator_policy > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::procedure_callers_iterator_policy > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1callers_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::procedure_callers_iterator_policy > *arg1 = (cs::iterator_adapter< cs::procedure_callers_iterator_policy > *) 0 ;
  SwigValueWrapper< cs::point > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::procedure_callers_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::procedure_callers_iterator_policy > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::procedure_callers_iterator_policy::key **)&jresult = new cs::procedure_callers_iterator_policy::key((const cs::procedure_callers_iterator_policy::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_procedure_1callers_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::procedure_callers_iterator_policy > *arg1 = (cs::iterator_adapter< cs::procedure_callers_iterator_policy > *) 0 ;
  cs::iterator_adapter< cs::procedure_callers_iterator_policy > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::procedure_callers_iterator_policy > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::procedure_callers_iterator_policy > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::procedure_callers_iterator_policy > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::procedure_callers_iterator_policy > const *)arg1)->operator ==((cs::iterator_adapter< cs::procedure_callers_iterator_policy > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_procedure_1callers_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::procedure_callers_iterator_policy > *arg1 = (cs::iterator_adapter< cs::procedure_callers_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::procedure_callers_iterator_policy > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_procedure_1callers_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::procedure_callers_iterator_policy > *arg1 = (cs::iterator_adapter< cs::procedure_callers_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::procedure_callers_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::procedure_callers_iterator_policy > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_procedure_1callers_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::procedure_callers_iterator_policy > *arg1 = (cs::iterator_adapter< cs::procedure_callers_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::procedure_callers_iterator_policy > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::procedure_callers_iterator_policy > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1symbol_1universe_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::symbol_universe_iterator_policy > *arg1 = (cs::iterator_adapter< cs::symbol_universe_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::symbol_universe_iterator_policy > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_symbol_1universe_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::symbol_universe_iterator_policy > *arg1 = (cs::iterator_adapter< cs::symbol_universe_iterator_policy > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::symbol_universe_iterator_policy > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::symbol_universe_iterator_policy > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1universe_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::symbol_universe_iterator_policy > *arg1 = (cs::iterator_adapter< cs::symbol_universe_iterator_policy > *) 0 ;
  SwigValueWrapper< cs::symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::symbol_universe_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::symbol_universe_iterator_policy > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::symbol_universe_iterator_policy::key **)&jresult = new cs::symbol_universe_iterator_policy::key((const cs::symbol_universe_iterator_policy::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_symbol_1universe_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::symbol_universe_iterator_policy > *arg1 = (cs::iterator_adapter< cs::symbol_universe_iterator_policy > *) 0 ;
  cs::iterator_adapter< cs::symbol_universe_iterator_policy > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::symbol_universe_iterator_policy > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::symbol_universe_iterator_policy > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::symbol_universe_iterator_policy > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::symbol_universe_iterator_policy > const *)arg1)->operator ==((cs::iterator_adapter< cs::symbol_universe_iterator_policy > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_symbol_1universe_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::symbol_universe_iterator_policy > *arg1 = (cs::iterator_adapter< cs::symbol_universe_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::symbol_universe_iterator_policy > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_symbol_1universe_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::symbol_universe_iterator_policy > *arg1 = (cs::iterator_adapter< cs::symbol_universe_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::symbol_universe_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::symbol_universe_iterator_policy > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_symbol_1universe_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::symbol_universe_iterator_policy > *arg1 = (cs::iterator_adapter< cs::symbol_universe_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::symbol_universe_iterator_policy > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::symbol_universe_iterator_policy > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1project_1procedures_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::project_procedures_iterator_policy > *arg1 = (cs::iterator_adapter< cs::project_procedures_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::project_procedures_iterator_policy > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_project_1procedures_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::project_procedures_iterator_policy > *arg1 = (cs::iterator_adapter< cs::project_procedures_iterator_policy > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::project_procedures_iterator_policy > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::project_procedures_iterator_policy > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1procedures_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::project_procedures_iterator_policy > *arg1 = (cs::iterator_adapter< cs::project_procedures_iterator_policy > *) 0 ;
  SwigValueWrapper< cs::procedure > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::project_procedures_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::project_procedures_iterator_policy > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::project_procedures_iterator_policy::key **)&jresult = new cs::project_procedures_iterator_policy::key((const cs::project_procedures_iterator_policy::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_project_1procedures_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::project_procedures_iterator_policy > *arg1 = (cs::iterator_adapter< cs::project_procedures_iterator_policy > *) 0 ;
  cs::iterator_adapter< cs::project_procedures_iterator_policy > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::project_procedures_iterator_policy > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::project_procedures_iterator_policy > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::project_procedures_iterator_policy > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::project_procedures_iterator_policy > const *)arg1)->operator ==((cs::iterator_adapter< cs::project_procedures_iterator_policy > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_project_1procedures_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::project_procedures_iterator_policy > *arg1 = (cs::iterator_adapter< cs::project_procedures_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::project_procedures_iterator_policy > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_project_1procedures_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::project_procedures_iterator_policy > *arg1 = (cs::iterator_adapter< cs::project_procedures_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::project_procedures_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::project_procedures_iterator_policy > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_project_1procedures_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::project_procedures_iterator_policy > *arg1 = (cs::iterator_adapter< cs::project_procedures_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::project_procedures_iterator_policy > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::project_procedures_iterator_policy > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1project_1compunits_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::project_compunits_iterator_policy > *arg1 = (cs::iterator_adapter< cs::project_compunits_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::project_compunits_iterator_policy > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_project_1compunits_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::project_compunits_iterator_policy > *arg1 = (cs::iterator_adapter< cs::project_compunits_iterator_policy > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::project_compunits_iterator_policy > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::project_compunits_iterator_policy > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1compunits_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::project_compunits_iterator_policy > *arg1 = (cs::iterator_adapter< cs::project_compunits_iterator_policy > *) 0 ;
  SwigValueWrapper< cs::compunit > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::project_compunits_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::project_compunits_iterator_policy > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::project_compunits_iterator_policy::key **)&jresult = new cs::project_compunits_iterator_policy::key((const cs::project_compunits_iterator_policy::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_project_1compunits_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::project_compunits_iterator_policy > *arg1 = (cs::iterator_adapter< cs::project_compunits_iterator_policy > *) 0 ;
  cs::iterator_adapter< cs::project_compunits_iterator_policy > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::project_compunits_iterator_policy > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::project_compunits_iterator_policy > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::project_compunits_iterator_policy > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::project_compunits_iterator_policy > const *)arg1)->operator ==((cs::iterator_adapter< cs::project_compunits_iterator_policy > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_project_1compunits_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::project_compunits_iterator_policy > *arg1 = (cs::iterator_adapter< cs::project_compunits_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::project_compunits_iterator_policy > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_project_1compunits_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::project_compunits_iterator_policy > *arg1 = (cs::iterator_adapter< cs::project_compunits_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::project_compunits_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::project_compunits_iterator_policy > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_project_1compunits_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::project_compunits_iterator_policy > *arg1 = (cs::iterator_adapter< cs::project_compunits_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::project_compunits_iterator_policy > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::project_compunits_iterator_policy > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1project_1sfiles_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::project_sfiles_iterator_policy > *arg1 = (cs::iterator_adapter< cs::project_sfiles_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::project_sfiles_iterator_policy > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_project_1sfiles_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::project_sfiles_iterator_policy > *arg1 = (cs::iterator_adapter< cs::project_sfiles_iterator_policy > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::project_sfiles_iterator_policy > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::project_sfiles_iterator_policy > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1sfiles_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::project_sfiles_iterator_policy > *arg1 = (cs::iterator_adapter< cs::project_sfiles_iterator_policy > *) 0 ;
  SwigValueWrapper< cs::sfile > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::project_sfiles_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::project_sfiles_iterator_policy > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::project_sfiles_iterator_policy::key **)&jresult = new cs::project_sfiles_iterator_policy::key((const cs::project_sfiles_iterator_policy::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_project_1sfiles_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::project_sfiles_iterator_policy > *arg1 = (cs::iterator_adapter< cs::project_sfiles_iterator_policy > *) 0 ;
  cs::iterator_adapter< cs::project_sfiles_iterator_policy > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::project_sfiles_iterator_policy > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::project_sfiles_iterator_policy > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::project_sfiles_iterator_policy > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::project_sfiles_iterator_policy > const *)arg1)->operator ==((cs::iterator_adapter< cs::project_sfiles_iterator_policy > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_project_1sfiles_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::project_sfiles_iterator_policy > *arg1 = (cs::iterator_adapter< cs::project_sfiles_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::project_sfiles_iterator_policy > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_project_1sfiles_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::project_sfiles_iterator_policy > *arg1 = (cs::iterator_adapter< cs::project_sfiles_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::project_sfiles_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::project_sfiles_iterator_policy > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_project_1sfiles_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::project_sfiles_iterator_policy > *arg1 = (cs::iterator_adapter< cs::project_sfiles_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::project_sfiles_iterator_policy > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::project_sfiles_iterator_policy > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1project_1root_1directories_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::project_root_directories_iterator_policy > *arg1 = (cs::iterator_adapter< cs::project_root_directories_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::project_root_directories_iterator_policy > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_project_1root_1directories_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::project_root_directories_iterator_policy > *arg1 = (cs::iterator_adapter< cs::project_root_directories_iterator_policy > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::project_root_directories_iterator_policy > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::project_root_directories_iterator_policy > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1root_1directories_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::project_root_directories_iterator_policy > *arg1 = (cs::iterator_adapter< cs::project_root_directories_iterator_policy > *) 0 ;
  SwigValueWrapper< cs::directory > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::project_root_directories_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::project_root_directories_iterator_policy > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::project_root_directories_iterator_policy::key **)&jresult = new cs::project_root_directories_iterator_policy::key((const cs::project_root_directories_iterator_policy::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_project_1root_1directories_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::project_root_directories_iterator_policy > *arg1 = (cs::iterator_adapter< cs::project_root_directories_iterator_policy > *) 0 ;
  cs::iterator_adapter< cs::project_root_directories_iterator_policy > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::project_root_directories_iterator_policy > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::project_root_directories_iterator_policy > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::project_root_directories_iterator_policy > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::project_root_directories_iterator_policy > const *)arg1)->operator ==((cs::iterator_adapter< cs::project_root_directories_iterator_policy > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_project_1root_1directories_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::project_root_directories_iterator_policy > *arg1 = (cs::iterator_adapter< cs::project_root_directories_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::project_root_directories_iterator_policy > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_project_1root_1directories_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::project_root_directories_iterator_policy > *arg1 = (cs::iterator_adapter< cs::project_root_directories_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::project_root_directories_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::project_root_directories_iterator_policy > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_project_1root_1directories_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::project_root_directories_iterator_policy > *arg1 = (cs::iterator_adapter< cs::project_root_directories_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::project_root_directories_iterator_policy > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::project_root_directories_iterator_policy > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1sfile_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cs::sfile > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< cs::sfile > *)new std::vector< cs::sfile >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::sfile > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::sfile > *arg1 = (std::vector< cs::sfile > *) 0 ;
  std::vector< cs::sfile >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::sfile > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::sfile > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::sfile > *arg1 = (std::vector< cs::sfile > *) 0 ;
  std::vector< cs::sfile >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::sfile > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::sfile > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_sfile_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cs::sfile > *arg1 = (std::vector< cs::sfile > *) 0 ;
  std::vector< cs::sfile >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::sfile > **)&jarg1; 
  arg2 = (std::vector< cs::sfile >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_sfile_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cs::sfile > *arg1 = (std::vector< cs::sfile > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::sfile > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< cs::sfile > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_sfile_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cs::sfile > *arg1 = (std::vector< cs::sfile > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::sfile > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_sfile_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cs::sfile > *arg1 = (std::vector< cs::sfile > *) 0 ;
  std::vector< cs::sfile >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cs::sfile > **)&jarg1; 
  arg2 = *(std::vector< cs::sfile >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::sfile >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< cs::sfile >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cs::sfile > *arg1 = (std::vector< cs::sfile > *) 0 ;
  int arg2 ;
  std::vector< cs::sfile >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::sfile > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< cs::sfile >::value_type *) &std_vector_Sl_cs_sfile_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::sfile >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_sfile_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cs::sfile > *arg1 = (std::vector< cs::sfile > *) 0 ;
  int arg2 ;
  std::vector< cs::sfile >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cs::sfile > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< cs::sfile >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::sfile >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_cs_sfile_Sg__set(arg1,arg2,(cs::sfile const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1sfile_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cs::sfile > *arg1 = (std::vector< cs::sfile > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cs::sfile > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1directory_1children_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::directory_children_iterator_policy > *arg1 = (cs::iterator_adapter< cs::directory_children_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::directory_children_iterator_policy > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_directory_1children_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::directory_children_iterator_policy > *arg1 = (cs::iterator_adapter< cs::directory_children_iterator_policy > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::directory_children_iterator_policy > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::directory_children_iterator_policy > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_directory_1children_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::directory_children_iterator_policy > *arg1 = (cs::iterator_adapter< cs::directory_children_iterator_policy > *) 0 ;
  SwigValueWrapper< cs::directory > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::directory_children_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::directory_children_iterator_policy > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::directory_children_iterator_policy::key **)&jresult = new cs::directory_children_iterator_policy::key((const cs::directory_children_iterator_policy::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_directory_1children_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::directory_children_iterator_policy > *arg1 = (cs::iterator_adapter< cs::directory_children_iterator_policy > *) 0 ;
  cs::iterator_adapter< cs::directory_children_iterator_policy > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::directory_children_iterator_policy > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::directory_children_iterator_policy > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::directory_children_iterator_policy > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::directory_children_iterator_policy > const *)arg1)->operator ==((cs::iterator_adapter< cs::directory_children_iterator_policy > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_directory_1children_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::directory_children_iterator_policy > *arg1 = (cs::iterator_adapter< cs::directory_children_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::directory_children_iterator_policy > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_directory_1children_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::directory_children_iterator_policy > *arg1 = (cs::iterator_adapter< cs::directory_children_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::directory_children_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::directory_children_iterator_policy > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_directory_1children_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::directory_children_iterator_policy > *arg1 = (cs::iterator_adapter< cs::directory_children_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::directory_children_iterator_policy > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::directory_children_iterator_policy > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1directory_1files_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::directory_files_iterator_policy > *arg1 = (cs::iterator_adapter< cs::directory_files_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::directory_files_iterator_policy > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_directory_1files_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::directory_files_iterator_policy > *arg1 = (cs::iterator_adapter< cs::directory_files_iterator_policy > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::directory_files_iterator_policy > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::directory_files_iterator_policy > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_directory_1files_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::directory_files_iterator_policy > *arg1 = (cs::iterator_adapter< cs::directory_files_iterator_policy > *) 0 ;
  SwigValueWrapper< cs::sfile > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::directory_files_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::directory_files_iterator_policy > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::directory_files_iterator_policy::key **)&jresult = new cs::directory_files_iterator_policy::key((const cs::directory_files_iterator_policy::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_directory_1files_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::directory_files_iterator_policy > *arg1 = (cs::iterator_adapter< cs::directory_files_iterator_policy > *) 0 ;
  cs::iterator_adapter< cs::directory_files_iterator_policy > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::directory_files_iterator_policy > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::directory_files_iterator_policy > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::directory_files_iterator_policy > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::directory_files_iterator_policy > const *)arg1)->operator ==((cs::iterator_adapter< cs::directory_files_iterator_policy > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_directory_1files_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::directory_files_iterator_policy > *arg1 = (cs::iterator_adapter< cs::directory_files_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::directory_files_iterator_policy > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_directory_1files_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::directory_files_iterator_policy > *arg1 = (cs::iterator_adapter< cs::directory_files_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::directory_files_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::directory_files_iterator_policy > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_directory_1files_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::directory_files_iterator_policy > *arg1 = (cs::iterator_adapter< cs::directory_files_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::directory_files_iterator_policy > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::directory_files_iterator_policy > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1sfileinst_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cs::sfileinst > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< cs::sfileinst > *)new std::vector< cs::sfileinst >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::sfileinst > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::sfileinst > *arg1 = (std::vector< cs::sfileinst > *) 0 ;
  std::vector< cs::sfileinst >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::sfileinst > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::sfileinst > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::sfileinst > *arg1 = (std::vector< cs::sfileinst > *) 0 ;
  std::vector< cs::sfileinst >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::sfileinst > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::sfileinst > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cs::sfileinst > *arg1 = (std::vector< cs::sfileinst > *) 0 ;
  std::vector< cs::sfileinst >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::sfileinst > **)&jarg1; 
  arg2 = (std::vector< cs::sfileinst >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cs::sfileinst > *arg1 = (std::vector< cs::sfileinst > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::sfileinst > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< cs::sfileinst > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cs::sfileinst > *arg1 = (std::vector< cs::sfileinst > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::sfileinst > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cs::sfileinst > *arg1 = (std::vector< cs::sfileinst > *) 0 ;
  std::vector< cs::sfileinst >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cs::sfileinst > **)&jarg1; 
  arg2 = *(std::vector< cs::sfileinst >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::sfileinst >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< cs::sfileinst >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cs::sfileinst > *arg1 = (std::vector< cs::sfileinst > *) 0 ;
  int arg2 ;
  std::vector< cs::sfileinst >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::sfileinst > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< cs::sfileinst >::value_type *) &std_vector_Sl_cs_sfileinst_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::sfileinst >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cs::sfileinst > *arg1 = (std::vector< cs::sfileinst > *) 0 ;
  int arg2 ;
  std::vector< cs::sfileinst >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cs::sfileinst > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< cs::sfileinst >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::sfileinst >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_cs_sfileinst_Sg__set(arg1,arg2,(cs::sfileinst const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1sfileinst_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cs::sfileinst > *arg1 = (std::vector< cs::sfileinst > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cs::sfileinst > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1line_1number_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cs::line_number > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< cs::line_number > *)new std::vector< cs::line_number >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::line_number > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1line_1number_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< unsigned int >::size_type arg1 ;
  std::vector< cs::line_number > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< unsigned int >::size_type)jarg1; 
  {
    try {
      result = (std::vector< cs::line_number > *)new std::vector< cs::line_number >(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::line_number > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_line_1number_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::line_number > *arg1 = (std::vector< cs::line_number > *) 0 ;
  std::vector< unsigned int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::line_number > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::line_number > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_line_1number_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::line_number > *arg1 = (std::vector< cs::line_number > *) 0 ;
  std::vector< unsigned int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::line_number > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::line_number > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_line_1number_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cs::line_number > *arg1 = (std::vector< cs::line_number > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::line_number > **)&jarg1; 
  arg2 = (std::vector< unsigned int >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_line_1number_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cs::line_number > *arg1 = (std::vector< cs::line_number > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::line_number > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< cs::line_number > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_line_1number_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cs::line_number > *arg1 = (std::vector< cs::line_number > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::line_number > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_line_1number_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cs::line_number > *arg1 = (std::vector< cs::line_number > *) 0 ;
  std::vector< unsigned int >::value_type *arg2 = 0 ;
  std::vector< unsigned int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::line_number > **)&jarg1; 
  temp2 = (std::vector< unsigned int >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< unsigned int >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_line_1number_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cs::line_number > *arg1 = (std::vector< cs::line_number > *) 0 ;
  int arg2 ;
  std::vector< unsigned int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::line_number > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< unsigned int >::value_type *) &std_vector_Sl_cs_line_number_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_line_1number_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< cs::line_number > *arg1 = (std::vector< cs::line_number > *) 0 ;
  int arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ;
  std::vector< unsigned int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::line_number > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< unsigned int >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_cs_line_number_Sg__set(arg1,arg2,(unsigned int const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1line_1number_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cs::line_number > *arg1 = (std::vector< cs::line_number > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cs::line_number > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1symbol_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cs::symbol > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< cs::symbol > *)new std::vector< cs::symbol >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::symbol > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::symbol > *arg1 = (std::vector< cs::symbol > *) 0 ;
  std::vector< cs::symbol >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::symbol > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::symbol > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::symbol > *arg1 = (std::vector< cs::symbol > *) 0 ;
  std::vector< cs::symbol >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::symbol > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::symbol > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_symbol_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cs::symbol > *arg1 = (std::vector< cs::symbol > *) 0 ;
  std::vector< cs::symbol >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::symbol > **)&jarg1; 
  arg2 = (std::vector< cs::symbol >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_symbol_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cs::symbol > *arg1 = (std::vector< cs::symbol > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::symbol > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< cs::symbol > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_symbol_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cs::symbol > *arg1 = (std::vector< cs::symbol > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::symbol > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_symbol_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cs::symbol > *arg1 = (std::vector< cs::symbol > *) 0 ;
  std::vector< cs::symbol >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cs::symbol > **)&jarg1; 
  arg2 = *(std::vector< cs::symbol >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::symbol >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< cs::symbol >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cs::symbol > *arg1 = (std::vector< cs::symbol > *) 0 ;
  int arg2 ;
  std::vector< cs::symbol >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::symbol > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< cs::symbol >::value_type *) &std_vector_Sl_cs_symbol_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::symbol >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_symbol_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cs::symbol > *arg1 = (std::vector< cs::symbol > *) 0 ;
  int arg2 ;
  std::vector< cs::symbol >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cs::symbol > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< cs::symbol >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::symbol >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_cs_symbol_Sg__set(arg1,arg2,(cs::symbol const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1symbol_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cs::symbol > *arg1 = (std::vector< cs::symbol > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cs::symbol > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1symbol_1set_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > *) 0 ;
  SwigValueWrapper< cs::symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::set_iterator_policy< cs::symbol >::key **)&jresult = new cs::set_iterator_policy< cs::symbol >::key((const cs::set_iterator_policy< cs::symbol >::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > *) 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > const *)arg1)->operator ==((cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1basic_1block_1cfg_1edge_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cs::basic_block_cfg_edge > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< cs::basic_block_cfg_edge > *)new std::vector< cs::basic_block_cfg_edge >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::basic_block_cfg_edge > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1cfg_1edge_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::basic_block_cfg_edge > *arg1 = (std::vector< cs::basic_block_cfg_edge > *) 0 ;
  std::vector< std::pair< cs::basic_block,cs::edge_label > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::basic_block_cfg_edge > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::basic_block_cfg_edge > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1cfg_1edge_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::basic_block_cfg_edge > *arg1 = (std::vector< cs::basic_block_cfg_edge > *) 0 ;
  std::vector< std::pair< cs::basic_block,cs::edge_label > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::basic_block_cfg_edge > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::basic_block_cfg_edge > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1cfg_1edge_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cs::basic_block_cfg_edge > *arg1 = (std::vector< cs::basic_block_cfg_edge > *) 0 ;
  std::vector< std::pair< cs::basic_block,cs::edge_label > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::basic_block_cfg_edge > **)&jarg1; 
  arg2 = (std::vector< std::pair< cs::basic_block,cs::edge_label > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1cfg_1edge_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cs::basic_block_cfg_edge > *arg1 = (std::vector< cs::basic_block_cfg_edge > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::basic_block_cfg_edge > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< cs::basic_block_cfg_edge > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1cfg_1edge_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cs::basic_block_cfg_edge > *arg1 = (std::vector< cs::basic_block_cfg_edge > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::basic_block_cfg_edge > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1cfg_1edge_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cs::basic_block_cfg_edge > *arg1 = (std::vector< cs::basic_block_cfg_edge > *) 0 ;
  std::vector< std::pair< cs::basic_block,cs::edge_label > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cs::basic_block_cfg_edge > **)&jarg1; 
  arg2 = *(std::vector< std::pair< cs::basic_block,cs::edge_label > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< cs::basic_block,cs::edge_label > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< std::pair< cs::basic_block,cs::edge_label > >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1cfg_1edge_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cs::basic_block_cfg_edge > *arg1 = (std::vector< cs::basic_block_cfg_edge > *) 0 ;
  int arg2 ;
  std::vector< std::pair< cs::basic_block,cs::edge_label > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::basic_block_cfg_edge > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::pair< cs::basic_block,cs::edge_label > >::value_type *) &std_vector_Sl_cs_basic_block_cfg_edge_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< std::pair< cs::basic_block,cs::edge_label > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1cfg_1edge_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cs::basic_block_cfg_edge > *arg1 = (std::vector< cs::basic_block_cfg_edge > *) 0 ;
  int arg2 ;
  std::vector< std::pair< cs::basic_block,cs::edge_label > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cs::basic_block_cfg_edge > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::pair< cs::basic_block,cs::edge_label > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< cs::basic_block,cs::edge_label > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_cs_basic_block_cfg_edge_Sg__set(arg1,arg2,(std::pair< cs::basic_block,cs::edge_label > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1basic_1block_1cfg_1edge_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cs::basic_block_cfg_edge > *arg1 = (std::vector< cs::basic_block_cfg_edge > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cs::basic_block_cfg_edge > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1basic_1block_1cfg_1edge_1set_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block_cfg_edge > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block_cfg_edge > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block_cfg_edge > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1cfg_1edge_1set_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block_cfg_edge > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block_cfg_edge > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block_cfg_edge > > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block_cfg_edge > > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1cfg_1edge_1set_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block_cfg_edge > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block_cfg_edge > > *) 0 ;
  SwigValueWrapper< std::pair< cs::basic_block,cs::edge_label > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block_cfg_edge > > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block_cfg_edge > > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::set_iterator_policy< std::pair< cs::basic_block,cs::edge_label > >::key **)&jresult = new cs::set_iterator_policy< std::pair< cs::basic_block,cs::edge_label > >::key((const cs::set_iterator_policy< std::pair< cs::basic_block,cs::edge_label > >::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1cfg_1edge_1set_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block_cfg_edge > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block_cfg_edge > > *) 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block_cfg_edge > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block_cfg_edge > > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block_cfg_edge > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block_cfg_edge > > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block_cfg_edge > > const *)arg1)->operator ==((cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block_cfg_edge > > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1cfg_1edge_1set_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block_cfg_edge > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block_cfg_edge > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block_cfg_edge > > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1cfg_1edge_1set_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block_cfg_edge > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block_cfg_edge > > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block_cfg_edge > > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block_cfg_edge > > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1cfg_1edge_1set_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block_cfg_edge > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block_cfg_edge > > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block_cfg_edge > > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block_cfg_edge > > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1basic_1block_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cs::basic_block > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< cs::basic_block > *)new std::vector< cs::basic_block >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::basic_block > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::basic_block > *arg1 = (std::vector< cs::basic_block > *) 0 ;
  std::vector< cs::basic_block >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::basic_block > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::basic_block > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::basic_block > *arg1 = (std::vector< cs::basic_block > *) 0 ;
  std::vector< cs::basic_block >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::basic_block > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::basic_block > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cs::basic_block > *arg1 = (std::vector< cs::basic_block > *) 0 ;
  std::vector< cs::basic_block >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::basic_block > **)&jarg1; 
  arg2 = (std::vector< cs::basic_block >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cs::basic_block > *arg1 = (std::vector< cs::basic_block > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::basic_block > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< cs::basic_block > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cs::basic_block > *arg1 = (std::vector< cs::basic_block > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::basic_block > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cs::basic_block > *arg1 = (std::vector< cs::basic_block > *) 0 ;
  std::vector< cs::basic_block >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cs::basic_block > **)&jarg1; 
  arg2 = *(std::vector< cs::basic_block >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::basic_block >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< cs::basic_block >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cs::basic_block > *arg1 = (std::vector< cs::basic_block > *) 0 ;
  int arg2 ;
  std::vector< cs::basic_block >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::basic_block > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< cs::basic_block >::value_type *) &std_vector_Sl_cs_basic_block_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::basic_block >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cs::basic_block > *arg1 = (std::vector< cs::basic_block > *) 0 ;
  int arg2 ;
  std::vector< cs::basic_block >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cs::basic_block > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< cs::basic_block >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::basic_block >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_cs_basic_block_Sg__set(arg1,arg2,(cs::basic_block const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1basic_1block_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cs::basic_block > *arg1 = (std::vector< cs::basic_block > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cs::basic_block > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1basic_1block_1set_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1set_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1set_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > *) 0 ;
  SwigValueWrapper< cs::basic_block > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::set_iterator_policy< cs::basic_block >::key **)&jresult = new cs::set_iterator_policy< cs::basic_block >::key((const cs::set_iterator_policy< cs::basic_block >::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1set_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > *) 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > const *)arg1)->operator ==((cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1set_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1set_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1set_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1cfg_1edge_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cs::cfg_edge > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< cs::cfg_edge > *)new std::vector< cs::cfg_edge >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::cfg_edge > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_cfg_1edge_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::cfg_edge > *arg1 = (std::vector< cs::cfg_edge > *) 0 ;
  std::vector< std::pair< cs::point,cs::edge_label > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::cfg_edge > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::cfg_edge > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_cfg_1edge_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::cfg_edge > *arg1 = (std::vector< cs::cfg_edge > *) 0 ;
  std::vector< std::pair< cs::point,cs::edge_label > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::cfg_edge > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::cfg_edge > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_cfg_1edge_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cs::cfg_edge > *arg1 = (std::vector< cs::cfg_edge > *) 0 ;
  std::vector< std::pair< cs::point,cs::edge_label > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::cfg_edge > **)&jarg1; 
  arg2 = (std::vector< std::pair< cs::point,cs::edge_label > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_cfg_1edge_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cs::cfg_edge > *arg1 = (std::vector< cs::cfg_edge > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::cfg_edge > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< cs::cfg_edge > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_cfg_1edge_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cs::cfg_edge > *arg1 = (std::vector< cs::cfg_edge > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::cfg_edge > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_cfg_1edge_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cs::cfg_edge > *arg1 = (std::vector< cs::cfg_edge > *) 0 ;
  std::vector< std::pair< cs::point,cs::edge_label > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cs::cfg_edge > **)&jarg1; 
  arg2 = *(std::vector< std::pair< cs::point,cs::edge_label > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< cs::point,cs::edge_label > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< std::pair< cs::point,cs::edge_label > >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_cfg_1edge_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cs::cfg_edge > *arg1 = (std::vector< cs::cfg_edge > *) 0 ;
  int arg2 ;
  std::vector< std::pair< cs::point,cs::edge_label > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::cfg_edge > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::pair< cs::point,cs::edge_label > >::value_type *) &std_vector_Sl_cs_cfg_edge_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< std::pair< cs::point,cs::edge_label > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_cfg_1edge_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cs::cfg_edge > *arg1 = (std::vector< cs::cfg_edge > *) 0 ;
  int arg2 ;
  std::vector< std::pair< cs::point,cs::edge_label > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cs::cfg_edge > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::pair< cs::point,cs::edge_label > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< cs::point,cs::edge_label > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_cs_cfg_edge_Sg__set(arg1,arg2,(std::pair< cs::point,cs::edge_label > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1cfg_1edge_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cs::cfg_edge > *arg1 = (std::vector< cs::cfg_edge > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cs::cfg_edge > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1cfg_1edge_1set_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::set_iterator_policy< cs::cfg_edge > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::cfg_edge > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::cfg_edge > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_cfg_1edge_1set_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::cfg_edge > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::cfg_edge > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::cfg_edge > > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::set_iterator_policy< cs::cfg_edge > > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_cfg_1edge_1set_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::cfg_edge > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::cfg_edge > > *) 0 ;
  SwigValueWrapper< std::pair< cs::point,cs::edge_label > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::cfg_edge > > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::set_iterator_policy< cs::cfg_edge > > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::set_iterator_policy< std::pair< cs::point,cs::edge_label > >::key **)&jresult = new cs::set_iterator_policy< std::pair< cs::point,cs::edge_label > >::key((const cs::set_iterator_policy< std::pair< cs::point,cs::edge_label > >::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_cfg_1edge_1set_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::cfg_edge > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::cfg_edge > > *) 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::cfg_edge > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::cfg_edge > > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::cfg_edge > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::set_iterator_policy< cs::cfg_edge > > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::set_iterator_policy< cs::cfg_edge > > const *)arg1)->operator ==((cs::iterator_adapter< cs::set_iterator_policy< cs::cfg_edge > > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_cfg_1edge_1set_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::set_iterator_policy< cs::cfg_edge > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::cfg_edge > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::cfg_edge > > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_cfg_1edge_1set_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::cfg_edge > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::cfg_edge > > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::cfg_edge > > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::set_iterator_policy< cs::cfg_edge > > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_cfg_1edge_1set_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::cfg_edge > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::cfg_edge > > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::cfg_edge > > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::set_iterator_policy< cs::cfg_edge > > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1labeled_1pdg_1edge_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cs::labeled_pdg_edge > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< cs::labeled_pdg_edge > *)new std::vector< cs::labeled_pdg_edge >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::labeled_pdg_edge > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_labeled_1pdg_1edge_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::labeled_pdg_edge > *arg1 = (std::vector< cs::labeled_pdg_edge > *) 0 ;
  std::vector< std::pair< cs::point,cs::pdg_edge_label > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::labeled_pdg_edge > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::labeled_pdg_edge > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_labeled_1pdg_1edge_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::labeled_pdg_edge > *arg1 = (std::vector< cs::labeled_pdg_edge > *) 0 ;
  std::vector< std::pair< cs::point,cs::pdg_edge_label > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::labeled_pdg_edge > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::labeled_pdg_edge > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_labeled_1pdg_1edge_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cs::labeled_pdg_edge > *arg1 = (std::vector< cs::labeled_pdg_edge > *) 0 ;
  std::vector< std::pair< cs::point,cs::pdg_edge_label > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::labeled_pdg_edge > **)&jarg1; 
  arg2 = (std::vector< std::pair< cs::point,cs::pdg_edge_label > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_labeled_1pdg_1edge_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cs::labeled_pdg_edge > *arg1 = (std::vector< cs::labeled_pdg_edge > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::labeled_pdg_edge > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< cs::labeled_pdg_edge > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_labeled_1pdg_1edge_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cs::labeled_pdg_edge > *arg1 = (std::vector< cs::labeled_pdg_edge > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::labeled_pdg_edge > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_labeled_1pdg_1edge_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cs::labeled_pdg_edge > *arg1 = (std::vector< cs::labeled_pdg_edge > *) 0 ;
  std::vector< std::pair< cs::point,cs::pdg_edge_label > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cs::labeled_pdg_edge > **)&jarg1; 
  arg2 = *(std::vector< std::pair< cs::point,cs::pdg_edge_label > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< cs::point,cs::pdg_edge_label > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< std::pair< cs::point,cs::pdg_edge_label > >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_labeled_1pdg_1edge_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cs::labeled_pdg_edge > *arg1 = (std::vector< cs::labeled_pdg_edge > *) 0 ;
  int arg2 ;
  std::vector< std::pair< cs::point,cs::pdg_edge_label > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::labeled_pdg_edge > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::pair< cs::point,cs::pdg_edge_label > >::value_type *) &std_vector_Sl_cs_labeled_pdg_edge_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< std::pair< cs::point,cs::pdg_edge_label > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_labeled_1pdg_1edge_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cs::labeled_pdg_edge > *arg1 = (std::vector< cs::labeled_pdg_edge > *) 0 ;
  int arg2 ;
  std::vector< std::pair< cs::point,cs::pdg_edge_label > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cs::labeled_pdg_edge > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::pair< cs::point,cs::pdg_edge_label > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< cs::point,cs::pdg_edge_label > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_cs_labeled_pdg_edge_Sg__set(arg1,arg2,(std::pair< cs::point,cs::pdg_edge_label > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1labeled_1pdg_1edge_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cs::labeled_pdg_edge > *arg1 = (std::vector< cs::labeled_pdg_edge > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cs::labeled_pdg_edge > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1labeled_1pdg_1edge_1set_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::set_iterator_policy< cs::labeled_pdg_edge > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::labeled_pdg_edge > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::labeled_pdg_edge > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_labeled_1pdg_1edge_1set_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::labeled_pdg_edge > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::labeled_pdg_edge > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::labeled_pdg_edge > > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::set_iterator_policy< cs::labeled_pdg_edge > > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_labeled_1pdg_1edge_1set_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::labeled_pdg_edge > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::labeled_pdg_edge > > *) 0 ;
  SwigValueWrapper< std::pair< cs::point,cs::pdg_edge_label > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::labeled_pdg_edge > > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::set_iterator_policy< cs::labeled_pdg_edge > > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::set_iterator_policy< std::pair< cs::point,cs::pdg_edge_label > >::key **)&jresult = new cs::set_iterator_policy< std::pair< cs::point,cs::pdg_edge_label > >::key((const cs::set_iterator_policy< std::pair< cs::point,cs::pdg_edge_label > >::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_labeled_1pdg_1edge_1set_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::labeled_pdg_edge > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::labeled_pdg_edge > > *) 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::labeled_pdg_edge > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::labeled_pdg_edge > > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::labeled_pdg_edge > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::set_iterator_policy< cs::labeled_pdg_edge > > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::set_iterator_policy< cs::labeled_pdg_edge > > const *)arg1)->operator ==((cs::iterator_adapter< cs::set_iterator_policy< cs::labeled_pdg_edge > > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_labeled_1pdg_1edge_1set_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::set_iterator_policy< cs::labeled_pdg_edge > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::labeled_pdg_edge > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::labeled_pdg_edge > > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_labeled_1pdg_1edge_1set_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::labeled_pdg_edge > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::labeled_pdg_edge > > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::labeled_pdg_edge > > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::set_iterator_policy< cs::labeled_pdg_edge > > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_labeled_1pdg_1edge_1set_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::labeled_pdg_edge > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::labeled_pdg_edge > > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::labeled_pdg_edge > > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::set_iterator_policy< cs::labeled_pdg_edge > > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1pdg_1edge_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cs::pdg_edge > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< cs::pdg_edge > *)new std::vector< cs::pdg_edge >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::pdg_edge > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::pdg_edge > *arg1 = (std::vector< cs::pdg_edge > *) 0 ;
  std::vector< std::pair< cs::point,cs::pdg_edge_kind > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::pdg_edge > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::pdg_edge > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::pdg_edge > *arg1 = (std::vector< cs::pdg_edge > *) 0 ;
  std::vector< std::pair< cs::point,cs::pdg_edge_kind > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::pdg_edge > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::pdg_edge > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cs::pdg_edge > *arg1 = (std::vector< cs::pdg_edge > *) 0 ;
  std::vector< std::pair< cs::point,cs::pdg_edge_kind > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::pdg_edge > **)&jarg1; 
  arg2 = (std::vector< std::pair< cs::point,cs::pdg_edge_kind > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cs::pdg_edge > *arg1 = (std::vector< cs::pdg_edge > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::pdg_edge > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< cs::pdg_edge > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cs::pdg_edge > *arg1 = (std::vector< cs::pdg_edge > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::pdg_edge > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cs::pdg_edge > *arg1 = (std::vector< cs::pdg_edge > *) 0 ;
  std::vector< std::pair< cs::point,cs::pdg_edge_kind > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cs::pdg_edge > **)&jarg1; 
  arg2 = *(std::vector< std::pair< cs::point,cs::pdg_edge_kind > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< cs::point,cs::pdg_edge_kind > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< std::pair< cs::point,cs::pdg_edge_kind > >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cs::pdg_edge > *arg1 = (std::vector< cs::pdg_edge > *) 0 ;
  int arg2 ;
  std::vector< std::pair< cs::point,cs::pdg_edge_kind > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::pdg_edge > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::pair< cs::point,cs::pdg_edge_kind > >::value_type *) &std_vector_Sl_cs_pdg_edge_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< std::pair< cs::point,cs::pdg_edge_kind > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cs::pdg_edge > *arg1 = (std::vector< cs::pdg_edge > *) 0 ;
  int arg2 ;
  std::vector< std::pair< cs::point,cs::pdg_edge_kind > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cs::pdg_edge > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::pair< cs::point,cs::pdg_edge_kind > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< cs::point,cs::pdg_edge_kind > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_cs_pdg_edge_Sg__set(arg1,arg2,(std::pair< cs::point,cs::pdg_edge_kind > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1pdg_1edge_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cs::pdg_edge > *arg1 = (std::vector< cs::pdg_edge > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cs::pdg_edge > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1pdg_1edge_1set_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::set_iterator_policy< cs::pdg_edge > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::pdg_edge > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::pdg_edge > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1set_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::pdg_edge > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::pdg_edge > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::pdg_edge > > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::set_iterator_policy< cs::pdg_edge > > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1set_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::pdg_edge > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::pdg_edge > > *) 0 ;
  SwigValueWrapper< std::pair< cs::point,cs::pdg_edge_kind > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::pdg_edge > > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::set_iterator_policy< cs::pdg_edge > > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::set_iterator_policy< std::pair< cs::point,cs::pdg_edge_kind > >::key **)&jresult = new cs::set_iterator_policy< std::pair< cs::point,cs::pdg_edge_kind > >::key((const cs::set_iterator_policy< std::pair< cs::point,cs::pdg_edge_kind > >::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1set_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::pdg_edge > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::pdg_edge > > *) 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::pdg_edge > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::pdg_edge > > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::pdg_edge > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::set_iterator_policy< cs::pdg_edge > > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::set_iterator_policy< cs::pdg_edge > > const *)arg1)->operator ==((cs::iterator_adapter< cs::set_iterator_policy< cs::pdg_edge > > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1set_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::set_iterator_policy< cs::pdg_edge > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::pdg_edge > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::pdg_edge > > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1set_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::pdg_edge > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::pdg_edge > > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::pdg_edge > > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::set_iterator_policy< cs::pdg_edge > > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1set_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::set_iterator_policy< cs::pdg_edge > > *arg1 = (cs::iterator_adapter< cs::set_iterator_policy< cs::pdg_edge > > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::set_iterator_policy< cs::pdg_edge > > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::set_iterator_policy< cs::pdg_edge > > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1ast_1field_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cs::ast_field > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< cs::ast_field > *)new std::vector< cs::ast_field >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::ast_field > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::ast_field > *arg1 = (std::vector< cs::ast_field > *) 0 ;
  std::vector< cs::ast_field >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::ast_field > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::ast_field > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::ast_field > *arg1 = (std::vector< cs::ast_field > *) 0 ;
  std::vector< cs::ast_field >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::ast_field > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::ast_field > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cs::ast_field > *arg1 = (std::vector< cs::ast_field > *) 0 ;
  std::vector< cs::ast_field >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::ast_field > **)&jarg1; 
  arg2 = (std::vector< cs::ast_field >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cs::ast_field > *arg1 = (std::vector< cs::ast_field > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::ast_field > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< cs::ast_field > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cs::ast_field > *arg1 = (std::vector< cs::ast_field > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::ast_field > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cs::ast_field > *arg1 = (std::vector< cs::ast_field > *) 0 ;
  std::vector< cs::ast_field >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cs::ast_field > **)&jarg1; 
  arg2 = *(std::vector< cs::ast_field >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::ast_field >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< cs::ast_field >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cs::ast_field > *arg1 = (std::vector< cs::ast_field > *) 0 ;
  int arg2 ;
  std::vector< cs::ast_field >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::ast_field > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< cs::ast_field >::value_type *) &std_vector_Sl_cs_ast_field_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::ast_field >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cs::ast_field > *arg1 = (std::vector< cs::ast_field > *) 0 ;
  int arg2 ;
  std::vector< cs::ast_field >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cs::ast_field > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< cs::ast_field >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::ast_field >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_cs_ast_field_Sg__set(arg1,arg2,(cs::ast_field const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1ast_1field_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cs::ast_field > *arg1 = (std::vector< cs::ast_field > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cs::ast_field > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1string_1ast_1field_1pair_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::string arg1 ;
  SwigValueWrapper< cs::ast_field > arg2 ;
  cs::ast_field *argp2 ;
  std::pair< std::string,cs::ast_field > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  argp2 = *(cs::ast_field **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_field");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (std::pair< std::string,cs::ast_field > *)new std::pair< std::string,cs::ast_field >(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< std::string,cs::ast_field > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1string_1ast_1field_1pair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< std::string,cs::ast_field > *arg1 = 0 ;
  std::pair< std::string,cs::ast_field > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,cs::ast_field > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< std::string,cs::ast_field > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< std::string,cs::ast_field > *)new std::pair< std::string,cs::ast_field >((std::pair< std::string,cs::ast_field > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< std::string,cs::ast_field > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_string_1ast_1field_1pair_1get_1first(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::pair< std::string,cs::ast_field > *arg1 = (std::pair< std::string,cs::ast_field > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,cs::ast_field > **)&jarg1; 
  {
    try {
      result = (std::string *) &std_pair_Sl_std_string_Sc_cs_ast_field_Sg__get_first(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_string_1ast_1field_1pair_1get_1second(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< std::string,cs::ast_field > *arg1 = (std::pair< std::string,cs::ast_field > *) 0 ;
  cs::ast_field *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,cs::ast_field > **)&jarg1; 
  {
    try {
      result = (cs::ast_field *) &std_pair_Sl_std_string_Sc_cs_ast_field_Sg__get_second(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_field **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1string_1ast_1field_1pair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< std::string,cs::ast_field > *arg1 = (std::pair< std::string,cs::ast_field > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< std::string,cs::ast_field > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1ast_1binding_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cs::string_ast_field_pair > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< cs::string_ast_field_pair > *)new std::vector< cs::string_ast_field_pair >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::string_ast_field_pair > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1binding_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::string_ast_field_pair > *arg1 = (std::vector< cs::string_ast_field_pair > *) 0 ;
  std::vector< std::pair< std::string,cs::ast_field > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::string_ast_field_pair > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::string_ast_field_pair > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1binding_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::string_ast_field_pair > *arg1 = (std::vector< cs::string_ast_field_pair > *) 0 ;
  std::vector< std::pair< std::string,cs::ast_field > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::string_ast_field_pair > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::string_ast_field_pair > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_ast_1binding_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cs::string_ast_field_pair > *arg1 = (std::vector< cs::string_ast_field_pair > *) 0 ;
  std::vector< std::pair< std::string,cs::ast_field > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::string_ast_field_pair > **)&jarg1; 
  arg2 = (std::vector< std::pair< std::string,cs::ast_field > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_ast_1binding_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cs::string_ast_field_pair > *arg1 = (std::vector< cs::string_ast_field_pair > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::string_ast_field_pair > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< cs::string_ast_field_pair > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_ast_1binding_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cs::string_ast_field_pair > *arg1 = (std::vector< cs::string_ast_field_pair > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::string_ast_field_pair > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_ast_1binding_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cs::string_ast_field_pair > *arg1 = (std::vector< cs::string_ast_field_pair > *) 0 ;
  std::vector< std::pair< std::string,cs::ast_field > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cs::string_ast_field_pair > **)&jarg1; 
  arg2 = *(std::vector< std::pair< std::string,cs::ast_field > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< std::string,cs::ast_field > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< std::pair< std::string,cs::ast_field > >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1binding_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cs::string_ast_field_pair > *arg1 = (std::vector< cs::string_ast_field_pair > *) 0 ;
  int arg2 ;
  std::vector< std::pair< std::string,cs::ast_field > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::string_ast_field_pair > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::pair< std::string,cs::ast_field > >::value_type *) &std_vector_Sl_cs_string_ast_field_pair_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< std::pair< std::string,cs::ast_field > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_ast_1binding_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cs::string_ast_field_pair > *arg1 = (std::vector< cs::string_ast_field_pair > *) 0 ;
  int arg2 ;
  std::vector< std::pair< std::string,cs::ast_field > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cs::string_ast_field_pair > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::pair< std::string,cs::ast_field > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< std::string,cs::ast_field > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_cs_string_ast_field_pair_Sg__set(arg1,arg2,(std::pair< std::string,cs::ast_field > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1ast_1binding_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cs::string_ast_field_pair > *arg1 = (std::vector< cs::string_ast_field_pair > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cs::string_ast_field_pair > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1ast_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cs::ast > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< cs::ast > *)new std::vector< cs::ast >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::ast > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::ast > *arg1 = (std::vector< cs::ast > *) 0 ;
  std::vector< cs::ast >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::ast > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::ast > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::ast > *arg1 = (std::vector< cs::ast > *) 0 ;
  std::vector< cs::ast >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::ast > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::ast > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_ast_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cs::ast > *arg1 = (std::vector< cs::ast > *) 0 ;
  std::vector< cs::ast >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::ast > **)&jarg1; 
  arg2 = (std::vector< cs::ast >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_ast_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cs::ast > *arg1 = (std::vector< cs::ast > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::ast > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< cs::ast > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_ast_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cs::ast > *arg1 = (std::vector< cs::ast > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::ast > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_ast_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cs::ast > *arg1 = (std::vector< cs::ast > *) 0 ;
  std::vector< cs::ast >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cs::ast > **)&jarg1; 
  arg2 = *(std::vector< cs::ast >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::ast >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< cs::ast >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cs::ast > *arg1 = (std::vector< cs::ast > *) 0 ;
  int arg2 ;
  std::vector< cs::ast >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::ast > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< cs::ast >::value_type *) &std_vector_Sl_cs_ast_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::ast >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_ast_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cs::ast > *arg1 = (std::vector< cs::ast > *) 0 ;
  int arg2 ;
  std::vector< cs::ast >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cs::ast > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< cs::ast >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::ast >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_cs_ast_Sg__set(arg1,arg2,(cs::ast const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1ast_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cs::ast > *arg1 = (std::vector< cs::ast > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cs::ast > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1ast_1class_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cs::ast_class > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< cs::ast_class > *)new std::vector< cs::ast_class >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::ast_class > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::ast_class > *arg1 = (std::vector< cs::ast_class > *) 0 ;
  std::vector< cs::ast_class >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::ast_class > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::ast_class > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::ast_class > *arg1 = (std::vector< cs::ast_class > *) 0 ;
  std::vector< cs::ast_class >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::ast_class > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::ast_class > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cs::ast_class > *arg1 = (std::vector< cs::ast_class > *) 0 ;
  std::vector< cs::ast_class >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::ast_class > **)&jarg1; 
  arg2 = (std::vector< cs::ast_class >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cs::ast_class > *arg1 = (std::vector< cs::ast_class > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::ast_class > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< cs::ast_class > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cs::ast_class > *arg1 = (std::vector< cs::ast_class > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::ast_class > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cs::ast_class > *arg1 = (std::vector< cs::ast_class > *) 0 ;
  std::vector< cs::ast_class >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cs::ast_class > **)&jarg1; 
  arg2 = *(std::vector< cs::ast_class >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::ast_class >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< cs::ast_class >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cs::ast_class > *arg1 = (std::vector< cs::ast_class > *) 0 ;
  int arg2 ;
  std::vector< cs::ast_class >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::ast_class > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< cs::ast_class >::value_type *) &std_vector_Sl_cs_ast_class_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::ast_class >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cs::ast_class > *arg1 = (std::vector< cs::ast_class > *) 0 ;
  int arg2 ;
  std::vector< cs::ast_class >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cs::ast_class > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< cs::ast_class >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::ast_class >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_cs_ast_class_Sg__set(arg1,arg2,(cs::ast_class const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1ast_1class_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cs::ast_class > *arg1 = (std::vector< cs::ast_class > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cs::ast_class > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1predsucc_1filter_1pair_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::predsucc_filter_directive arg1 ;
  cs::pdg_edge_kind arg2 ;
  cs::predsucc_filter_directive *argp1 ;
  cs::pdg_edge_kind *argp2 ;
  std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(cs::predsucc_filter_directive **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::predsucc_filter_directive");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(cs::pdg_edge_kind **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::pdg_edge_kind");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind > *)new std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind >(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1predsucc_1filter_1pair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind > *arg1 = 0 ;
  std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind > *)new std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind >((std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_predsucc_1filter_1pair_1get_1first(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind > *arg1 = (std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind > *) 0 ;
  cs::predsucc_filter_directive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind > **)&jarg1; 
  {
    try {
      result = (cs::predsucc_filter_directive *) &std_pair_Sl_cs_predsucc_filter_directive_Sc_cs_pdg_edge_kind_Sg__get_first(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::predsucc_filter_directive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_predsucc_1filter_1pair_1get_1second(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind > *arg1 = (std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind > *) 0 ;
  cs::pdg_edge_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind > **)&jarg1; 
  {
    try {
      result = (cs::pdg_edge_kind *) &std_pair_Sl_cs_predsucc_filter_directive_Sc_cs_pdg_edge_kind_Sg__get_second(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::pdg_edge_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1predsucc_1filter_1pair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind > *arg1 = (std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1filtered_1predsucc_1return_1pair_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::point > arg1 ;
  bool arg2 ;
  cs::mutable_set< cs::point > *argp1 ;
  std::pair< cs::point_set,bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(cs::mutable_set< cs::point > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::mutable_set< cs::point >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (std::pair< cs::point_set,bool > *)new std::pair< cs::point_set,bool >(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::point_set,bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1filtered_1predsucc_1return_1pair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::point_set,bool > *arg1 = 0 ;
  std::pair< cs::point_set,bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::point_set,bool > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< cs::point_set,bool > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< cs::point_set,bool > *)new std::pair< cs::point_set,bool >((std::pair< cs::point_set,bool > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::point_set,bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_filtered_1predsucc_1return_1pair_1get_1first(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::point_set,bool > *arg1 = (std::pair< cs::point_set,bool > *) 0 ;
  cs::mutable_set< cs::point > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::point_set,bool > **)&jarg1; 
  {
    try {
      result = (cs::mutable_set< cs::point > *) &std_pair_Sl_cs_point_set_Sc_bool_Sg__get_first(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::point > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_filtered_1predsucc_1return_1pair_1get_1second(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::pair< cs::point_set,bool > *arg1 = (std::pair< cs::point_set,bool > *) 0 ;
  bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::point_set,bool > **)&jarg1; 
  {
    try {
      result = (bool *) &std_pair_Sl_cs_point_set_Sc_bool_Sg__get_second(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1filtered_1predsucc_1return_1pair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< cs::point_set,bool > *arg1 = (std::pair< cs::point_set,bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< cs::point_set,bool > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1interest_1set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::string arg1 ;
  cs::mutable_set< cs::point > arg2 ;
  cs::mutable_set< cs::point > *argp2 ;
  std::pair< std::string,cs::point_set > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  argp2 = *(cs::mutable_set< cs::point > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::mutable_set< cs::point >");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (std::pair< std::string,cs::point_set > *)new std::pair< std::string,cs::point_set >(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< std::string,cs::point_set > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1interest_1set_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< std::string,cs::point_set > *arg1 = 0 ;
  std::pair< std::string,cs::point_set > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,cs::point_set > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< std::string,cs::point_set > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< std::string,cs::point_set > *)new std::pair< std::string,cs::point_set >((std::pair< std::string,cs::point_set > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< std::string,cs::point_set > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_interest_1set_1get_1first(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::pair< std::string,cs::point_set > *arg1 = (std::pair< std::string,cs::point_set > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,cs::point_set > **)&jarg1; 
  {
    try {
      result = (std::string *) &std_pair_Sl_std_string_Sc_cs_point_set_Sg__get_first(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_interest_1set_1get_1second(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< std::string,cs::point_set > *arg1 = (std::pair< std::string,cs::point_set > *) 0 ;
  cs::mutable_set< cs::point > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,cs::point_set > **)&jarg1; 
  {
    try {
      result = (cs::mutable_set< cs::point > *) &std_pair_Sl_std_string_Sc_cs_point_set_Sg__get_second(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::point > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1interest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< std::string,cs::point_set > *arg1 = (std::pair< std::string,cs::point_set > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< std::string,cs::point_set > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1interest_1set_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cs::interest_set > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< cs::interest_set > *)new std::vector< cs::interest_set >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::interest_set > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_interest_1set_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::interest_set > *arg1 = (std::vector< cs::interest_set > *) 0 ;
  std::vector< std::pair< std::string,cs::mutable_set< cs::point > > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::interest_set > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::interest_set > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_interest_1set_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::interest_set > *arg1 = (std::vector< cs::interest_set > *) 0 ;
  std::vector< std::pair< std::string,cs::mutable_set< cs::point > > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::interest_set > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::interest_set > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_interest_1set_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cs::interest_set > *arg1 = (std::vector< cs::interest_set > *) 0 ;
  std::vector< std::pair< std::string,cs::mutable_set< cs::point > > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::interest_set > **)&jarg1; 
  arg2 = (std::vector< std::pair< std::string,cs::mutable_set< cs::point > > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_interest_1set_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cs::interest_set > *arg1 = (std::vector< cs::interest_set > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::interest_set > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< cs::interest_set > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_interest_1set_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cs::interest_set > *arg1 = (std::vector< cs::interest_set > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::interest_set > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_interest_1set_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cs::interest_set > *arg1 = (std::vector< cs::interest_set > *) 0 ;
  std::vector< std::pair< std::string,cs::mutable_set< cs::point > > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cs::interest_set > **)&jarg1; 
  arg2 = *(std::vector< std::pair< std::string,cs::mutable_set< cs::point > > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< std::string,cs::mutable_set< cs::point > > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< std::pair< std::string,cs::mutable_set< cs::point > > >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_interest_1set_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cs::interest_set > *arg1 = (std::vector< cs::interest_set > *) 0 ;
  int arg2 ;
  std::vector< std::pair< std::string,cs::point_set > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::interest_set > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::pair< std::string,cs::point_set > >::value_type *) &std_vector_Sl_cs_interest_set_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< std::pair< std::string,cs::point_set > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_interest_1set_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cs::interest_set > *arg1 = (std::vector< cs::interest_set > *) 0 ;
  int arg2 ;
  std::vector< std::pair< std::string,cs::mutable_set< cs::point > > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cs::interest_set > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::pair< std::string,cs::mutable_set< cs::point > > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< std::string,cs::mutable_set< cs::point > > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_cs_interest_set_Sg__set(arg1,arg2,(std::pair< std::string,cs::mutable_set< cs::point > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1interest_1set_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cs::interest_set > *arg1 = (std::vector< cs::interest_set > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cs::interest_set > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1compunit_1procedure_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::compunit_procedure_iterator_policy > *arg1 = (cs::iterator_adapter< cs::compunit_procedure_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::compunit_procedure_iterator_policy > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_compunit_1procedure_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::compunit_procedure_iterator_policy > *arg1 = (cs::iterator_adapter< cs::compunit_procedure_iterator_policy > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::compunit_procedure_iterator_policy > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::compunit_procedure_iterator_policy > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1procedure_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::compunit_procedure_iterator_policy > *arg1 = (cs::iterator_adapter< cs::compunit_procedure_iterator_policy > *) 0 ;
  SwigValueWrapper< cs::procedure > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::compunit_procedure_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::compunit_procedure_iterator_policy > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::compunit_procedure_iterator_policy::key **)&jresult = new cs::compunit_procedure_iterator_policy::key((const cs::compunit_procedure_iterator_policy::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_compunit_1procedure_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::compunit_procedure_iterator_policy > *arg1 = (cs::iterator_adapter< cs::compunit_procedure_iterator_policy > *) 0 ;
  cs::iterator_adapter< cs::compunit_procedure_iterator_policy > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::compunit_procedure_iterator_policy > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::compunit_procedure_iterator_policy > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::compunit_procedure_iterator_policy > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::compunit_procedure_iterator_policy > const *)arg1)->operator ==((cs::iterator_adapter< cs::compunit_procedure_iterator_policy > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_compunit_1procedure_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::compunit_procedure_iterator_policy > *arg1 = (cs::iterator_adapter< cs::compunit_procedure_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::compunit_procedure_iterator_policy > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_compunit_1procedure_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::compunit_procedure_iterator_policy > *arg1 = (cs::iterator_adapter< cs::compunit_procedure_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::compunit_procedure_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::compunit_procedure_iterator_policy > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_compunit_1procedure_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::compunit_procedure_iterator_policy > *arg1 = (cs::iterator_adapter< cs::compunit_procedure_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::compunit_procedure_iterator_policy > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::compunit_procedure_iterator_policy > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1compunit_1global_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::compunit_global_iterator_policy > *arg1 = (cs::iterator_adapter< cs::compunit_global_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::compunit_global_iterator_policy > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_compunit_1global_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::compunit_global_iterator_policy > *arg1 = (cs::iterator_adapter< cs::compunit_global_iterator_policy > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::compunit_global_iterator_policy > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::compunit_global_iterator_policy > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1global_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::compunit_global_iterator_policy > *arg1 = (cs::iterator_adapter< cs::compunit_global_iterator_policy > *) 0 ;
  SwigValueWrapper< cs::symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::compunit_global_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::compunit_global_iterator_policy > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::compunit_global_iterator_policy::key **)&jresult = new cs::compunit_global_iterator_policy::key((const cs::compunit_global_iterator_policy::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_compunit_1global_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::compunit_global_iterator_policy > *arg1 = (cs::iterator_adapter< cs::compunit_global_iterator_policy > *) 0 ;
  cs::iterator_adapter< cs::compunit_global_iterator_policy > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::compunit_global_iterator_policy > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::compunit_global_iterator_policy > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::compunit_global_iterator_policy > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::compunit_global_iterator_policy > const *)arg1)->operator ==((cs::iterator_adapter< cs::compunit_global_iterator_policy > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_compunit_1global_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::compunit_global_iterator_policy > *arg1 = (cs::iterator_adapter< cs::compunit_global_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::compunit_global_iterator_policy > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_compunit_1global_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::compunit_global_iterator_policy > *arg1 = (cs::iterator_adapter< cs::compunit_global_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::compunit_global_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::compunit_global_iterator_policy > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_compunit_1global_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::compunit_global_iterator_policy > *arg1 = (cs::iterator_adapter< cs::compunit_global_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::compunit_global_iterator_policy > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::compunit_global_iterator_policy > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1sfile_1instance_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::sfile_instance_iterator_policy > *arg1 = (cs::iterator_adapter< cs::sfile_instance_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::sfile_instance_iterator_policy > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_sfile_1instance_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::sfile_instance_iterator_policy > *arg1 = (cs::iterator_adapter< cs::sfile_instance_iterator_policy > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::sfile_instance_iterator_policy > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::sfile_instance_iterator_policy > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1instance_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::sfile_instance_iterator_policy > *arg1 = (cs::iterator_adapter< cs::sfile_instance_iterator_policy > *) 0 ;
  SwigValueWrapper< cs::sfileinst > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::sfile_instance_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::sfile_instance_iterator_policy > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::sfile_instance_iterator_policy::key **)&jresult = new cs::sfile_instance_iterator_policy::key((const cs::sfile_instance_iterator_policy::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_sfile_1instance_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::sfile_instance_iterator_policy > *arg1 = (cs::iterator_adapter< cs::sfile_instance_iterator_policy > *) 0 ;
  cs::iterator_adapter< cs::sfile_instance_iterator_policy > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::sfile_instance_iterator_policy > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::sfile_instance_iterator_policy > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::sfile_instance_iterator_policy > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::sfile_instance_iterator_policy > const *)arg1)->operator ==((cs::iterator_adapter< cs::sfile_instance_iterator_policy > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_sfile_1instance_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::sfile_instance_iterator_policy > *arg1 = (cs::iterator_adapter< cs::sfile_instance_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::sfile_instance_iterator_policy > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_sfile_1instance_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::sfile_instance_iterator_policy > *arg1 = (cs::iterator_adapter< cs::sfile_instance_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::sfile_instance_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::sfile_instance_iterator_policy > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_sfile_1instance_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::sfile_instance_iterator_policy > *arg1 = (cs::iterator_adapter< cs::sfile_instance_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::sfile_instance_iterator_policy > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::sfile_instance_iterator_policy > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1sfileinst_1children_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::sfileinst_children_iterator_policy > *arg1 = (cs::iterator_adapter< cs::sfileinst_children_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::sfileinst_children_iterator_policy > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1children_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::sfileinst_children_iterator_policy > *arg1 = (cs::iterator_adapter< cs::sfileinst_children_iterator_policy > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::sfileinst_children_iterator_policy > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::sfileinst_children_iterator_policy > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1children_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::sfileinst_children_iterator_policy > *arg1 = (cs::iterator_adapter< cs::sfileinst_children_iterator_policy > *) 0 ;
  SwigValueWrapper< cs::sfileinst > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::sfileinst_children_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::sfileinst_children_iterator_policy > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::sfileinst_children_iterator_policy::key **)&jresult = new cs::sfileinst_children_iterator_policy::key((const cs::sfileinst_children_iterator_policy::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1children_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::sfileinst_children_iterator_policy > *arg1 = (cs::iterator_adapter< cs::sfileinst_children_iterator_policy > *) 0 ;
  cs::iterator_adapter< cs::sfileinst_children_iterator_policy > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::sfileinst_children_iterator_policy > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::sfileinst_children_iterator_policy > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::sfileinst_children_iterator_policy > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::sfileinst_children_iterator_policy > const *)arg1)->operator ==((cs::iterator_adapter< cs::sfileinst_children_iterator_policy > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1children_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::sfileinst_children_iterator_policy > *arg1 = (cs::iterator_adapter< cs::sfileinst_children_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::sfileinst_children_iterator_policy > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1children_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::sfileinst_children_iterator_policy > *arg1 = (cs::iterator_adapter< cs::sfileinst_children_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::sfileinst_children_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::sfileinst_children_iterator_policy > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1children_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::sfileinst_children_iterator_policy > *arg1 = (cs::iterator_adapter< cs::sfileinst_children_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::sfileinst_children_iterator_policy > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::sfileinst_children_iterator_policy > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1sfileinst_1color_1map_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::sfileinst_color_map_iterator_policy > *arg1 = (cs::iterator_adapter< cs::sfileinst_color_map_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::sfileinst_color_map_iterator_policy > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1color_1map_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::sfileinst_color_map_iterator_policy > *arg1 = (cs::iterator_adapter< cs::sfileinst_color_map_iterator_policy > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::sfileinst_color_map_iterator_policy > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::sfileinst_color_map_iterator_policy > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1color_1map_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::sfileinst_color_map_iterator_policy > *arg1 = (cs::iterator_adapter< cs::sfileinst_color_map_iterator_policy > *) 0 ;
  SwigValueWrapper< std::pair< std::pair< unsigned int,unsigned int >,std::pair< unsigned int,unsigned int > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::sfileinst_color_map_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::sfileinst_color_map_iterator_policy > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::sfileinst_color_map_iterator_policy::key **)&jresult = new cs::sfileinst_color_map_iterator_policy::key((const cs::sfileinst_color_map_iterator_policy::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1color_1map_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::sfileinst_color_map_iterator_policy > *arg1 = (cs::iterator_adapter< cs::sfileinst_color_map_iterator_policy > *) 0 ;
  cs::iterator_adapter< cs::sfileinst_color_map_iterator_policy > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::sfileinst_color_map_iterator_policy > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::sfileinst_color_map_iterator_policy > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::sfileinst_color_map_iterator_policy > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::sfileinst_color_map_iterator_policy > const *)arg1)->operator ==((cs::iterator_adapter< cs::sfileinst_color_map_iterator_policy > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1color_1map_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::sfileinst_color_map_iterator_policy > *arg1 = (cs::iterator_adapter< cs::sfileinst_color_map_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::sfileinst_color_map_iterator_policy > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1color_1map_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::sfileinst_color_map_iterator_policy > *arg1 = (cs::iterator_adapter< cs::sfileinst_color_map_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::sfileinst_color_map_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::sfileinst_color_map_iterator_policy > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1color_1map_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::sfileinst_color_map_iterator_policy > *arg1 = (cs::iterator_adapter< cs::sfileinst_color_map_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::sfileinst_color_map_iterator_policy > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::sfileinst_color_map_iterator_policy > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1project_1metric_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > *arg1 = (cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_project_1metric_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > *arg1 = (cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1metric_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > *arg1 = (cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > *) 0 ;
  SwigValueWrapper< cs::metric< cs::project > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::metric_iterator_policy< cs::project >::key **)&jresult = new cs::metric_iterator_policy< cs::project >::key((const cs::metric_iterator_policy< cs::project >::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_project_1metric_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > *arg1 = (cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > *) 0 ;
  cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > const *)arg1)->operator ==((cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_project_1metric_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > *arg1 = (cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_project_1metric_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > *arg1 = (cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_project_1metric_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > *arg1 = (cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1compunit_1metric_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > *arg1 = (cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_compunit_1metric_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > *arg1 = (cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1metric_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > *arg1 = (cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > *) 0 ;
  SwigValueWrapper< cs::metric< cs::compunit > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::metric_iterator_policy< cs::compunit >::key **)&jresult = new cs::metric_iterator_policy< cs::compunit >::key((const cs::metric_iterator_policy< cs::compunit >::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_compunit_1metric_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > *arg1 = (cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > *) 0 ;
  cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > const *)arg1)->operator ==((cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_compunit_1metric_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > *arg1 = (cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_compunit_1metric_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > *arg1 = (cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_compunit_1metric_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > *arg1 = (cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1sfile_1metric_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > *arg1 = (cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_sfile_1metric_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > *arg1 = (cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1metric_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > *arg1 = (cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > *) 0 ;
  SwigValueWrapper< cs::metric< cs::sfile > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::metric_iterator_policy< cs::sfile >::key **)&jresult = new cs::metric_iterator_policy< cs::sfile >::key((const cs::metric_iterator_policy< cs::sfile >::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_sfile_1metric_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > *arg1 = (cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > *) 0 ;
  cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > const *)arg1)->operator ==((cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_sfile_1metric_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > *arg1 = (cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_sfile_1metric_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > *arg1 = (cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_sfile_1metric_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > *arg1 = (cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1procedure_1metric_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > *arg1 = (cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_procedure_1metric_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > *arg1 = (cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1metric_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > *arg1 = (cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > *) 0 ;
  SwigValueWrapper< cs::metric< cs::procedure > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::metric_iterator_policy< cs::procedure >::key **)&jresult = new cs::metric_iterator_policy< cs::procedure >::key((const cs::metric_iterator_policy< cs::procedure >::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_procedure_1metric_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > *arg1 = (cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > *) 0 ;
  cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > const *)arg1)->operator ==((cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_procedure_1metric_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > *arg1 = (cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_procedure_1metric_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > *arg1 = (cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_procedure_1metric_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > *arg1 = (cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1amc_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::amc_iterator_policy > *arg1 = (cs::iterator_adapter< cs::amc_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::amc_iterator_policy > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_amc_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::amc_iterator_policy > *arg1 = (cs::iterator_adapter< cs::amc_iterator_policy > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::amc_iterator_policy > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::amc_iterator_policy > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_amc_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::amc_iterator_policy > *arg1 = (cs::iterator_adapter< cs::amc_iterator_policy > *) 0 ;
  SwigValueWrapper< std::pair< cs::symbol,cs::value_set > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::amc_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::amc_iterator_policy > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::amc_iterator_policy::key **)&jresult = new cs::amc_iterator_policy::key((const cs::amc_iterator_policy::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_amc_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::amc_iterator_policy > *arg1 = (cs::iterator_adapter< cs::amc_iterator_policy > *) 0 ;
  cs::iterator_adapter< cs::amc_iterator_policy > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::amc_iterator_policy > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::amc_iterator_policy > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::amc_iterator_policy > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::amc_iterator_policy > const *)arg1)->operator ==((cs::iterator_adapter< cs::amc_iterator_policy > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_amc_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::amc_iterator_policy > *arg1 = (cs::iterator_adapter< cs::amc_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::amc_iterator_policy > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_amc_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::amc_iterator_policy > *arg1 = (cs::iterator_adapter< cs::amc_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::amc_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::amc_iterator_policy > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_amc_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::amc_iterator_policy > *arg1 = (cs::iterator_adapter< cs::amc_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::amc_iterator_policy > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::amc_iterator_policy > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1amc_1context_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::iterator_adapter< cs::amc_context_iterator_policy > *arg1 = (cs::iterator_adapter< cs::amc_context_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::iterator_adapter< cs::amc_context_iterator_policy > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_amc_1context_1iterator_1at_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::amc_context_iterator_policy > *arg1 = (cs::iterator_adapter< cs::amc_context_iterator_policy > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::amc_context_iterator_policy > **)&jarg1; 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::amc_context_iterator_policy > const *)arg1)->at_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_amc_1context_1iterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::iterator_adapter< cs::amc_context_iterator_policy > *arg1 = (cs::iterator_adapter< cs::amc_context_iterator_policy > *) 0 ;
  SwigValueWrapper< std::pair< cs::calling_context,cs::amc > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::amc_context_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::amc_context_iterator_policy > const *)arg1)->operator *();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::amc_context_iterator_policy::key **)&jresult = new cs::amc_context_iterator_policy::key((const cs::amc_context_iterator_policy::key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_amc_1context_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::iterator_adapter< cs::amc_context_iterator_policy > *arg1 = (cs::iterator_adapter< cs::amc_context_iterator_policy > *) 0 ;
  cs::iterator_adapter< cs::amc_context_iterator_policy > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::iterator_adapter< cs::amc_context_iterator_policy > **)&jarg1; 
  arg2 = *(cs::iterator_adapter< cs::amc_context_iterator_policy > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::iterator_adapter< cs::amc_context_iterator_policy > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::iterator_adapter< cs::amc_context_iterator_policy > const *)arg1)->operator ==((cs::iterator_adapter< cs::amc_context_iterator_policy > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_amc_1context_1iterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::iterator_adapter< cs::amc_context_iterator_policy > *arg1 = (cs::iterator_adapter< cs::amc_context_iterator_policy > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::amc_context_iterator_policy > **)&jarg1; 
  {
    try {
      (arg1)->advance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_amc_1context_1iterator_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::amc_context_iterator_policy > *arg1 = (cs::iterator_adapter< cs::amc_context_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::amc_context_iterator_policy > **)&jarg1; 
  {
    try {
      result = ((cs::iterator_adapter< cs::amc_context_iterator_policy > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_amc_1context_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::iterator_adapter< cs::amc_context_iterator_policy > *arg1 = (cs::iterator_adapter< cs::amc_context_iterator_policy > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::iterator_adapter< cs::amc_context_iterator_policy > **)&jarg1; 
  result = ((cs::iterator_adapter< cs::amc_context_iterator_policy > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1amc_1valuation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::symbol > arg1 ;
  SwigValueWrapper< cs::value_set > arg2 ;
  cs::symbol *argp1 ;
  cs::value_set *argp2 ;
  std::pair< cs::symbol,cs::value_set > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(cs::symbol **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::symbol");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(cs::value_set **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::value_set");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (std::pair< cs::symbol,cs::value_set > *)new std::pair< cs::symbol,cs::value_set >(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::symbol,cs::value_set > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1amc_1valuation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::symbol,cs::value_set > *arg1 = 0 ;
  std::pair< cs::symbol,cs::value_set > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::symbol,cs::value_set > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< cs::symbol,cs::value_set > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< cs::symbol,cs::value_set > *)new std::pair< cs::symbol,cs::value_set >((std::pair< cs::symbol,cs::value_set > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::symbol,cs::value_set > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_amc_1valuation_1get_1first(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::symbol,cs::value_set > *arg1 = (std::pair< cs::symbol,cs::value_set > *) 0 ;
  cs::symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::symbol,cs::value_set > **)&jarg1; 
  {
    try {
      result = (cs::symbol *) &std_pair_Sl_cs_symbol_Sc_cs_value_set_Sg__get_first(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::symbol **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_amc_1valuation_1get_1second(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::symbol,cs::value_set > *arg1 = (std::pair< cs::symbol,cs::value_set > *) 0 ;
  cs::value_set *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::symbol,cs::value_set > **)&jarg1; 
  {
    try {
      result = (cs::value_set *) &std_pair_Sl_cs_symbol_Sc_cs_value_set_Sg__get_second(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::value_set **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1amc_1valuation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< cs::symbol,cs::value_set > *arg1 = (std::pair< cs::symbol,cs::value_set > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< cs::symbol,cs::value_set > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1amc_1context_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::calling_context > arg1 ;
  SwigValueWrapper< cs::amc > arg2 ;
  cs::calling_context *argp1 ;
  cs::amc *argp2 ;
  std::pair< cs::calling_context,cs::amc > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(cs::calling_context **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::calling_context");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(cs::amc **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::amc");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (std::pair< cs::calling_context,cs::amc > *)new std::pair< cs::calling_context,cs::amc >(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::calling_context,cs::amc > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1amc_1context_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::calling_context,cs::amc > *arg1 = 0 ;
  std::pair< cs::calling_context,cs::amc > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::calling_context,cs::amc > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< cs::calling_context,cs::amc > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< cs::calling_context,cs::amc > *)new std::pair< cs::calling_context,cs::amc >((std::pair< cs::calling_context,cs::amc > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::calling_context,cs::amc > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_amc_1context_1get_1first(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::calling_context,cs::amc > *arg1 = (std::pair< cs::calling_context,cs::amc > *) 0 ;
  cs::calling_context *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::calling_context,cs::amc > **)&jarg1; 
  {
    try {
      result = (cs::calling_context *) &std_pair_Sl_cs_calling_context_Sc_cs_amc_Sg__get_first(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::calling_context **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_amc_1context_1get_1second(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< cs::calling_context,cs::amc > *arg1 = (std::pair< cs::calling_context,cs::amc > *) 0 ;
  cs::amc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< cs::calling_context,cs::amc > **)&jarg1; 
  {
    try {
      result = (cs::amc *) &std_pair_Sl_cs_calling_context_Sc_cs_amc_Sg__get_second(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::amc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1amc_1context(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< cs::calling_context,cs::amc > *arg1 = (std::pair< cs::calling_context,cs::amc > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< cs::calling_context,cs::amc > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1procedure_1name_1to_1model_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cs::string_pair > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< cs::string_pair > *)new std::vector< cs::string_pair >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::string_pair > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1procedure_1name_1to_1model_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< cs::string_pair >::size_type arg1 ;
  std::vector< cs::string_pair > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< cs::string_pair >::size_type)jarg1; 
  {
    try {
      result = (std::vector< cs::string_pair > *)new std::vector< cs::string_pair >(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::string_pair > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1name_1to_1model_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::string_pair > *arg1 = (std::vector< cs::string_pair > *) 0 ;
  std::vector< cs::string_pair >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::string_pair > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::string_pair > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1name_1to_1model_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::string_pair > *arg1 = (std::vector< cs::string_pair > *) 0 ;
  std::vector< cs::string_pair >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::string_pair > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::string_pair > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_procedure_1name_1to_1model_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cs::string_pair > *arg1 = (std::vector< cs::string_pair > *) 0 ;
  std::vector< cs::string_pair >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::string_pair > **)&jarg1; 
  arg2 = (std::vector< cs::string_pair >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_procedure_1name_1to_1model_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cs::string_pair > *arg1 = (std::vector< cs::string_pair > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::string_pair > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< cs::string_pair > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_procedure_1name_1to_1model_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cs::string_pair > *arg1 = (std::vector< cs::string_pair > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::string_pair > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_procedure_1name_1to_1model_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cs::string_pair > *arg1 = (std::vector< cs::string_pair > *) 0 ;
  std::vector< cs::string_pair >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cs::string_pair > **)&jarg1; 
  arg2 = *(std::vector< cs::string_pair >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::string_pair >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< cs::string_pair >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1name_1to_1model_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cs::string_pair > *arg1 = (std::vector< cs::string_pair > *) 0 ;
  int arg2 ;
  std::vector< cs::string_pair >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::string_pair > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< cs::string_pair >::value_type *) &std_vector_Sl_cs_string_pair_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::string_pair >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_procedure_1name_1to_1model_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cs::string_pair > *arg1 = (std::vector< cs::string_pair > *) 0 ;
  int arg2 ;
  std::vector< cs::string_pair >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cs::string_pair > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< cs::string_pair >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::string_pair >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_cs_string_pair_Sg__set(arg1,arg2,(cs::string_pair const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1procedure_1name_1to_1model_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cs::string_pair > *arg1 = (std::vector< cs::string_pair > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cs::string_pair > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1ast_1family(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  cs::ast_family *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (cs::ast_family *)new cs::ast_family(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_family **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_ast_1family_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::ast_family *arg1 = (cs::ast_family *) 0 ;
  cs::ast_family *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::ast_family **)&jarg1; 
  arg2 = *(cs::ast_family **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::ast_family const & reference is null");
    return 0;
  } 
  result = (int)((cs::ast_family const *)arg1)->cmp((cs::ast_family const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_ast_1family_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::ast_family *arg1 = (cs::ast_family *) 0 ;
  cs::ast_family *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::ast_family **)&jarg1; 
  arg2 = *(cs::ast_family **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::ast_family const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::ast_family const *)arg1)->operator ==((cs::ast_family const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_ast_1family_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::ast_family *arg1 = (cs::ast_family *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_family **)&jarg1; 
  result = (int)((cs::ast_family const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1family_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast_family *arg1 = (cs::ast_family *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_family **)&jarg1; 
  {
    try {
      result = ((cs::ast_family const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1family_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast_family *arg1 = (cs::ast_family *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_family **)&jarg1; 
  result = ((cs::ast_family const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1family_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast_family *arg1 = (cs::ast_family *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_family **)&jarg1; 
  {
    try {
      result = ((cs::ast_family const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1family_1C_1NORMALIZED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_family *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_family *)&cs::ast_family::C_NORMALIZED;
  *(cs::ast_family **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1family_1C_1UNNORMALIZED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_family *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_family *)&cs::ast_family::C_UNNORMALIZED;
  *(cs::ast_family **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1ast_1family(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::ast_family *arg1 = (cs::ast_family *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::ast_family **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1ast_1class(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (cs::ast_class *)new cs::ast_class(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::ast_class *arg1 = (cs::ast_class *) 0 ;
  cs::ast_class *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::ast_class **)&jarg1; 
  arg2 = *(cs::ast_class **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::ast_class const & reference is null");
    return 0;
  } 
  result = (int)((cs::ast_class const *)arg1)->cmp((cs::ast_class const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::ast_class *arg1 = (cs::ast_class *) 0 ;
  cs::ast_class *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::ast_class **)&jarg1; 
  arg2 = *(cs::ast_class **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::ast_class const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::ast_class const *)arg1)->operator ==((cs::ast_class const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::ast_class *arg1 = (cs::ast_class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_class **)&jarg1; 
  result = (int)((cs::ast_class const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast_class *arg1 = (cs::ast_class *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_class **)&jarg1; 
  {
    try {
      result = ((cs::ast_class const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast_class *arg1 = (cs::ast_class *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_class **)&jarg1; 
  result = ((cs::ast_class const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1superclass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::ast_class *arg1 = (cs::ast_class *) 0 ;
  SwigValueWrapper< cs::ast_class > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_class **)&jarg1; 
  {
    try {
      result = ((cs::ast_class const *)arg1)->superclass();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_class **)&jresult = new cs::ast_class((const cs::ast_class &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1is_1subclass_1of(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::ast_class *arg1 = (cs::ast_class *) 0 ;
  SwigValueWrapper< cs::ast_class > arg2 ;
  cs::ast_class *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::ast_class **)&jarg1; 
  argp2 = *(cs::ast_class **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_class");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)(arg1)->is_subclass_of(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast_class *arg1 = (cs::ast_class *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_class **)&jarg1; 
  {
    try {
      result = ((cs::ast_class const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1AST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::AST;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ABSTRACT_1AST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ABSTRACT_AST;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ABSTRACT_1STATEMENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ABSTRACT_STATEMENT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ABSTRACT_1RVALUE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ABSTRACT_RVALUE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ABSTRACT_1LVALUE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ABSTRACT_LVALUE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ABSTRACT_1LOGICAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ABSTRACT_LOGICAL;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ABSTRACT_1BITWISE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ABSTRACT_BITWISE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ABSTRACT_1ARITHMETIC_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ABSTRACT_ARITHMETIC;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ABSTRACT_1LITERAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ABSTRACT_LITERAL;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ABSTRACT_1INTEGER_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ABSTRACT_INTEGER_VALUE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ABSTRACT_1FLOAT_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ABSTRACT_FLOAT_VALUE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ABSTRACT_1SIZEOF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ABSTRACT_SIZEOF;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ABSTRACT_1ALIGNOF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ABSTRACT_ALIGNOF;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ABSTRACT_1TYPEID_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ABSTRACT_TYPEID;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ABSTRACT_1INCDEC_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ABSTRACT_INCDEC;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ABSTRACT_1COMPOUND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ABSTRACT_COMPOUND;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ABSTRACT_1X_1EQUALS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ABSTRACT_X_EQUALS;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ABSTRACT_1ASM_1ENTRY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ABSTRACT_ASM_ENTRY;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ABSTRACT_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ABSTRACT_TYPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ABSTRACT_1CLASS_1STRUCT_1UNION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ABSTRACT_CLASS_STRUCT_UNION;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ABSTRACT_1CLASS_1ACCESS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ABSTRACT_CLASS_ACCESS;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1FILE_1INFO_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_FILE_INFO;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ABI_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ABI;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1BASE_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_BASE_TYPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ALIAS_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ALIAS_TYPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1EXPRS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_EXPRS;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1NORMALASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_NORMALASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1MULASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_MULASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1DIVASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_DIVASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1MODASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_MODASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ADDASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ADDASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1SUBASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_SUBASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1LEFTASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_LEFTASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1RIGHTASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_RIGHTASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ANDASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ANDASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ORASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ORASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1XORASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_XORASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1IFTHENELSEEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_IFTHENELSEEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1OREXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_OREXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ANDEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ANDEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1INCLUSIVEOR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_INCLUSIVEOR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1EXCLUSIVEOR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_EXCLUSIVEOR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1BITANDEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_BITANDEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1EQUALEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_EQUALEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1NOTEQUALEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_NOTEQUALEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1LESSEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_LESSEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1GREATEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_GREATEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1LESSEQUALEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_LESSEQUALEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1GREATEQUALEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_GREATEQUALEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1LEFTSHIFTEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_LEFTSHIFTEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1RIGHTSHIFTEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_RIGHTSHIFTEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ADDEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ADDEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1SUBEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_SUBEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1MULEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_MULEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1DIVEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_DIVEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1MODEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_MODEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1CASTEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_CASTEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1PREINCEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_PREINCEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1PREDECEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_PREDECEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1SIZEEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_SIZEEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1SIZETYPEEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_SIZETYPEEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ALIGNOFEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ALIGNOFEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ALIGNOFTYPEEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ALIGNOFTYPEEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ADDREXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ADDREXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1POINTEREXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_POINTEREXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1UNARYPLUSEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_UNARYPLUSEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1UNARYMINUSEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_UNARYMINUSEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1COMPLEMENTEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_COMPLEMENTEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1NOTEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_NOTEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ARRAYREF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ARRAYREF;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1STRUCTORUNIONREF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_STRUCTORUNIONREF;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1POINTERREF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_POINTERREF;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1POSTINCEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_POSTINCEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1POSTDECEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_POSTDECEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1TYPEIDEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_TYPEIDEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1TYPEIDTYPEEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_TYPEIDTYPEEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ASSUMEEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ASSUMEEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1NOEXCEPTEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_NOEXCEPTEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1INDIRECTFIELD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_INDIRECTFIELD;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1BLOCKASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_BLOCKASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ARRAYREFALL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ARRAYREFALL;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ADDRLABELEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ADDRLABELEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1THROWEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_THROWEXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1COMPLEX_1CONJ_1EXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_COMPLEX_CONJ_EXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1COMPLEX_1REAL_1PART_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_COMPLEX_REAL_PART;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1COMPLEX_1IMAG_1PART_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_COMPLEX_IMAG_PART;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ASMGENERICENTRY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ASMGENERICENTRY;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ASMGNUENTRY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ASMGNUENTRY;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ASMGNUOPERANDS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ASMGNUOPERANDS;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ASMGNUOPERAND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ASMGNUOPERAND;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1SUBPROGCALL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_SUBPROGCALL;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1INSTANCEOF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_INSTANCEOF;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1CSM_1FIELD_1EXISTS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_CSM_FIELD_EXISTS;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1STRING_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_STRING;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1INTEGER_1VALUE_132_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_INTEGER_VALUE_32;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1UINTEGER_1VALUE_132_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_UINTEGER_VALUE_32;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1INTEGER_1VALUE_164_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_INTEGER_VALUE_64;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1UINTEGER_1VALUE_164_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_UINTEGER_VALUE_64;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1INTEGER_1VALUE_1128_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_INTEGER_VALUE_128;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1UINTEGER_1VALUE_1128_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_UINTEGER_VALUE_128;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1FLOAT_1VALUE_132_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_FLOAT_VALUE_32;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1FLOAT_1VALUE_164_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_FLOAT_VALUE_64;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1FLOAT_1VALUE_196_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_FLOAT_VALUE_96;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1FLOAT_1VALUE_1128_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_FLOAT_VALUE_128;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1COMPLEX_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_COMPLEX_VALUE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1IMAGINARY_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_IMAGINARY_VALUE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1VARIABLE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_VARIABLE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ROUTINE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ROUTINE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1LABEL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_LABEL;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1FIELD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_FIELD;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1BASE_1CLASS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_BASE_CLASS;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1INTEGER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_INTEGER;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1BUILTIN_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_BUILTIN_TYPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1CSM_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_CSM_TYPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1CSM_1TYPE_1QUALIFIERS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_CSM_TYPE_QUALIFIERS;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1CODESURFER_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_CODESURFER_TYPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1FLOAT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_FLOAT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1FIXED_1POINT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_FIXED_POINT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1COMPLEX_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_COMPLEX;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1IMAGINARY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_IMAGINARY;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1VOID_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_VOID;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1POINTER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_POINTER;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ROUTINE_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ROUTINE_TYPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ARRAY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ARRAY;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1CLASS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_CLASS;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1STRUCT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_STRUCT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1UNION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_UNION;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1PTR_1TO_1MEMBER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_PTR_TO_MEMBER;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1TEMPLATE_1PARAM_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_TEMPLATE_PARAM;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1VECTOR_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_VECTOR_TYPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1ARGS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_ARGS;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1FULLCALL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_FULLCALL;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1RETURN_1VOID_1STMT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_RETURN_VOID_STMT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1RETURN_1WITH_1VALUE_1STMT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_RETURN_WITH_VALUE_STMT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1BASE_1CLASS_1ACCESS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_BASE_CLASS_ACCESS;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1DERIVED_1CLASS_1ACCESS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_DERIVED_CLASS_ACCESS;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1VIRTUAL_1BASE_1CLASS_1ACCESS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_VIRTUAL_BASE_CLASS_ACCESS;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1VIRTUAL_1DERIVED_1CLASS_1ACCESS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_VIRTUAL_DERIVED_CLASS_ACCESS;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1DESIGNATOR_1INIT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_DESIGNATOR_INIT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1AST_1LIST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_AST_LIST;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1INDICES_1LIST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_INDICES_LIST;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1INDEX_1RANGE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_INDEX_RANGE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1BUILTIN_1CALL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_BUILTIN_CALL;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1NC_1CSM_1NAMED_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::NC_CSM_NAMED_VALUE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1AST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_AST;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1SCOPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_SCOPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1EXECUTABLE_1SCOPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_EXECUTABLE_SCOPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1NON_1EXECUTABLE_1SCOPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_NON_EXECUTABLE_SCOPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_TYPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1CONSTANT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_CONSTANT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1EXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_EXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1STATEMENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_STATEMENT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1ENHANCED_1FOR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_ENHANCED_FOR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1INITIALIZER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_INITIALIZER;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1TEMPLATE_1ARG_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_TEMPLATE_ARG;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1TEMPLATE_1PARAMETER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_TEMPLATE_PARAMETER;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1PRAGMA_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_PRAGMA;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1CONSTRUCTOR_1INIT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_CONSTRUCTOR_INIT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1DYNAMIC_1INIT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_DYNAMIC_INIT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1GENERIC_1ARRAY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_GENERIC_ARRAY;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1CLASS_1STRUCT_1UNION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_CLASS_STRUCT_UNION;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1ADDRESS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_ADDRESS;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1CONSTANT_1TEMPLATE_1PARAM_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_CONSTANT_TEMPLATE_PARAM;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1OPERATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_OPERATION;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1NEGATE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_NEGATE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1CAST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_CAST;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1POST_1INCR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_POST_INCR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1POST_1DECR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_POST_DECR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1PRE_1INCR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_PRE_INCR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1PRE_1DECR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_PRE_DECR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1ADD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_ADD;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1SUBTRACT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_SUBTRACT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1MULTIPLY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_MULTIPLY;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1DIVIDE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_DIVIDE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1SHIFTL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_SHIFTL;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1SHIFTR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_SHIFTR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1EQ_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_EQ;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1NE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_NE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1GT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_GT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1LT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_LT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1GE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_GE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1LE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_LE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1GNU_1MIN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_GNU_MIN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1GNU_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_GNU_MAX;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1ASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_ASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1ADD_1ASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_ADD_ASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1SUBTRACT_1ASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_SUBTRACT_ASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1MULTIPLY_1ASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_MULTIPLY_ASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1DIVIDE_1ASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_DIVIDE_ASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1SHIFTL_1ASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_SHIFTL_ASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1SHIFTR_1ASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_SHIFTR_ASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1ARRAYREF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_ARRAYREF;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1DOT_1EXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_DOT_EXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1PM_1DOT_1EXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_PM_DOT_EXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1CALL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_CALL;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1SIZEOF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_SIZEOF;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1SIZEOF_1PACK_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_SIZEOF_PACK;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1ALIGNOF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_ALIGNOF;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1BUILTIN_1OPERATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_BUILTIN_OPERATION;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1GNU_1BUILTIN_1OPERATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_GNU_BUILTIN_OPERATION;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1MICROSOFT_1BUILTIN_1OPERATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_MICROSOFT_BUILTIN_OPERATION;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1TYPE_1TRAIT_1BUILTIN_1OPERATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_TYPE_TRAIT_BUILTIN_OPERATION;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1LITERAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_LITERAL;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1INTEGER_1LITERAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_INTEGER_LITERAL;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1FLOAT_1LITERAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_FLOAT_LITERAL;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ABSTRACT_1ATTRIBUTE_1ARG_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ABSTRACT_ATTRIBUTE_ARG;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1FILE_1INFO_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_FILE_INFO;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1SOURCE_1CORRESPONDENCE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_SOURCE_CORRESPONDENCE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ZERO_1INITIALIZER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ZERO_INITIALIZER;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1NO_1INITIALIZER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_NO_INITIALIZER;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1STATIC_1INITIALIZER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_STATIC_INITIALIZER;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1SOURCE_1FILE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_SOURCE_FILE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ERROR_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ERROR_VALUE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1INTEGER_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_INTEGER_VALUE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1FIXED_1POINT_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_FIXED_POINT_VALUE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1STRING_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_STRING;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1FLOAT_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_FLOAT_VALUE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1COMPLEX_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_COMPLEX_VALUE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IMAGINARY_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IMAGINARY_VALUE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ROUTINE_1ADDRESS_1CONSTANT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ROUTINE_ADDRESS_CONSTANT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1VARIABLE_1ADDRESS_1CONSTANT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_VARIABLE_ADDRESS_CONSTANT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1CONSTANT_1ADDRESS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_CONSTANT_ADDRESS;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1UUIDOF_1ADDRESS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_UUIDOF_ADDRESS;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1TYPEID_1ADDRESS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_TYPEID_ADDRESS;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1LABEL_1ADDRESS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_LABEL_ADDRESS;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1CONSTANT_1PTR_1TO_1MEMBER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_CONSTANT_PTR_TO_MEMBER;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1CONSTANT_1LABEL_1DIFFERENCE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_CONSTANT_LABEL_DIFFERENCE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1CONSTANT_1DYNAMIC_1INITIALIZATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_CONSTANT_DYNAMIC_INITIALIZATION;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1AGGREGATE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_AGGREGATE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1INIT_1REPEAT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_INIT_REPEAT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1CTP_1PARAM_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_CTP_PARAM;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1CTP_1EXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_CTP_EXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1CTP_1MEMBER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_CTP_MEMBER;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1CTP_1UNKNOWN_1FUNCTION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_CTP_UNKNOWN_FUNCTION;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1CTP_1CAST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_CTP_CAST;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1CTP_1ADDRESS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_CTP_ADDRESS;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1CTP_1SIZEOF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_CTP_SIZEOF;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1CTP_1ALIGNOF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_CTP_ALIGNOF;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1CTP_1UUIDOF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_CTP_UUIDOF;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1CTP_1TYPEID_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_CTP_TYPEID;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1CTP_1NOEXCEPT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_CTP_NOEXCEPT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1CTP_1TEMPLATE_1REF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_CTP_TEMPLATE_REF;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1CTP_1DESTRUCTOR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_CTP_DESTRUCTOR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1DESIGNATOR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_DESIGNATOR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PARAM_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PARAM_TYPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ERROR_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ERROR_TYPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1VOID_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_VOID;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1INTEGER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_INTEGER;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ENUM_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ENUM;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1FIXED_1POINT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_FIXED_POINT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1FLOAT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_FLOAT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IMAGINARY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IMAGINARY;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1COMPLEX_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_COMPLEX;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1POINTER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_POINTER;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ROUTINE_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ROUTINE_TYPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ARRAY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ARRAY;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1VLA_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_VLA;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1CLASS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_CLASS;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1STRUCT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_STRUCT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1UNION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_UNION;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1TYPEREF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_TYPEREF;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PTR_1TO_1MEMBER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PTR_TO_MEMBER;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1TEMPLATE_1PARAM_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_TEMPLATE_PARAM;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1VECTOR_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_VECTOR_TYPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1NULLPTR_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_NULLPTR_TYPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1CODESURFER_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_CODESURFER_TYPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1VARIABLE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_VARIABLE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PARAMETER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PARAMETER;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1HANDLER_1PARAMETER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_HANDLER_PARAMETER;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1THIS_1PARAMETER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_THIS_PARAMETER;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1FIELD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_FIELD;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1EXCEPTION_1SPECIFICATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_EXCEPTION_SPECIFICATION;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ROUTINE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ROUTINE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1LABEL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_LABEL;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ERROR_1EXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ERROR_EXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1INDIRECT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_INDIRECT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1UNARY_1PLUS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_UNARY_PLUS;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1NOT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_NOT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1GENERIC_1CAST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_GENERIC_CAST;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1BASE_1CLASS_1CAST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_BASE_CLASS_CAST;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1DERIVED_1CLASS_1CAST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_DERIVED_CLASS_CAST;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PM_1BASE_1CLASS_1CAST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PM_BASE_CLASS_CAST;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PM_1DERIVED_1CLASS_1CAST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PM_DERIVED_CLASS_CAST;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1LVALUE_1CAST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_LVALUE_CAST;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1LVALUE_1ADJUST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_LVALUE_ADJUST;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1CLASS_1RVALUE_1ADJUST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_CLASS_RVALUE_ADJUST;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1DYNAMIC_1CAST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_DYNAMIC_CAST;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1BOOL_1CAST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_BOOL_CAST;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ARRAY_1TO_1POINTER_1DECAY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ARRAY_TO_POINTER_DECAY;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1COMPLEMENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_COMPLEMENT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ASSUME_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ASSUME;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1NOEXCEPT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_NOEXCEPT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PADD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PADD;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PSUBTRACT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PSUBTRACT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1JMULTIPLY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_JMULTIPLY;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1JDIVIDE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_JDIVIDE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1FJADD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_FJADD;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1JFADD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_JFADD;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1FJSUBTRACT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_FJSUBTRACT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1JFSUBTRACT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_JFSUBTRACT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1XCONJ_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_XCONJ;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1REAL_1PART_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_REAL_PART;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IMAG_1PART_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IMAG_PART;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1REMAINDER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_REMAINDER;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PDIFF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PDIFF;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1BASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_BASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1REMAINDER_1ASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_REMAINDER_ASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PADD_1ASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PADD_ASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PSUBTRACT_1ASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PSUBTRACT_ASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1GENERIC_1SHIFTL_1ASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_GENERIC_SHIFTL_ASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1GENERIC_1SHIFTR_1ASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_GENERIC_SHIFTR_ASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1AND_1ASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_AND_ASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1OR_1ASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_OR_ASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1XOR_1ASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_XOR_ASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1SUBSCRIPT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_SUBSCRIPT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1CLI_1SUBSCRIPT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_CLI_SUBSCRIPT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1DOT_1FIELD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_DOT_FIELD;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1POINTS_1TO_1FIELD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_POINTS_TO_FIELD;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PM_1POINTS_1TO_1FIELD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PM_POINTS_TO_FIELD;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1POINTS_1TO_1PM_1FUNC_1PTR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_POINTS_TO_PM_FUNC_PTR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1DOT_1STATIC_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_DOT_STATIC;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1POINTS_1TO_1STATIC_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_POINTS_TO_STATIC;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1GENERIC_1SHIFTL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_GENERIC_SHIFTL;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1GENERIC_1SHIFTR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_GENERIC_SHIFTR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1AND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_AND;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1OR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_OR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1XOR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_XOR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1COMMA_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_COMMA;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1VIRTUAL_1FUNCTION_1PTR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_VIRTUAL_FUNCTION_PTR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1DOT_1VACUOUS_1DESTRUCTOR_1CALL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_DOT_VACUOUS_DESTRUCTOR_CALL;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1POINTS_1TO_1VACUOUS_1DESTRUCTOR_1CALL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_POINTS_TO_VACUOUS_DESTRUCTOR_CALL;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1LAND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_LAND;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1LOR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_LOR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1QUESTION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_QUESTION;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1FUNCTION_1CALL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_FUNCTION_CALL;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1VA_1START_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_VA_START;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1VA_1ARG_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_VA_ARG;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1VA_1END_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_VA_END;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1VA_1COPY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_VA_COPY;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1VA_1START_1SINGLE_1OPERAND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_VA_START_SINGLE_OPERAND;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1GENERIC_1NEGATE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_GENERIC_NEGATE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1GENERIC_1POST_1INCR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_GENERIC_POST_INCR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1GENERIC_1POST_1DECR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_GENERIC_POST_DECR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1GENERIC_1PRE_1INCR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_GENERIC_PRE_INCR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1GENERIC_1PRE_1DECR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_GENERIC_PRE_DECR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1GENERIC_1ADD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_GENERIC_ADD;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1GENERIC_1SUBTRACT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_GENERIC_SUBTRACT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1GENERIC_1MULTIPLY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_GENERIC_MULTIPLY;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1GENERIC_1DIVIDE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_GENERIC_DIVIDE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1GENERIC_1EQ_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_GENERIC_EQ;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1GENERIC_1NE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_GENERIC_NE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1GENERIC_1GT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_GENERIC_GT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1GENERIC_1LT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_GENERIC_LT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1GENERIC_1GE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_GENERIC_GE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1GENERIC_1LE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_GENERIC_LE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1GENERIC_1GNU_1MIN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_GENERIC_GNU_MIN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1GENERIC_1GNU_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_GENERIC_GNU_MAX;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1GENERIC_1ASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_GENERIC_ASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1GENERIC_1ADD_1ASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_GENERIC_ADD_ASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1GENERIC_1SUBTRACT_1ASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_GENERIC_SUBTRACT_ASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1GENERIC_1MULTIPLY_1ASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_GENERIC_MULTIPLY_ASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1GENERIC_1DIVIDE_1ASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_GENERIC_DIVIDE_ASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ADDRESS_1OP_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ADDRESS_OP;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PM_1DOT_1FIELD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PM_DOT_FIELD;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1DOT_1PM_1FUNC_1PTR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_DOT_PM_FUNC_PTR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1LVALUE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_LVALUE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1DOT_1MEMBER_1CALL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_DOT_MEMBER_CALL;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1POINTS_1TO_1MEMBER_1CALL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_POINTS_TO_MEMBER_CALL;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1DOT_1PM_1CALL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_DOT_PM_CALL;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1POINTS_1TO_1PM_1CALL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_POINTS_TO_PM_CALL;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1HANDLE_1TO_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_HANDLE_TO;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1BOX_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_BOX;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1HANDLE_1TO_1BOX_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_HANDLE_TO_BOX;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1UNBOX_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_UNBOX;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1UNBOX_1LVALUE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_UNBOX_LVALUE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1EXPR_1CONSTANT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_EXPR_CONSTANT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1EXPR_1VARIABLE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_EXPR_VARIABLE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1EXPR_1FIELD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_EXPR_FIELD;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1TEMP_1INIT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_TEMP_INIT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1NEW_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_NEW;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1DELETE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_DELETE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1LAMBDA_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_LAMBDA;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1GCNEW_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_GCNEW;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1THROW_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_THROW;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1CONDITION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_CONDITION;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1EXPR_1OBJECT_1LIFETIME_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_EXPR_OBJECT_LIFETIME;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1TYPEID_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_TYPEID;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1RUNTIME_1SIZEOF_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_RUNTIME_SIZEOF_TYPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1RUNTIME_1SIZEOF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_RUNTIME_SIZEOF;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1SIZEOF_1PACK_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_SIZEOF_PACK_TYPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1SIZEOF_1PACK_1EXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_SIZEOF_PACK_EXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1SIZEOF_1PACK_1TEMPLATE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_SIZEOF_PACK_TEMPLATE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ALIGNOF_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ALIGNOF_TYPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ALIGNOF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ALIGNOF;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ADDRESS_1OF_1ELLIPSIS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ADDRESS_OF_ELLIPSIS;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1LAMBDA_1CAPTURE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_LAMBDA_CAPTURE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1EXPR_1STMT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_EXPR_STMT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1REUSE_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_REUSE_VALUE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1EXPR_1ROUTINE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_EXPR_ROUTINE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1VLA_1DEALLOC_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_VLA_DEALLOC;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1EXPR_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_EXPR_TYPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1BUILTIN_1OFFSETOF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_BUILTIN_OFFSETOF;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1HAS_1ASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_HAS_ASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1HAS_1COPY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_HAS_COPY;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1HAS_1NOTHROW_1ASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_HAS_NOTHROW_ASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1HAS_1NOTHROW_1CONSTRUCTOR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_HAS_NOTHROW_CONSTRUCTOR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1HAS_1NOTHROW_1COPY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_HAS_NOTHROW_COPY;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1HAS_1TRIVIAL_1ASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_HAS_TRIVIAL_ASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1HAS_1TRIVIAL_1CONSTRUCTOR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_HAS_TRIVIAL_CONSTRUCTOR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1HAS_1TRIVIAL_1COPY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_HAS_TRIVIAL_COPY;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1HAS_1TRIVIAL_1DESTRUCTOR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_HAS_TRIVIAL_DESTRUCTOR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1HAS_1USER_1DESTRUCTOR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_HAS_USER_DESTRUCTOR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1HAS_1VIRTUAL_1DESTRUCTOR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_HAS_VIRTUAL_DESTRUCTOR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IS_1ABSTRACT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IS_ABSTRACT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IS_1BASE_1OF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IS_BASE_OF;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IS_1CLASS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IS_CLASS;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IS_1CONVERTIBLE_1TO_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IS_CONVERTIBLE_TO;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IS_1EMPTY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IS_EMPTY;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IS_1ENUM_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IS_ENUM;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IS_1POD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IS_POD;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IS_1POLYMORPHIC_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IS_POLYMORPHIC;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IS_1UNION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IS_UNION;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1TYPES_1COMPATIBLE_1P_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_TYPES_COMPATIBLE_P;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1INTADDR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_INTADDR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IS_1TRIVIAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IS_TRIVIAL;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IS_1STANDARD_1LAYOUT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IS_STANDARD_LAYOUT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IS_1TRIVIALLY_1COPYABLE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IS_TRIVIALLY_COPYABLE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IS_1LITERAL_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IS_LITERAL_TYPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1HAS_1TRIVIAL_1MOVE_1CONSTRUCTOR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_HAS_TRIVIAL_MOVE_CONSTRUCTOR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1HAS_1TRIVIAL_1MOVE_1ASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_HAS_TRIVIAL_MOVE_ASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1HAS_1NOTHROW_1MOVE_1ASSIGN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_HAS_NOTHROW_MOVE_ASSIGN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IS_1CONSTRUCTIBLE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IS_CONSTRUCTIBLE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IS_1NOTHROW_1CONSTRUCTIBLE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IS_NOTHROW_CONSTRUCTIBLE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1HAS_1FINALIZER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_HAS_FINALIZER;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IS_1DELEGATE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IS_DELEGATE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IS_1INTERFACE_1CLASS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IS_INTERFACE_CLASS;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IS_1REF_1ARRAY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IS_REF_ARRAY;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IS_1REF_1CLASS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IS_REF_CLASS;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IS_1SEALED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IS_SEALED;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IS_1SIMPLE_1VALUE_1CLASS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IS_SIMPLE_VALUE_CLASS;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IS_1VALUE_1CLASS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IS_VALUE_CLASS;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IS_1FINAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IS_FINAL;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IS_1TRIVIALLY_1CONSTRUCTIBLE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IS_TRIVIALLY_CONSTRUCTIBLE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IS_1DESTRUCTIBLE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IS_DESTRUCTIBLE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IS_1NOTHROW_1DESTRUCTIBLE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IS_NOTHROW_DESTRUCTIBLE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IS_1TRIVIALLY_1DESTRUCTIBLE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IS_TRIVIALLY_DESTRUCTIBLE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IS_1NOTHROW_1ASSIGNABLE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IS_NOTHROW_ASSIGNABLE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IS_1TRIVIALLY_1ASSIGNABLE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IS_TRIVIALLY_ASSIGNABLE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PARAM_1REF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PARAM_REF;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1BRACED_1INIT_1LIST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_BRACED_INIT_LIST;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1HANDLER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_HANDLER;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1STMT_1EXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_STMT_EXPR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1IF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_IF;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1WHILE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_WHILE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1GOTO_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_GOTO;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1STMT_1LABEL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_STMT_LABEL;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1RETURN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_RETURN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1BLOCK_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_BLOCK;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1END_1TEST_1WHILE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_END_TEST_WHILE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1FOR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_FOR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1FOR_1EACH_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_FOR_EACH;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1RANGE_1BASED_1FOR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_RANGE_BASED_FOR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1SWITCH_1CASE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_SWITCH_CASE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1SWITCH_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_SWITCH;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1INIT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_INIT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ASM_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ASM;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ASM_1FUNC_1BODY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ASM_FUNC_BODY;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1TRY_1BLOCK_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_TRY_BLOCK;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1MS_1TRY_1BLOCK_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_MS_TRY_BLOCK;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1DECL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_DECL;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1SET_1VLA_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_SET_VLA_SIZE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1VLA_1TYPEDEF_1DECL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_VLA_TYPEDEF_DECL;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1VLA_1DECL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_VLA_DECL;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ASSIGNED_1GOTO_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ASSIGNED_GOTO;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1EMPTY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_EMPTY;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1FILE_1SCOPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_FILE_SCOPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1FUNCTION_1PROTOTYPE_1SCOPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_FUNCTION_PROTOTYPE_SCOPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1BLOCK_1SCOPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_BLOCK_SCOPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1NAMESPACE_1SCOPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_NAMESPACE_SCOPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1CLASS_1STRUCT_1UNION_1SCOPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_CLASS_STRUCT_UNION_SCOPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1CONDITION_1SCOPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_CONDITION_SCOPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1FUNCTION_1SCOPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_FUNCTION_SCOPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1NAMESPACE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_NAMESPACE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1USING_1DECL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_USING_DECL;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1DYNAMIC_1INIT_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_DYNAMIC_INIT_NONE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1DYNAMIC_1INIT_1ZERO_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_DYNAMIC_INIT_ZERO;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1DYNAMIC_1INIT_1CONSTANT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_DYNAMIC_INIT_CONSTANT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1DYNAMIC_1INIT_1EXPRESSION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_DYNAMIC_INIT_EXPRESSION;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1DYNAMIC_1INIT_1CALL_1RETURNING_1CLASS_1VIA_1CCTOR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_DYNAMIC_INIT_CALL_RETURNING_CLASS_VIA_CCTOR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1DYNAMIC_1INIT_1CONSTRUCTOR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_DYNAMIC_INIT_CONSTRUCTOR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1DYNAMIC_1INIT_1NONCONSTANT_1AGGREGATE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_DYNAMIC_INIT_NONCONSTANT_AGGREGATE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1DYNAMIC_1INIT_1BITWISE_1COPY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_DYNAMIC_INIT_BITWISE_COPY;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1VLA_1DIMENSION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_VLA_DIMENSION;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1OVERRIDING_1VIRTUAL_1FUNCTION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_OVERRIDING_VIRTUAL_FUNCTION;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1BASE_1CLASS_1DERIVATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_BASE_CLASS_DERIVATION;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1BASE_1CLASS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_BASE_CLASS;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1TEMPLATE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_TEMPLATE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1VIRTUAL_1BASE_1CLASS_1CONSTRUCTOR_1INIT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_VIRTUAL_BASE_CLASS_CONSTRUCTOR_INIT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1DIRECT_1BASE_1CLASS_1CONSTRUCTOR_1INIT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_DIRECT_BASE_CLASS_CONSTRUCTOR_INIT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1FIELD_1CONSTRUCTOR_1INIT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_FIELD_CONSTRUCTOR_INIT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1DELEGATION_1CONSTRUCTOR_1INIT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_DELEGATION_CONSTRUCTOR_INIT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ASM_1ENTRY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ASM_ENTRY;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ASM_1OPERAND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ASM_OPERAND;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ATTRIBUTE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ATTRIBUTE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ATTRIBUTE_1ARG_1EMPTY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ATTRIBUTE_ARG_EMPTY;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ATTRIBUTE_1ARG_1RAW_1TOKEN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ATTRIBUTE_ARG_RAW_TOKEN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ATTRIBUTE_1ARG_1TOKEN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ATTRIBUTE_ARG_TOKEN;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ATTRIBUTE_1ARG_1CONSTANT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ATTRIBUTE_ARG_CONSTANT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ATTRIBUTE_1ARG_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ATTRIBUTE_ARG_TYPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1TEMPLATE_1ARG_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_TEMPLATE_ARG_TYPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1TEMPLATE_1ARG_1NONTYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_TEMPLATE_ARG_NONTYPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1TEMPLATE_1ARG_1TEMPLATE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_TEMPLATE_ARG_TEMPLATE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1TEMPLATE_1ARG_1START_1OF_1PACK_1EXPANSION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_TEMPLATE_ARG_START_OF_PACK_EXPANSION;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1TEMPLATE_1PARAMETER_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_TEMPLATE_PARAMETER_TYPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1TEMPLATE_1PARAMETER_1NONTYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_TEMPLATE_PARAMETER_NONTYPE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1TEMPLATE_1PARAMETER_1TEMPLATE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_TEMPLATE_PARAMETER_TEMPLATE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PRAGMA_1PRINTF_1ARGS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PRAGMA_PRINTF_ARGS;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PRAGMA_1SCANF_1ARGS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PRAGMA_SCANF_ARGS;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PRAGMA_1PACK_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PRAGMA_PACK;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PRAGMA_1IDENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PRAGMA_IDENT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PRAGMA_1ONCE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PRAGMA_ONCE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PRAGMA_1WEAK_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PRAGMA_WEAK;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PRAGMA_1HDRSTOP_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PRAGMA_HDRSTOP;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PRAGMA_1NO_1PCH_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PRAGMA_NO_PCH;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PRAGMA_1DEFINE_1TYPE_1INFO_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PRAGMA_DEFINE_TYPE_INFO;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PRAGMA_1STDC_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PRAGMA_STDC;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PRAGMA_1REDEFINE_1EXTNAME_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PRAGMA_REDEFINE_EXTNAME;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PRAGMA_1GCC_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PRAGMA_GCC;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PRAGMA_1DIAG_1SUPPRESS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PRAGMA_DIAG_SUPPRESS;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PRAGMA_1DIAG_1REMARK_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PRAGMA_DIAG_REMARK;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PRAGMA_1DIAG_1WARNING_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PRAGMA_DIAG_WARNING;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PRAGMA_1DIAG_1ERROR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PRAGMA_DIAG_ERROR;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PRAGMA_1DIAG_1ONCE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PRAGMA_DIAG_ONCE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PRAGMA_1DIAG_1DEFAULT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PRAGMA_DIAG_DEFAULT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PRAGMA_1PUSH_1MACRO_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PRAGMA_PUSH_MACRO;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PRAGMA_1POP_1MACRO_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PRAGMA_POP_MACRO;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PRAGMA_1START_1MAP_1REGION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PRAGMA_START_MAP_REGION;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PRAGMA_1STOP_1MAP_1REGION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PRAGMA_STOP_MAP_REGION;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PRAGMA_1SETLOCALE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PRAGMA_SETLOCALE;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PRAGMA_1COMMENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PRAGMA_COMMENT;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PRAGMA_1CONFORM_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PRAGMA_CONFORM;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PRAGMA_1INCLUDE_1ALIAS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PRAGMA_INCLUDE_ALIAS;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PRAGMA_1ASM_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PRAGMA_ASM;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PRAGMA_1ENDASM_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PRAGMA_ENDASM;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PRAGMA_1INLINE_1ASM_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PRAGMA_INLINE_ASM;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1PRAGMA_1OPENMP_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_PRAGMA_OPENMP;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1MACRO_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_MACRO;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1SWITCH_1CASE_1ENTRY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_SWITCH_CASE_ENTRY;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1INTEGER_1VALUE_132_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_INTEGER_VALUE_32;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1UINTEGER_1VALUE_132_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_UINTEGER_VALUE_32;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1INTEGER_1VALUE_164_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_INTEGER_VALUE_64;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1UINTEGER_1VALUE_164_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_UINTEGER_VALUE_64;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1INTEGER_1VALUE_1128_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_INTEGER_VALUE_128;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1UINTEGER_1VALUE_1128_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_UINTEGER_VALUE_128;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1FLOAT_1VALUE_132_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_FLOAT_VALUE_32;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1FLOAT_1VALUE_164_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_FLOAT_VALUE_64;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1FLOAT_1VALUE_196_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_FLOAT_VALUE_96;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1FLOAT_1VALUE_1128_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_FLOAT_VALUE_128;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1AST_1LIST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_AST_LIST;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1class_1UC_1ENUM_1LIST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_class *)&cs::ast_class::UC_ENUM_LIST;
  *(cs::ast_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1ast_1class(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::ast_class *arg1 = (cs::ast_class *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::ast_class **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1ast_1ordinal(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (cs::ast_ordinal *)new cs::ast_ordinal(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::ast_ordinal *arg1 = (cs::ast_ordinal *) 0 ;
  cs::ast_ordinal *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::ast_ordinal **)&jarg1; 
  arg2 = *(cs::ast_ordinal **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::ast_ordinal const & reference is null");
    return 0;
  } 
  result = (int)((cs::ast_ordinal const *)arg1)->cmp((cs::ast_ordinal const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::ast_ordinal *arg1 = (cs::ast_ordinal *) 0 ;
  cs::ast_ordinal *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::ast_ordinal **)&jarg1; 
  arg2 = *(cs::ast_ordinal **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::ast_ordinal const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::ast_ordinal const *)arg1)->operator ==((cs::ast_ordinal const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::ast_ordinal *arg1 = (cs::ast_ordinal *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_ordinal **)&jarg1; 
  result = (int)((cs::ast_ordinal const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast_ordinal *arg1 = (cs::ast_ordinal *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_ordinal **)&jarg1; 
  {
    try {
      result = ((cs::ast_ordinal const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast_ordinal *arg1 = (cs::ast_ordinal *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_ordinal **)&jarg1; 
  result = ((cs::ast_ordinal const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast_ordinal *arg1 = (cs::ast_ordinal *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_ordinal **)&jarg1; 
  {
    try {
      result = ((cs::ast_ordinal const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1BASE_1BIT_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::BASE_BIT_SIZE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1BASE_1CHARACTER_1KIND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::BASE_CHARACTER_KIND;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1BASE_1ELEMENT_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::BASE_ELEMENT_TYPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1BASE_1FLOAT_1KIND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::BASE_FLOAT_KIND;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1BASE_1HAS_1ELLIPSIS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::BASE_HAS_ELLIPSIS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1BASE_1INTEGER_1KIND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::BASE_INTEGER_KIND;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1BASE_1IS_1BIT_1FIELD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::BASE_IS_BIT_FIELD;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1BASE_1IS_1COMPLETE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::BASE_IS_COMPLETE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1BASE_1IS_1VLA_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::BASE_IS_VLA;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1BASE_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::BASE_NAME;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1BASE_1NUM_1ELEMENTS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::BASE_NUM_ELEMENTS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1BASE_1OFFSET_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::BASE_OFFSET;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1BASE_1POINTED_1TO_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::BASE_POINTED_TO;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1BASE_1REAL_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::BASE_REAL_VALUE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1BASE_1RETURN_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::BASE_RETURN_TYPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1BASE_1CALLING_1CONVENTION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::BASE_CALLING_CONVENTION;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1BASE_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::BASE_SIZE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1BASE_1STORAGE_1CLASS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::BASE_STORAGE_CLASS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1BASE_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::BASE_TYPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1BASE_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::BASE_VALUE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1BASE_1ABS_1LOC_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::BASE_ABS_LOC;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1BASE_1IS_1VIRTUAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::BASE_IS_VIRTUAL;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1BASE_1SPECIAL_1FUNCTION_1KIND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::BASE_SPECIAL_FUNCTION_KIND;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1BASE_1OPERATOR_1NAME_1KIND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::BASE_OPERATOR_NAME_KIND;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1BASE_1BASE_1CLASSES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::BASE_BASE_CLASSES;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1BASE_1ALIGNMENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::BASE_ALIGNMENT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1BASE_1IS_1UNSIGNED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::BASE_IS_UNSIGNED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1BASE_1VALUE_1RETURNED_1BY_1CCTOR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::BASE_VALUE_RETURNED_BY_CCTOR;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1BASE_1ANY_1VIRTUAL_1FUNCTIONS_1INCLUDING_1IN_1BASE_1CLASSES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::BASE_ANY_VIRTUAL_FUNCTIONS_INCLUDING_IN_BASE_CLASSES;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1BASE_1COMPILER_1GENERATED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::BASE_COMPILER_GENERATED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1BASE_1REGISTER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::BASE_REGISTER;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_TYPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_VALUE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1REAL_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_REAL_VALUE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_NAME;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1STORAGE_1CLASS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_STORAGE_CLASS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1OFFSET_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_OFFSET;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1IS_1BIT_1FIELD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_IS_BIT_FIELD;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1BIT_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_BIT_SIZE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_SIZE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1IS_1COMPLETE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_IS_COMPLETE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1INTEGER_1KIND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_INTEGER_KIND;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1CHARACTER_1KIND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_CHARACTER_KIND;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1FLOAT_1KIND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_FLOAT_KIND;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1POINTED_1TO_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_POINTED_TO;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1RETURN_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_RETURN_TYPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1HAS_1ELLIPSIS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_HAS_ELLIPSIS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1ELEMENT_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_ELEMENT_TYPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1NUM_1ELEMENTS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_NUM_ELEMENTS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1IS_1VLA_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_IS_VLA;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1ABS_1LOC_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_ABS_LOC;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1IS_1VIRTUAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_IS_VIRTUAL;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1SPECIAL_1FUNCTION_1KIND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_SPECIAL_FUNCTION_KIND;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1OPERATOR_1NAME_1KIND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_OPERATOR_NAME_KIND;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1BASE_1CLASSES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_BASE_CLASSES;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1ALIGNMENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_ALIGNMENT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1VALUE_1RETURNED_1BY_1CCTOR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_VALUE_RETURNED_BY_CCTOR;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1ANY_1VIRTUAL_1FUNCTIONS_1INCLUDING_1IN_1BASE_1CLASSES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_ANY_VIRTUAL_FUNCTIONS_INCLUDING_IN_BASE_CLASSES;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1COMPILER_1GENERATED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_COMPILER_GENERATED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1ABI_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_ABI;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1BASE_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_BASE_TYPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1BIT_1FIELD_1CONTAINER_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_BIT_FIELD_CONTAINER_SIZE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1BIT_1OFFSET_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_BIT_OFFSET;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1BOOL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_BOOL;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1CHAR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_CHAR;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1CHAR16_1T_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_CHAR16_T;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1CHAR32_1T_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_CHAR32_T;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1CHAR_1BIT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_CHAR_BIT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1DOUBLE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_DOUBLE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1ENDIANNESS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_ENDIANNESS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1ENUM_1BIT_1FIELDS_1ARE_1ALWAYS_1UNSIGNED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_ENUM_BIT_FIELDS_ARE_ALWAYS_UNSIGNED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1ENUM_1TYPES_1CAN_1BE_1SMALLER_1THAN_1INT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_ENUM_TYPES_CAN_BE_SMALLER_THAN_INT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1FIELD_1ALIGNMENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_FIELD_ALIGNMENT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1FIXED_1POINT_1KIND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_FIXED_POINT_KIND;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1FLOAT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_FLOAT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1FORCE_1ONE_1BIT_1BIT_1FIELD_1TO_1BE_1UNSIGNED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_FORCE_ONE_BIT_BIT_FIELD_TO_BE_UNSIGNED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1GNU_1MOD_1CONSTR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_GNU_MOD_CONSTR;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1IMAGINARY_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_IMAGINARY_VALUE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1INDICES_1LIST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_INDICES_LIST;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1INT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_INT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1INTMAX_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_INTMAX;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1IS_1CONST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_IS_CONST;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1IS_1DECIMAL_1LITERAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_IS_DECIMAL_LITERAL;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1IS_1FAR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_IS_FAR;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1IS_1INITIALIZATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_IS_INITIALIZATION;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1IS_1LAST_1FIELD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_IS_LAST_FIELD;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1IS_1MEMBER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_IS_MEMBER;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1IS_1NEAR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_IS_NEAR;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1IS_1NONSTATIC_1MEMBER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_IS_NONSTATIC_MEMBER;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1IS_1PRIMITIVE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_IS_PRIMITIVE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1IS_1RESTRICT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_IS_RESTRICT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1IS_1UNALIGNED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_IS_UNALIGNED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1IS_1VOLATILE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_IS_VOLATILE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1INDEX_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_INDEX_LENGTH;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1LITERAL_1RAW_1TEXT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_LITERAL_RAW_TEXT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1LONG_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_LONG;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1LONG_1DOUBLE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_LONG_DOUBLE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1LONG_1LONG_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_LONG_LONG;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1MAXIMUM_1INTRINSIC_1ALIGNMENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_MAXIMUM_INTRINSIC_ALIGNMENT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1MAXIMUM_1PACK_1ALIGNMENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_MAXIMUM_PACK_ALIGNMENT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1MICROSOFT_1BIT_1FIELD_1ALLOCATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_MICROSOFT_BIT_FIELD_ALLOCATION;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1MINIMUM_1PACK_1ALIGNMENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_MINIMUM_PACK_ALIGNMENT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1MINIMUM_1STRUCT_1ALIGNMENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_MINIMUM_STRUCT_ALIGNMENT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1NONNEGATIVE_1ENUM_1BIT_1FIELD_1IS_1UNSIGNED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_NONNEGATIVE_ENUM_BIT_FIELD_IS_UNSIGNED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1NORETURN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_NORETURN;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1NUM_1ELEMENTS_1ALOC_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_NUM_ELEMENTS_ALOC;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1ORIGINAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_ORIGINAL;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1PAD_1BIT_1FIELDS_1LARGER_1THAN_1BASE_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_PAD_BIT_FIELDS_LARGER_THAN_BASE_TYPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1PLAIN_1INT_1BIT_1FIELD_1IS_1UNSIGNED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_PLAIN_INT_BIT_FIELD_IS_UNSIGNED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1POINTER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_POINTER;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1PROXY_1ENTRIES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_PROXY_ENTRIES;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1PTR_1TO_1DATA_1MEMBER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_PTR_TO_DATA_MEMBER;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1PTR_1TO_1MEMBER_1FUNCTION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_PTR_TO_MEMBER_FUNCTION;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1PTR_1TO_1VIRTUAL_1BASE_1CLASS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_PTR_TO_VIRTUAL_BASE_CLASS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1PTRDIFF_1T_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_PTRDIFF_T;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1RIGHT_1SHIFT_1IS_1ARITHMETIC_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_RIGHT_SHIFT_IS_ARITHMETIC;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1SHORT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_SHORT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1SIGNED_1CHARS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_SIGNED_CHARS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1SIZE_1IS_1INCOMPLETE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_SIZE_IS_INCOMPLETE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1SIZE_1T_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_SIZE_T;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1SIZE_1T_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_SIZE_T_MAX;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1SIZE_1T_1MAX_1USE_1DEFAULT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_SIZE_T_MAX_USE_DEFAULT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1START_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_START;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1TOO_1LARGE_1SHIFT_1COUNT_1IS_1TAKEN_1MODULO_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_TOO_LARGE_SHIFT_COUNT_IS_TAKEN_MODULO_SIZE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1TYPE_1KIND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_TYPE_KIND;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1UINTMAX_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_UINTMAX;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1UNNAMED_1BIT_1FIELD_1AFFECTS_1STRUCT_1ALIGNMENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_UNNAMED_BIT_FIELD_AFFECTS_STRUCT_ALIGNMENT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1UNNORMALIZED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_UNNORMALIZED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1USER_1CONTROL_1OF_1STRUCT_1PACKING_1AFFECTS_1BIT_1FIELDS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_USER_CONTROL_OF_STRUCT_PACKING_AFFECTS_BIT_FIELDS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1USER_1ENTRIES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_USER_ENTRIES;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1VIRTUAL_1FUNCTION_1INFO_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_VIRTUAL_FUNCTION_INFO;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1VIRTUAL_1OVERRIDES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_VIRTUAL_OVERRIDES;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1WCHAR_1T_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_WCHAR_T;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1WINT_1T_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_WINT_T;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1ZERO_1WIDTH_1BIT_1FIELD_1AFFECTS_1STRUCT_1ALIGNMENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_ZERO_WIDTH_BIT_FIELD_AFFECTS_STRUCT_ALIGNMENT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1NC_1ZERO_1WIDTH_1BIT_1FIELD_1ALIGNMENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::NC_ZERO_WIDTH_BIT_FIELD_ALIGNMENT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1BIT_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_BIT_SIZE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ELEMENT_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ELEMENT_TYPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1FLOAT_1KIND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_FLOAT_KIND;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1HAS_1ELLIPSIS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_HAS_ELLIPSIS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1INTEGER_1KIND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_INTEGER_KIND;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1CHARACTER_1KIND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_CHARACTER_KIND;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1BIT_1FIELD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_BIT_FIELD;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1COMPLETE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_COMPLETE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1VLA_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_VLA;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_NAME;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1NUM_1ELEMENTS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_NUM_ELEMENTS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1OFFSET_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_OFFSET;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1POINTED_1TO_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_POINTED_TO;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1REAL_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_REAL_VALUE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1RETURN_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_RETURN_TYPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_SIZE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1STORAGE_1CLASS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_STORAGE_CLASS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_TYPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_VALUE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ABS_1LOC_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ABS_LOC;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1VIRTUAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_VIRTUAL;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1SPECIAL_1FUNCTION_1KIND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_SPECIAL_FUNCTION_KIND;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1OPERATOR_1NAME_1KIND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_OPERATOR_NAME_KIND;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1BASE_1CLASSES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_BASE_CLASSES;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ALIGNMENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ALIGNMENT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1UNSIGNED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_UNSIGNED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1VALUE_1RETURNED_1BY_1CCTOR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_VALUE_RETURNED_BY_CCTOR;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ANY_1VIRTUAL_1FUNCTIONS_1INCLUDING_1IN_1BASE_1CLASSES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ANY_VIRTUAL_FUNCTIONS_INCLUDING_IN_BASE_CLASSES;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1CALLING_1CONVENTION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_CALLING_CONVENTION;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1COMPILER_1GENERATED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_COMPILER_GENERATED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ABSTRACT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ABSTRACT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ACCESS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ACCESS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ACCESS_1SPECIFIER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ACCESS_SPECIFIER;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ADDRESS_1TAKEN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ADDRESS_TAKEN;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ALIGNMENT_1WITHOUT_1VIRTUAL_1BASE_1CLASSES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ALIGNMENT_WITHOUT_VIRTUAL_BASE_CLASSES;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ALIGNOF_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ALIGNOF_TYPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ALTERNATIVE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ALTERNATIVE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1AMBIGUOUS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_AMBIGUOUS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ANONYMOUS_1UNION_1FIELD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ANONYMOUS_UNION_FIELD;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ANONYMOUS_1UNION_1KIND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ANONYMOUS_UNION_KIND;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ANY_1CONST_1MEMBER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ANY_CONST_MEMBER;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ANY_1MUTABLE_1MEMBER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ANY_MUTABLE_MEMBER;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ANY_1PURE_1VIRTUAL_1FUNCTIONS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ANY_PURE_VIRTUAL_FUNCTIONS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ANY_1VIRTUAL_1BASE_1CLASSES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ANY_VIRTUAL_BASE_CLASSES;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ANY_1VIRTUAL_1FUNCTIONS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ANY_VIRTUAL_FUNCTIONS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ARRAY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ARRAY;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ARRAY_1ELEMENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ARRAY_ELEMENT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ASM_1ENTRIES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ASM_ENTRIES;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ASM_1ENTRY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ASM_ENTRY;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ASSIGNMENT_1TO_1THIS_1DONE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ASSIGNMENT_TO_THIS_DONE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ASSOC_1BLOCK_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ASSOC_BLOCK;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ASSOC_1HANDLER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ASSOC_HANDLER;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ASSOC_1NAMESPACE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ASSOC_NAMESPACE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ASSOC_1OPERATOR_1DELETE_1ROUTINE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ASSOC_OPERATOR_DELETE_ROUTINE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ASSOC_1OPERATOR_1NEW_1ROUTINE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ASSOC_OPERATOR_NEW_ROUTINE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ASSOC_1ROUTINE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ASSOC_ROUTINE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ASSOC_1SCOPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ASSOC_SCOPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ASSOC_1STATEMENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ASSOC_STATEMENT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ASSOC_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ASSOC_TYPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ASSOC_1TEMPLATE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ASSOC_TEMPLATE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ATTRIBUTE_1ARGUMENTS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ATTRIBUTE_ARGUMENTS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ATTRIBUTE_1FAMILY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ATTRIBUTE_FAMILY;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ATTRIBUTE_1KIND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ATTRIBUTE_KIND;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ATTRIBUTE_1NAMESPACE_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ATTRIBUTE_NAMESPACE_NAME;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ATTRIBUTES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ATTRIBUTES;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1BASE_1CLASS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_BASE_CLASS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1BASE_1CLASS_1LIST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_BASE_CLASS_LIST;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1BEFRIENDING_1CLASSES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_BEFRIENDING_CLASSES;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1BIT_1FIELD_1IS_1SIGNED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_BIT_FIELD_IS_SIGNED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1BIT_1SIZE_1CONSTANT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_BIT_SIZE_CONSTANT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1BLOCK_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_BLOCK;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1BODY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_BODY;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1BREAK_1LABEL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_BREAK_LABEL;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1CALLED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_CALLED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1CALLED_1FUNCTION_1IS_1IMPLICITLY_1DECLARED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_CALLED_FUNCTION_IS_IMPLICITLY_DECLARED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1CAN_1BE_1INSTANTIATED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_CAN_BE_INSTANTIATED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1CAPTURE_1BY_1REFERENCE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_CAPTURE_BY_REFERENCE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1CAPTURES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_CAPTURES;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1CHILD_1FILES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_CHILD_FILES;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1CLASS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_CLASS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1CLEANUP_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_CLEANUP;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1CLOSURE_1CLASS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_CLOSURE_CLASS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1CODESURFER_1TYPE_1KIND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_CODESURFER_TYPE_KIND;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1COLLECTION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_COLLECTION;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1COLUMN_1POSITION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_COLUMN_POSITION;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1COMPLETE_1SUBOBJECT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_COMPLETE_SUBOBJECT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1CONDITION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_CONDITION;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1CONSEQUENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_CONSEQUENT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1CONSTANT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_CONSTANT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1CONSTANT_1LIST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_CONSTANT_LIST;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1CONSTANTS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_CONSTANTS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1CONSTRAINTS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_CONSTRAINTS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1CONSTRUCTOR_1INITS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_CONSTRUCTOR_INITS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1CONTAINER_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_CONTAINER_TYPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1CONTAINS_1TRY_1BLOCK_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_CONTAINS_TRY_BLOCK;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1CONTINUE_1LABEL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_CONTINUE_LABEL;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1CONVERSION_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_CONVERSION_TYPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1COVARIANT_1RETURN_1VIRTUAL_1OVERRIDE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_COVARIANT_RETURN_VIRTUAL_OVERRIDE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1DATA_1SECTION_1BASE_1CLASS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_DATA_SECTION_BASE_CLASS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1DECL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_DECL;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1DECL_1MODIFIERS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_DECL_MODIFIERS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1DECLARED_1ONLY_1AS_1FRIEND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_DECLARED_ONLY_AS_FRIEND;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1DECLARED_1STORAGE_1CLASS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_DECLARED_STORAGE_CLASS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1DECLARED_1WITH_1AUTO_1TYPE_1SPECIFIER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_DECLARED_WITH_AUTO_TYPE_SPECIFIER;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1DEFAULT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_DEFAULT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1DEFAULT_1CASE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_DEFAULT_CASE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1DEFAULT_1IS_1BY_1REFERENCE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_DEFAULT_IS_BY_REFERENCE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1DEFINED_1IN_1FRIEND_1DECL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_DEFINED_IN_FRIEND_DECL;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1DELETE_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_DELETE_TYPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1DERIVATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_DERIVATION;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1DERIVED_1CLASS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_DERIVED_CLASS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1DESTRUCTOR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_DESTRUCTOR;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1DIMENSION_1EXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_DIMENSION_EXPR;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1DIRECT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_DIRECT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1DO_1NOT_1INSTANTIATE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_DO_NOT_INSTANTIATE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1DISTINCT_1TYPE_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_DISTINCT_TYPE_NAME;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1DYNAMIC_1INIT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_DYNAMIC_INIT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1DYNAMIC_1INITS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_DYNAMIC_INITS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ELLIPSIS_1PARAM_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ELLIPSIS_PARAM;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1END_1OF_1BLOCK_1REACHABLE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_END_OF_BLOCK_REACHABLE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1EXCEPT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_EXCEPT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1EXCEPTION_1SPECIFICATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_EXCEPTION_SPECIFICATION;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1EXEC_1STATEMENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_EXEC_STATEMENT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1EXPLICIT_1BRACES_1ON_1AGGREGATE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_EXPLICIT_BRACES_ON_AGGREGATE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1EXPLICIT_1RETURN_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_EXPLICIT_RETURN_TYPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1EXPLICIT_1TEMPLATE_1ARG_1LIST_1USED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_EXPLICIT_TEMPLATE_ARG_LIST_USED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1EXPLICITLY_1SIGNED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_EXPLICITLY_SIGNED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1EXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_EXPR;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1FIELD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_FIELD;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1FIELDS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_FIELDS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1FOLLOWS_1AN_1EXEC_1STATEMENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_FOLLOWS_AN_EXEC_STATEMENT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1FOR_1EACH_1SCOPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_FOR_EACH_SCOPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1FOR_1INIT_1SCOPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_FOR_INIT_SCOPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1FRIEND_1CLASSES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_FRIEND_CLASSES;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1FRIEND_1ROUTINES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_FRIEND_ROUTINES;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1FROM_1ADDRESS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_FROM_ADDRESS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1FROM_1SYSTEM_1INCLUDE_1DIR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_FROM_SYSTEM_INCLUDE_DIR;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1FULL_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_FULL_NAME;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1FUNC_1BODY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_FUNC_BODY;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GCC_1MODE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GCC_MODE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GET_1PROPERTY_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GET_PROPERTY_NAME;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GET_1ROUTINE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GET_ROUTINE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GLOBAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GLOBAL;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1ALIASED_1ROUTINE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_ALIASED_ROUTINE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1ALIASED_1VARIABLE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_ALIASED_VARIABLE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1ALLOCATES_1MEMORY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_ALLOCATES_MEMORY;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1ALWAYS_1INLINE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_ALWAYS_INLINE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1ASM_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_ASM_NAME;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1ASM_1NAME_1IS_1VALID_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_ASM_NAME_IS_VALID;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1ASM_1NAME_1OR_1REG_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_ASM_NAME_OR_REG_NAME;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1ASM_1NAME_1OR_1REG_1REG_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_ASM_NAME_OR_REG_REG;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1CLOBBERS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_CLOBBERS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1DOES_1NOT_1RETURN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_DOES_NOT_RETURN;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1INLINE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_INLINE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1INIT_1PRIORITY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_INIT_PRIORITY;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1IS_1CONST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_IS_CONST;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1IS_1FINALIZATION_1ROUTINE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_IS_FINALIZATION_ROUTINE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1IS_1INITIALIZATION_1ROUTINE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_IS_INITIALIZATION_ROUTINE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1IS_1NAKED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_IS_NAKED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1IS_1NOT_1COMMON_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_IS_NOT_COMMON;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1IS_1PACKED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_IS_PACKED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1IS_1PURE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_IS_PURE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1IS_1TRANSPARENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_IS_TRANSPARENT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1IS_1TYPEOF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_IS_TYPEOF;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1IS_1VOLATILE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_IS_VOLATILE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1IS_1WEAK_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_IS_WEAK;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1IS_1WEAKREF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_IS_WEAKREF;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1LOCALLY_1DECLARED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_LOCALLY_DECLARED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1MARKED_1AS_1GNU_1EXTENSION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_MARKED_AS_GNU_EXTENSION;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1NO_1CHECK_1MEMORY_1USAGE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_NO_CHECK_MEMORY_USAGE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1NO_1INSTRUMENT_1FUNCTION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_NO_INSTRUMENT_FUNCTION;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1OPERANDS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_OPERANDS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1SECTION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_SECTION;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1UNUSED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_UNUSED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1USED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_USED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1GNU_1VISIBILITY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_GNU_VISIBILITY;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1HANDLERS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_HANDLERS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1HAS_1ASSOCIATED_1PRAGMA_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_HAS_ASSOCIATED_PRAGMA;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1HAS_1CAPTURE_1DEFAULT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_HAS_CAPTURE_DEFAULT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1HAS_1INITIALIZER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_HAS_INITIALIZER;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1HAS_1PARAMETER_1DECL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_HAS_PARAMETER_DECL;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1HAS_1PARENTHESIZED_1INITIALIZER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_HAS_PARENTHESIZED_INITIALIZER;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1HAS_1TEMPORARY_1LIFETIME_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_HAS_TEMPORARY_LIFETIME;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1HAS_1VARIABLY_1MODIFIED_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_HAS_VARIABLY_MODIFIED_TYPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1HIDDEN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_HIDDEN;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IGNORE_1DURING_1DEPENDENT_1LOOKUP_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IGNORE_DURING_DEPENDENT_LOOKUP;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IMAG_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IMAG_VALUE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1INCLUDED_1BY_1PREINCLUDE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_INCLUDED_BY_PREINCLUDE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1INCLUDED_1BY_1SYSTEM_1INCLUDE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_INCLUDED_BY_SYSTEM_INCLUDE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1INCREMENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_INCREMENT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1INHERITANCE_1KIND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_INHERITANCE_KIND;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1INHERITANCE_1KIND_1IS_1EXPLICIT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_INHERITANCE_KIND_IS_EXPLICIT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1INITIALIZATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_INITIALIZATION;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1INITIALIZER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_INITIALIZER;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1INSIDE_1CONDITIONAL_1EXPRESSION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_INSIDE_CONDITIONAL_EXPRESSION;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1INSTANCE_1REQUIRED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_INSTANCE_REQUIRED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1ANONYMOUS_1PARENT_1OBJECT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_ANONYMOUS_PARENT_OBJECT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1CLASS_1MEMBER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_CLASS_MEMBER;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1COMMAND_1LINE_1DEFINITION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_COMMAND_LINE_DEFINITION;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1COMPOUND_1LITERAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_COMPOUND_LITERAL;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1CONSTEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_CONSTEXPR;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1CONSTRUCTOR_1INIT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_CONSTRUCTOR_INIT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1COPY_1CONSTRUCTOR_1WITH_1IMPLIED_1SOURCE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_COPY_CONSTRUCTOR_WITH_IMPLIED_SOURCE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1DECLARED_1CONSTEXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_DECLARED_CONSTEXPR;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1DECLTYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_DECLTYPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1DEFAULTED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_DEFAULTED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1DELETED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_DELETED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1DEPRECATED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_DEPRECATED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1EMPTY_1CLASS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_EMPTY_CLASS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1EXPLICIT_1CONSTRUCTOR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_EXPLICIT_CONSTRUCTOR;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1EXPLICIT_1CONVERSION_1FUNCTION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_EXPLICIT_CONVERSION_FUNCTION;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1FINAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_FINAL;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1FRACT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_FRACT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1FUNCTION_1TRY_1BLOCK_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_FUNCTION_TRY_BLOCK;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1IMPLICIT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_IMPLICIT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1INCLUDE_1FILE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_INCLUDE_FILE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1INITIALIZATION_1GUARD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_INITIALIZATION_GUARD;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1INLINE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_INLINE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1LAMBDA_1BODY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_LAMBDA_BODY;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1LAMBDA_1CLOSURE_1CLASS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_LAMBDA_CLOSURE_CLASS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1LOCAL_1TO_1FUNCTION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_LOCAL_TO_FUNCTION;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1LVALUE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_LVALUE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1MEMBER_1CONSTANT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_MEMBER_CONSTANT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1MUTABLE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_MUTABLE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1NAMESPACE_1ALIAS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_NAMESPACE_ALIAS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1NONREAL_1CLASS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_NONREAL_CLASS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1OPTIMIZED_1EMPTY_1BASE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_OPTIMIZED_EMPTY_BASE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1PACK_1ELEMENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_PACK_ELEMENT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1PACK_1EXPANSION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_PACK_EXPANSION;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1PARAMETER_1PACK_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_PARAMETER_PACK;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1PROTOTYPE_1INSTANTIATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_PROTOTYPE_INSTANTIATION;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1REFERENCE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_REFERENCE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1RVALUE_1REFERENCE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_RVALUE_REFERENCE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1SCOPED_1ENUM_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_SCOPED_ENUM;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1SPECIALIZED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_SPECIALIZED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1TEMPLATE_1CLASS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_TEMPLATE_CLASS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1TEMPLATE_1FUNCTION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_TEMPLATE_FUNCTION;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1TEMPLATE_1STATIC_1DATA_1MEMBER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_TEMPLATE_STATIC_DATA_MEMBER;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1UNDEF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_UNDEF;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1IS_1USING_1DIRECTIVE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_IS_USING_DIRECTIVE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ITERATOR_1FIELD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ITERATOR_FIELD;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ITERATOR_1SCOPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ITERATOR_SCOPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ITERATOR_1VARIABLE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ITERATOR_VARIABLE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1LABEL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_LABEL;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1LABELS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_LABELS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1LEAVE_1LABEL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_LEAVE_LABEL;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_LENGTH;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1LOCAL_1SCOPES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_LOCAL_SCOPES;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1LOCAL_1STATIC_1VARIABLE_1INITS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_LOCAL_STATIC_VARIABLE_INITS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1MACROS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_MACROS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1MAIN_1ROUTINE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_MAIN_ROUTINE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1MANGLED_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_MANGLED_NAME;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1MAX_1MEMBER_1ALIGNMENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_MAX_MEMBER_ALIGNMENT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1MEMBER_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_MEMBER_TYPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1MODIFIED_1WITHIN_1TRY_1BLOCK_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_MODIFIED_WITHIN_TRY_BLOCK;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1MODIFIERS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_MODIFIERS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1MS_1ABSTRACT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_MS_ABSTRACT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1MS_1INTERFACE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_MS_INTERFACE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1MS_1NEW_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_MS_NEW;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1MS_1OVERRIDE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_MS_OVERRIDE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1MS_1W64_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_MS_W64_TYPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1MULTIDIMENSIONAL_1AGGR_1TAIL_1NOT_1REPEATED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_MULTIDIMENSIONAL_AGGR_TAIL_NOT_REPEATED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1NAME_1AS_1WRITTEN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_NAME_AS_WRITTEN;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1NAMESPACE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_NAMESPACE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1NAMESPACES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_NAMESPACES;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1NATIVE_1NULLPTR_1KEYWORD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_NATIVE_NULLPTR_KEYWORD;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1NESTED_1CLASS_1DEFINED_1OUTSIDE_1OF_1PARENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_NESTED_CLASS_DEFINED_OUTSIDE_OF_PARENT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1NEW_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_NEW_TYPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1NONSTATIC_1VARIABLES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_NONSTATIC_VARIABLES;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1NULL_1KEYWORD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_NULL_KEYWORD;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1NULLPTR_1KEYWORD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_NULLPTR_KEYWORD;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1OFFSET_1BIT_1REMAINDER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_OFFSET_BIT_REMAINDER;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1OPERANDS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_OPERANDS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ORIGINALLY_1UNNAMED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ORIGINALLY_UNNAMED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ORIGINAL_1FILENAME_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ORIGINAL_FILENAME;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1OVERRIDING_1FUNCTION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_OVERRIDING_FUNCTION;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1OVERRIDING_1VIRTUAL_1FUNCTIONS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_OVERRIDING_VIRTUAL_FUNCTIONS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1PARAM_1TYPES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_PARAM_TYPES;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1PARAM_1USED_1MORE_1THAN_1ONCE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_PARAM_USED_MORE_THAN_ONCE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1PARAM_1VALUE_1HAS_1BEEN_1CHANGED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_PARAM_VALUE_HAS_BEEN_CHANGED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1PARAMETER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_PARAMETER;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1PARAMETERS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_PARAMETERS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1PARTIAL_1SPEC_1TEMPLATE_1ARGS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_PARTIAL_SPEC_TEMPLATE_ARGS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1PLACEMENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_PLACEMENT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1POINTER_1BASE_1CLASS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_POINTER_BASE_CLASS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1POINTER_1OFFSET_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_POINTER_OFFSET;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1POINTER_1OFFSET_1IS_1SET_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_POINTER_OFFSET_IS_SET;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1POSITION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_POSITION;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1PRAGMAS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_PRAGMAS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1PRECISION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_PRECISION;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1PREFERRED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_PREFERRED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1PRETTYPRINTED_1FORM_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_PRETTYPRINTED_FORM;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1PRIMARY_1FUNCTION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_PRIMARY_FUNCTION;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1PRIMARY_1SCOPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_PRIMARY_SCOPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1PRIMARY_1SOURCE_1FILE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_PRIMARY_SOURCE_FILE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1PROTOTYPED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_PROTOTYPED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1PURE_1VIRTUAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_PURE_VIRTUAL;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1PUT_1PROPERTY_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_PUT_PROPERTY_NAME;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1QUALIFIERS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_QUALIFIERS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1RADIX_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_RADIX;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1RANGE_1END_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_RANGE_END;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1REACHABLE_1BY_1FALL_1THROUGH_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_REACHABLE_BY_FALL_THROUGH;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1REFERENCED_1NON_1LOCALLY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_REFERENCED_NON_LOCALLY;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1RELATED_1FILE_1IMPLICIT_1INCLUDE_1DONE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_RELATED_FILE_IMPLICIT_INCLUDE_DONE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1REPRESENTED_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_REPRESENTED_TYPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1RESULT_1IS_1ADDR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_RESULT_IS_ADDR;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1RETURN_1ADJUSTMENT_1BASE_1CLASS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_RETURN_ADJUSTMENT_BASE_CLASS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1RETURN_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_RETURN_VALUE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1RETURN_1VALUE_1VARIABLE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_RETURN_VALUE_VARIABLE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ROUTINE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ROUTINE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1ROUTINES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_ROUTINES;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1SCOPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_SCOPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1SET_1ROUTINE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_SET_ROUTINE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1SHARES_1VIRTUAL_1FUNCTION_1INFO_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_SHARES_VIRTUAL_FUNCTION_INFO;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1SIZE_1WITHOUT_1VIRTUAL_1BASE_1CLASSES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_SIZE_WITHOUT_VIRTUAL_BASE_CLASSES;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1SIZEOF_1POINTER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_SIZEOF_POINTER;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1SIZEOF_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_SIZEOF_TYPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1SORTED_1CASES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_SORTED_CASES;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1SOURCE_1CORRESPONDENCE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_SOURCE_CORRESPONDENCE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1SOURCE_1EXPRESSION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_SOURCE_EXPRESSION;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1SOURCE_1FIELD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_SOURCE_FIELD;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1SOURCE_1LANGUAGE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_SOURCE_LANGUAGE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1SPECIALIZED_1WITH_1OLD_1SYNTAX_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_SPECIALIZED_WITH_OLD_SYNTAX;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1SPECIFIER_1COLUMN_1POSITION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_SPECIFIER_COLUMN_POSITION;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1SPECIFIER_1POSITION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_SPECIFIER_POSITION;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1STATEMENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_STATEMENT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1STATEMENTS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_STATEMENTS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1STATIC_1INIT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_STATIC_INIT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1STATIC_1TEMP_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_STATIC_TEMP;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1SUBSTITUTE_1FILENAME_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_SUBSTITUTE_FILENAME;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1SUPERSEDED_1EXTERNAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_SUPERSEDED_EXTERNAL;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1TEMPLATE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_TEMPLATE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1TEMPLATE_1ARGS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_TEMPLATE_ARGS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1TEMPLATE_1PARAM_1EXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_TEMPLATE_PARAM_EXPR;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1TEMPLATE_1PARAMETERS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_TEMPLATE_PARAMETERS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1TEMPLATES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_TEMPLATES;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1TERMINATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_TERMINATION;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1TEXT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_TEXT;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1THIS_1CLASS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_THIS_CLASS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1THIS_1PARAM_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_THIS_PARAM;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1THIS_1QUALIFIERS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_THIS_QUALIFIERS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1THROWN_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_THROWN_TYPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1TRAILING_1RETURN_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_TRAILING_RETURN_TYPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1TO_1ADDRESS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_TO_ADDRESS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1TOKEN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_TOKEN;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1TYPEID_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_TYPEID_TYPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1TYPES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_TYPES;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1UID_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_UID;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1UNORDERED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_UNORDERED;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1USING_1DECLS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_USING_DECLS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1UUID_1STRING_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_UUID_STRING;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1UUIDOF_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_UUIDOF_TYPE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1VARIABLE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_VARIABLE;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1VARIABLES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_VARIABLES;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1VIRTUAL_1FUNCTION_1INFO_1BASE_1CLASS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_VIRTUAL_FUNCTION_INFO_BASE_CLASS;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1ordinal_1UC_1VLA_1DIMENSION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_ordinal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_ordinal *)&cs::ast_ordinal::UC_VLA_DIMENSION;
  *(cs::ast_ordinal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1ast_1ordinal(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::ast_ordinal *arg1 = (cs::ast_ordinal *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::ast_ordinal **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1ast_1field_1type(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  cs::ast_field_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (cs::ast_field_type *)new cs::ast_field_type(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_field_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1type_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::ast_field_type *arg1 = (cs::ast_field_type *) 0 ;
  cs::ast_field_type *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::ast_field_type **)&jarg1; 
  arg2 = *(cs::ast_field_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::ast_field_type const & reference is null");
    return 0;
  } 
  result = (int)((cs::ast_field_type const *)arg1)->cmp((cs::ast_field_type const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1type_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::ast_field_type *arg1 = (cs::ast_field_type *) 0 ;
  cs::ast_field_type *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::ast_field_type **)&jarg1; 
  arg2 = *(cs::ast_field_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::ast_field_type const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::ast_field_type const *)arg1)->operator ==((cs::ast_field_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1type_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::ast_field_type *arg1 = (cs::ast_field_type *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_field_type **)&jarg1; 
  result = (int)((cs::ast_field_type const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1type_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast_field_type *arg1 = (cs::ast_field_type *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_field_type **)&jarg1; 
  {
    try {
      result = ((cs::ast_field_type const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1type_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast_field_type *arg1 = (cs::ast_field_type *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_field_type **)&jarg1; 
  result = ((cs::ast_field_type const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1type_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast_field_type *arg1 = (cs::ast_field_type *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_field_type **)&jarg1; 
  {
    try {
      result = ((cs::ast_field_type const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1type_1NULL_1_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_field_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_field_type *)&cs::ast_field_type::NULL_;
  *(cs::ast_field_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1type_1AST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_field_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_field_type *)&cs::ast_field_type::AST;
  *(cs::ast_field_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1type_1AST_1CLASS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_field_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_field_type *)&cs::ast_field_type::AST_CLASS;
  *(cs::ast_field_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1type_1BOOLEAN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_field_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_field_type *)&cs::ast_field_type::BOOLEAN;
  *(cs::ast_field_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1type_1ENUMERATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_field_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_field_type *)&cs::ast_field_type::ENUMERATION;
  *(cs::ast_field_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1type_1INT8_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_field_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_field_type *)&cs::ast_field_type::INT8;
  *(cs::ast_field_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1type_1UINT8_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_field_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_field_type *)&cs::ast_field_type::UINT8;
  *(cs::ast_field_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1type_1INT16_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_field_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_field_type *)&cs::ast_field_type::INT16;
  *(cs::ast_field_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1type_1UINT16_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_field_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_field_type *)&cs::ast_field_type::UINT16;
  *(cs::ast_field_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1type_1INT32_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_field_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_field_type *)&cs::ast_field_type::INT32;
  *(cs::ast_field_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1type_1UINT32_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_field_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_field_type *)&cs::ast_field_type::UINT32;
  *(cs::ast_field_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1type_1INT64_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_field_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_field_type *)&cs::ast_field_type::INT64;
  *(cs::ast_field_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1type_1UINT64_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_field_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_field_type *)&cs::ast_field_type::UINT64;
  *(cs::ast_field_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1type_1INT128_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_field_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_field_type *)&cs::ast_field_type::INT128;
  *(cs::ast_field_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1type_1UINT128_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_field_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_field_type *)&cs::ast_field_type::UINT128;
  *(cs::ast_field_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1type_1FLT32_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_field_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_field_type *)&cs::ast_field_type::FLT32;
  *(cs::ast_field_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1type_1FLT64_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_field_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_field_type *)&cs::ast_field_type::FLT64;
  *(cs::ast_field_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1type_1FLT96_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_field_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_field_type *)&cs::ast_field_type::FLT96;
  *(cs::ast_field_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1type_1FLT128_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_field_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_field_type *)&cs::ast_field_type::FLT128;
  *(cs::ast_field_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1type_1CONST_1STR64_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_field_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_field_type *)&cs::ast_field_type::CONST_STR64;
  *(cs::ast_field_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1type_1CONST_1STR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_field_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_field_type *)&cs::ast_field_type::CONST_STR;
  *(cs::ast_field_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1type_1ABS_1LOC_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_field_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_field_type *)&cs::ast_field_type::ABS_LOC;
  *(cs::ast_field_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1type_1RESERVED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_field_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_field_type *)&cs::ast_field_type::RESERVED;
  *(cs::ast_field_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1ast_1field_1type(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::ast_field_type *arg1 = (cs::ast_field_type *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::ast_field_type **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1ast_1traverse_1flags(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  cs::ast_traverse_flags *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (cs::ast_traverse_flags *)new cs::ast_traverse_flags(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_traverse_flags **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_ast_1traverse_1flags_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::ast_traverse_flags *arg1 = (cs::ast_traverse_flags *) 0 ;
  cs::ast_traverse_flags *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::ast_traverse_flags **)&jarg1; 
  arg2 = *(cs::ast_traverse_flags **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::ast_traverse_flags const & reference is null");
    return 0;
  } 
  result = (int)((cs::ast_traverse_flags const *)arg1)->cmp((cs::ast_traverse_flags const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_ast_1traverse_1flags_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::ast_traverse_flags *arg1 = (cs::ast_traverse_flags *) 0 ;
  cs::ast_traverse_flags *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::ast_traverse_flags **)&jarg1; 
  arg2 = *(cs::ast_traverse_flags **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::ast_traverse_flags const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::ast_traverse_flags const *)arg1)->operator ==((cs::ast_traverse_flags const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_ast_1traverse_1flags_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::ast_traverse_flags *arg1 = (cs::ast_traverse_flags *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_traverse_flags **)&jarg1; 
  result = (int)((cs::ast_traverse_flags const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1traverse_1flags_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast_traverse_flags *arg1 = (cs::ast_traverse_flags *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_traverse_flags **)&jarg1; 
  {
    try {
      result = ((cs::ast_traverse_flags const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1traverse_1flags_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast_traverse_flags *arg1 = (cs::ast_traverse_flags *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_traverse_flags **)&jarg1; 
  result = ((cs::ast_traverse_flags const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1traverse_1flags_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast_traverse_flags *arg1 = (cs::ast_traverse_flags *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_traverse_flags **)&jarg1; 
  {
    try {
      result = ((cs::ast_traverse_flags const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1traverse_1flags_1or_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::ast_traverse_flags *arg1 = (cs::ast_traverse_flags *) 0 ;
  cs::ast_traverse_flags *arg2 = 0 ;
  SwigValueWrapper< cs::ast_traverse_flags > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::ast_traverse_flags **)&jarg1; 
  arg2 = *(cs::ast_traverse_flags **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::ast_traverse_flags const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::ast_traverse_flags const *)arg1)->or_((cs::ast_traverse_flags const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_traverse_flags **)&jresult = new cs::ast_traverse_flags((const cs::ast_traverse_flags &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1traverse_1flags_1and_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::ast_traverse_flags *arg1 = (cs::ast_traverse_flags *) 0 ;
  cs::ast_traverse_flags *arg2 = 0 ;
  SwigValueWrapper< cs::ast_traverse_flags > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::ast_traverse_flags **)&jarg1; 
  arg2 = *(cs::ast_traverse_flags **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::ast_traverse_flags const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::ast_traverse_flags const *)arg1)->and_((cs::ast_traverse_flags const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_traverse_flags **)&jresult = new cs::ast_traverse_flags((const cs::ast_traverse_flags &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1traverse_1flags_1not_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::ast_traverse_flags *arg1 = (cs::ast_traverse_flags *) 0 ;
  SwigValueWrapper< cs::ast_traverse_flags > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_traverse_flags **)&jarg1; 
  {
    try {
      result = ((cs::ast_traverse_flags const *)arg1)->not_();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_traverse_flags **)&jresult = new cs::ast_traverse_flags((const cs::ast_traverse_flags &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1traverse_1flags_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_traverse_flags *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_traverse_flags *)&cs::ast_traverse_flags::NONE;
  *(cs::ast_traverse_flags **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1traverse_1flags_1RIGHT_1TO_1LEFT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_traverse_flags *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_traverse_flags *)&cs::ast_traverse_flags::RIGHT_TO_LEFT;
  *(cs::ast_traverse_flags **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1traverse_1flags_1POSTORDER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_traverse_flags *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_traverse_flags *)&cs::ast_traverse_flags::POSTORDER;
  *(cs::ast_traverse_flags **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1ast_1traverse_1flags(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::ast_traverse_flags *arg1 = (cs::ast_traverse_flags *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::ast_traverse_flags **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1ast_1traverse_1directives(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  cs::ast_traverse_directives *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (cs::ast_traverse_directives *)new cs::ast_traverse_directives(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_traverse_directives **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_ast_1traverse_1directives_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::ast_traverse_directives *arg1 = (cs::ast_traverse_directives *) 0 ;
  cs::ast_traverse_directives *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::ast_traverse_directives **)&jarg1; 
  arg2 = *(cs::ast_traverse_directives **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::ast_traverse_directives const & reference is null");
    return 0;
  } 
  result = (int)((cs::ast_traverse_directives const *)arg1)->cmp((cs::ast_traverse_directives const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_ast_1traverse_1directives_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::ast_traverse_directives *arg1 = (cs::ast_traverse_directives *) 0 ;
  cs::ast_traverse_directives *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::ast_traverse_directives **)&jarg1; 
  arg2 = *(cs::ast_traverse_directives **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::ast_traverse_directives const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::ast_traverse_directives const *)arg1)->operator ==((cs::ast_traverse_directives const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_ast_1traverse_1directives_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::ast_traverse_directives *arg1 = (cs::ast_traverse_directives *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_traverse_directives **)&jarg1; 
  result = (int)((cs::ast_traverse_directives const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1traverse_1directives_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast_traverse_directives *arg1 = (cs::ast_traverse_directives *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_traverse_directives **)&jarg1; 
  {
    try {
      result = ((cs::ast_traverse_directives const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1traverse_1directives_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast_traverse_directives *arg1 = (cs::ast_traverse_directives *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_traverse_directives **)&jarg1; 
  result = ((cs::ast_traverse_directives const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1traverse_1directives_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast_traverse_directives *arg1 = (cs::ast_traverse_directives *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_traverse_directives **)&jarg1; 
  {
    try {
      result = ((cs::ast_traverse_directives const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1traverse_1directives_1or_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::ast_traverse_directives *arg1 = (cs::ast_traverse_directives *) 0 ;
  cs::ast_traverse_directives *arg2 = 0 ;
  SwigValueWrapper< cs::ast_traverse_directives > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::ast_traverse_directives **)&jarg1; 
  arg2 = *(cs::ast_traverse_directives **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::ast_traverse_directives const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::ast_traverse_directives const *)arg1)->or_((cs::ast_traverse_directives const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_traverse_directives **)&jresult = new cs::ast_traverse_directives((const cs::ast_traverse_directives &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1traverse_1directives_1and_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::ast_traverse_directives *arg1 = (cs::ast_traverse_directives *) 0 ;
  cs::ast_traverse_directives *arg2 = 0 ;
  SwigValueWrapper< cs::ast_traverse_directives > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::ast_traverse_directives **)&jarg1; 
  arg2 = *(cs::ast_traverse_directives **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::ast_traverse_directives const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::ast_traverse_directives const *)arg1)->and_((cs::ast_traverse_directives const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_traverse_directives **)&jresult = new cs::ast_traverse_directives((const cs::ast_traverse_directives &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1traverse_1directives_1not_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::ast_traverse_directives *arg1 = (cs::ast_traverse_directives *) 0 ;
  SwigValueWrapper< cs::ast_traverse_directives > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_traverse_directives **)&jarg1; 
  {
    try {
      result = ((cs::ast_traverse_directives const *)arg1)->not_();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_traverse_directives **)&jresult = new cs::ast_traverse_directives((const cs::ast_traverse_directives &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1traverse_1directives_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_traverse_directives *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_traverse_directives *)&cs::ast_traverse_directives::NONE;
  *(cs::ast_traverse_directives **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1traverse_1directives_1SKIP_1CHILDREN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::ast_traverse_directives *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::ast_traverse_directives *)&cs::ast_traverse_directives::SKIP_CHILDREN;
  *(cs::ast_traverse_directives **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1ast_1traverse_1directives(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::ast_traverse_directives *arg1 = (cs::ast_traverse_directives *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::ast_traverse_directives **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_ast_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::ast *arg1 = (cs::ast *) 0 ;
  cs::ast *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::ast **)&jarg1; 
  arg2 = *(cs::ast **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::ast const & reference is null");
    return 0;
  } 
  result = (int)((cs::ast const *)arg1)->cmp((cs::ast const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_ast_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::ast *arg1 = (cs::ast *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast **)&jarg1; 
  result = (int)((cs::ast const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_ast_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::ast *arg1 = (cs::ast *) 0 ;
  cs::ast *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::ast **)&jarg1; 
  arg2 = *(cs::ast **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::ast const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->operator ==((cs::ast const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1get_1class(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::ast *arg1 = (cs::ast *) 0 ;
  SwigValueWrapper< cs::ast_class > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast **)&jarg1; 
  {
    try {
      result = ((cs::ast const *)arg1)->get_class();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_class **)&jresult = new cs::ast_class((const cs::ast_class &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_ast_1is_1a(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::ast *arg1 = (cs::ast *) 0 ;
  SwigValueWrapper< cs::ast_class > arg2 ;
  cs::ast_class *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::ast **)&jarg1; 
  argp2 = *(cs::ast_class **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_class");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((cs::ast const *)arg1)->is_a(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::ast *arg1 = (cs::ast *) 0 ;
  SwigValueWrapper< cs::ast_ordinal > arg2 ;
  cs::ast_ordinal *argp2 ;
  SwigValueWrapper< cs::ast_field > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::ast **)&jarg1; 
  argp2 = *(cs::ast_ordinal **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_ordinal");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((cs::ast const *)arg1)->operator [](arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_field **)&jresult = new cs::ast_field((const cs::ast_field &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  cs::ast *arg1 = (cs::ast *) 0 ;
  csuint32 arg2 ;
  SwigValueWrapper< cs::ast_field > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast **)&jarg1; 
  arg2 = (csuint32)jarg2; 
  {
    try {
      result = ((cs::ast const *)arg1)->operator [](arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_field **)&jresult = new cs::ast_field((const cs::ast_field &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_ast_1has_1field_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::ast *arg1 = (cs::ast *) 0 ;
  SwigValueWrapper< cs::ast_ordinal > arg2 ;
  cs::ast_ordinal *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::ast **)&jarg1; 
  argp2 = *(cs::ast_ordinal **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_ordinal");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((cs::ast const *)arg1)->has_field(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_ast_1has_1field_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  cs::ast *arg1 = (cs::ast *) 0 ;
  csuint32 arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast **)&jarg1; 
  arg2 = (csuint32)jarg2; 
  {
    try {
      result = (bool)((cs::ast const *)arg1)->has_field(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1num_1fields(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::ast *arg1 = (cs::ast *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast **)&jarg1; 
  {
    try {
      result = ((cs::ast const *)arg1)->num_fields();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1fields(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::ast *arg1 = (cs::ast *) 0 ;
  std::vector< cs::ast_field > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast **)&jarg1; 
  {
    try {
      result = ((cs::ast const *)arg1)->fields();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::ast_field > **)&jresult = new std::vector< cs::ast_field >((const std::vector< cs::ast_field > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1children(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::ast *arg1 = (cs::ast *) 0 ;
  std::vector< cs::ast_field > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast **)&jarg1; 
  {
    try {
      result = ((cs::ast const *)arg1)->children();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::ast_field > **)&jresult = new std::vector< cs::ast_field >((const std::vector< cs::ast_field > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1attributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::ast *arg1 = (cs::ast *) 0 ;
  std::vector< cs::ast_field > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast **)&jarg1; 
  {
    try {
      result = ((cs::ast const *)arg1)->attributes();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::ast_field > **)&jresult = new std::vector< cs::ast_field >((const std::vector< cs::ast_field > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1pretty_1print_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  cs::ast *arg1 = (cs::ast *) 0 ;
  size_t arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((cs::ast const *)arg1)->pretty_print(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1pretty_1print_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast *arg1 = (cs::ast *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast **)&jarg1; 
  {
    try {
      result = ((cs::ast const *)arg1)->pretty_print();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1dump_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  cs::ast *arg1 = (cs::ast *) 0 ;
  size_t arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((cs::ast const *)arg1)->dump(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1dump_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast *arg1 = (cs::ast *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast **)&jarg1; 
  {
    try {
      result = ((cs::ast const *)arg1)->dump();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_ast_1set_1field(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cs::ast *arg1 = (cs::ast *) 0 ;
  cs::ast_field *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::ast **)&jarg1; 
  arg2 = *(cs::ast_field **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::ast_field const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set_field((cs::ast_field const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1traverse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::ast *arg1 = (cs::ast *) 0 ;
  SwigValueWrapper< cs::ast_traverse_flags > arg2 ;
  cs::ast_traverse_flags *argp2 ;
  SwigValueWrapper< cs::iterator_adapter< cs::ast_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::ast **)&jarg1; 
  argp2 = *(cs::ast_traverse_flags **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_traverse_flags");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((cs::ast const *)arg1)->traverse(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_iterator **)&jresult = new cs::ast_iterator((const cs::ast_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1traverse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::ast *arg1 = (cs::ast *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::ast_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast **)&jarg1; 
  {
    try {
      result = ((cs::ast const *)arg1)->traverse();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_iterator **)&jresult = new cs::ast_iterator((const cs::ast_iterator &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast *arg1 = (cs::ast *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast **)&jarg1; 
  {
    try {
      result = ((cs::ast const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast *arg1 = (cs::ast *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast **)&jarg1; 
  result = ((cs::ast const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1ast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::ast *arg1 = (cs::ast *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::ast **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1ast_1field_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::ast_ordinal > arg1 ;
  SwigValueWrapper< cs::ast > arg2 ;
  cs::ast_ordinal *argp1 ;
  cs::ast *argp2 ;
  cs::ast_field *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(cs::ast_ordinal **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_ordinal");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(cs::ast **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (cs::ast_field *)new cs::ast_field(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_field **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1ast_1field_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::ast_ordinal > arg1 ;
  SwigValueWrapper< cs::ast_class > arg2 ;
  cs::ast_ordinal *argp1 ;
  cs::ast_class *argp2 ;
  cs::ast_field *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(cs::ast_ordinal **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_ordinal");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(cs::ast_class **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_class");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (cs::ast_field *)new cs::ast_field(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_field **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1ast_1field_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::ast_ordinal > arg1 ;
  bool arg2 ;
  cs::ast_ordinal *argp1 ;
  cs::ast_field *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(cs::ast_ordinal **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_ordinal");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (cs::ast_field *)new cs::ast_field(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_field **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1ast_1field_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::ast_ordinal > arg1 ;
  std::string *arg2 = 0 ;
  cs::ast_ordinal *argp1 ;
  cs::ast_field *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(cs::ast_ordinal **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_ordinal");
    return 0;
  }
  arg1 = *argp1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (cs::ast_field *)new cs::ast_field(arg1,(std::string const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_field **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1ast_1field(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::ast_field *arg1 = (cs::ast_field *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::ast_field **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1ast_1field_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::ast_field *arg1 = 0 ;
  cs::ast_field *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_field **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::ast_field const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cs::ast_field *)new cs::ast_field((cs::ast_field const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_field **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1ast_1field_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::ast_ordinal > arg1 ;
  SwigValueWrapper< cs::symbol > arg2 ;
  cs::ast_ordinal *argp1 ;
  cs::symbol *argp2 ;
  cs::ast_field *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(cs::ast_ordinal **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_ordinal");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(cs::symbol **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::symbol");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (cs::ast_field *)new cs::ast_field(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_field **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1ordinal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::ast_field *arg1 = (cs::ast_field *) 0 ;
  SwigValueWrapper< cs::ast_ordinal > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_field **)&jarg1; 
  {
    try {
      result = ((cs::ast_field const *)arg1)->ordinal();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_ordinal **)&jresult = new cs::ast_ordinal((const cs::ast_ordinal &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1get_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::ast_field *arg1 = (cs::ast_field *) 0 ;
  SwigValueWrapper< cs::ast_field_type > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_field **)&jarg1; 
  {
    try {
      result = ((cs::ast_field const *)arg1)->get_type();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_field_type **)&jresult = new cs::ast_field_type((const cs::ast_field_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1as_1ast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::ast_field *arg1 = (cs::ast_field *) 0 ;
  SwigValueWrapper< cs::ast > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_field **)&jarg1; 
  {
    try {
      result = ((cs::ast_field const *)arg1)->as_ast();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast **)&jresult = new cs::ast((const cs::ast &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1as_1ast_1class(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::ast_field *arg1 = (cs::ast_field *) 0 ;
  SwigValueWrapper< cs::ast_class > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_field **)&jarg1; 
  {
    try {
      result = ((cs::ast_field const *)arg1)->as_ast_class();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_class **)&jresult = new cs::ast_class((const cs::ast_class &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1as_1boolean(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::ast_field *arg1 = (cs::ast_field *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_field **)&jarg1; 
  {
    try {
      result = (bool)((cs::ast_field const *)arg1)->as_boolean();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1as_1enum_1value_1int32(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::ast_field *arg1 = (cs::ast_field *) 0 ;
  csint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_field **)&jarg1; 
  {
    try {
      result = (csint32)((cs::ast_field const *)arg1)->as_enum_value_int32();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1as_1enum_1value_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast_field *arg1 = (cs::ast_field *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_field **)&jarg1; 
  {
    try {
      result = ((cs::ast_field const *)arg1)->as_enum_value_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jbyte JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1as_1int8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyte jresult = 0 ;
  cs::ast_field *arg1 = (cs::ast_field *) 0 ;
  csint8 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_field **)&jarg1; 
  {
    try {
      result = (csint8)((cs::ast_field const *)arg1)->as_int8();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1as_1uint8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  cs::ast_field *arg1 = (cs::ast_field *) 0 ;
  csuint8 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_field **)&jarg1; 
  {
    try {
      result = (csuint8)((cs::ast_field const *)arg1)->as_uint8();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1as_1int16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  cs::ast_field *arg1 = (cs::ast_field *) 0 ;
  csint16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_field **)&jarg1; 
  {
    try {
      result = (csint16)((cs::ast_field const *)arg1)->as_int16();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1as_1uint16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::ast_field *arg1 = (cs::ast_field *) 0 ;
  csuint16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_field **)&jarg1; 
  {
    try {
      result = (csuint16)((cs::ast_field const *)arg1)->as_uint16();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1as_1int32(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::ast_field *arg1 = (cs::ast_field *) 0 ;
  csint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_field **)&jarg1; 
  {
    try {
      result = (csint32)((cs::ast_field const *)arg1)->as_int32();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1as_1uint32(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::ast_field *arg1 = (cs::ast_field *) 0 ;
  csuint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_field **)&jarg1; 
  {
    try {
      result = (csuint32)((cs::ast_field const *)arg1)->as_uint32();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1as_1int64(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::ast_field *arg1 = (cs::ast_field *) 0 ;
  csint64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_field **)&jarg1; 
  {
    try {
      result = (csint64)((cs::ast_field const *)arg1)->as_int64();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1as_1uint64(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  cs::ast_field *arg1 = (cs::ast_field *) 0 ;
  csuint64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_field **)&jarg1; 
  {
    try {
      result = (csuint64)((cs::ast_field const *)arg1)->as_uint64();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1as_1flt32(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  cs::ast_field *arg1 = (cs::ast_field *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_field **)&jarg1; 
  {
    try {
      result = (float)((cs::ast_field const *)arg1)->as_flt32();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1as_1flt64(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cs::ast_field *arg1 = (cs::ast_field *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_field **)&jarg1; 
  {
    try {
      result = (double)((cs::ast_field const *)arg1)->as_flt64();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1as_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast_field *arg1 = (cs::ast_field *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_field **)&jarg1; 
  {
    try {
      result = ((cs::ast_field const *)arg1)->as_str();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1as_1symbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::ast_field *arg1 = (cs::ast_field *) 0 ;
  SwigValueWrapper< cs::symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_field **)&jarg1; 
  {
    try {
      result = ((cs::ast_field const *)arg1)->as_symbol();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::symbol **)&jresult = new cs::symbol((const cs::symbol &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1from_1int8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyte jarg2) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::ast_ordinal > arg1 ;
  csint8 arg2 ;
  cs::ast_ordinal *argp1 ;
  SwigValueWrapper< cs::ast_field > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(cs::ast_ordinal **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_ordinal");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (csint8)jarg2; 
  {
    try {
      result = cs_ast_field_from_int8(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_field **)&jresult = new cs::ast_field((const cs::ast_field &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1from_1uint8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::ast_ordinal > arg1 ;
  csuint8 arg2 ;
  cs::ast_ordinal *argp1 ;
  SwigValueWrapper< cs::ast_field > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(cs::ast_ordinal **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_ordinal");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (csuint8)jarg2; 
  {
    try {
      result = cs_ast_field_from_uint8(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_field **)&jresult = new cs::ast_field((const cs::ast_field &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1from_1int16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::ast_ordinal > arg1 ;
  csint16 arg2 ;
  cs::ast_ordinal *argp1 ;
  SwigValueWrapper< cs::ast_field > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(cs::ast_ordinal **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_ordinal");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (csint16)jarg2; 
  {
    try {
      result = cs_ast_field_from_int16(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_field **)&jresult = new cs::ast_field((const cs::ast_field &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1from_1uint16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::ast_ordinal > arg1 ;
  csuint16 arg2 ;
  cs::ast_ordinal *argp1 ;
  SwigValueWrapper< cs::ast_field > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(cs::ast_ordinal **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_ordinal");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (csuint16)jarg2; 
  {
    try {
      result = cs_ast_field_from_uint16(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_field **)&jresult = new cs::ast_field((const cs::ast_field &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1from_1int32(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::ast_ordinal > arg1 ;
  csint32 arg2 ;
  cs::ast_ordinal *argp1 ;
  SwigValueWrapper< cs::ast_field > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(cs::ast_ordinal **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_ordinal");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (csint32)jarg2; 
  {
    try {
      result = cs_ast_field_from_int32(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_field **)&jresult = new cs::ast_field((const cs::ast_field &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1from_1uint32(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::ast_ordinal > arg1 ;
  csuint32 arg2 ;
  cs::ast_ordinal *argp1 ;
  SwigValueWrapper< cs::ast_field > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(cs::ast_ordinal **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_ordinal");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (csuint32)jarg2; 
  {
    try {
      result = cs_ast_field_from_uint32(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_field **)&jresult = new cs::ast_field((const cs::ast_field &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1from_1int64(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::ast_ordinal > arg1 ;
  csint64 arg2 ;
  cs::ast_ordinal *argp1 ;
  SwigValueWrapper< cs::ast_field > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(cs::ast_ordinal **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_ordinal");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (csint64)jarg2; 
  {
    try {
      result = cs_ast_field_from_int64(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_field **)&jresult = new cs::ast_field((const cs::ast_field &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1from_1uint64(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::ast_ordinal > arg1 ;
  csuint64 arg2 ;
  cs::ast_ordinal *argp1 ;
  SwigValueWrapper< cs::ast_field > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(cs::ast_ordinal **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_ordinal");
    return 0;
  }
  arg1 = *argp1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (csuint64)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    try {
      result = cs_ast_field_from_uint64(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_field **)&jresult = new cs::ast_field((const cs::ast_field &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1from_1float(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::ast_ordinal > arg1 ;
  float arg2 ;
  cs::ast_ordinal *argp1 ;
  SwigValueWrapper< cs::ast_field > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(cs::ast_ordinal **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_ordinal");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (float)jarg2; 
  {
    try {
      result = cs_ast_field_from_float(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_field **)&jresult = new cs::ast_field((const cs::ast_field &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1from_1double(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::ast_ordinal > arg1 ;
  double arg2 ;
  cs::ast_ordinal *argp1 ;
  SwigValueWrapper< cs::ast_field > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(cs::ast_ordinal **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_ordinal");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = cs_ast_field_from_double(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_field **)&jresult = new cs::ast_field((const cs::ast_field &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::ast_field *arg1 = (cs::ast_field *) 0 ;
  SwigValueWrapper< cs::ast_ordinal > arg2 ;
  cs::ast_ordinal *argp2 ;
  SwigValueWrapper< cs::ast_field > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::ast_field **)&jarg1; 
  argp2 = *(cs::ast_ordinal **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_ordinal");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((cs::ast_field const *)arg1)->operator [](arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_field **)&jresult = new cs::ast_field((const cs::ast_field &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  cs::ast_field *arg1 = (cs::ast_field *) 0 ;
  csuint32 arg2 ;
  SwigValueWrapper< cs::ast_field > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_field **)&jarg1; 
  arg2 = (csuint32)jarg2; 
  {
    try {
      result = ((cs::ast_field const *)arg1)->operator [](arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_field **)&jresult = new cs::ast_field((const cs::ast_field &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1has_1field_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::ast_field *arg1 = (cs::ast_field *) 0 ;
  SwigValueWrapper< cs::ast_ordinal > arg2 ;
  cs::ast_ordinal *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::ast_field **)&jarg1; 
  argp2 = *(cs::ast_ordinal **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_ordinal");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((cs::ast_field const *)arg1)->has_field(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1has_1field_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  cs::ast_field *arg1 = (cs::ast_field *) 0 ;
  csuint32 arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_field **)&jarg1; 
  arg2 = (csuint32)jarg2; 
  {
    try {
      result = (bool)((cs::ast_field const *)arg1)->has_field(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1num_1fields(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::ast_field *arg1 = (cs::ast_field *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_field **)&jarg1; 
  {
    try {
      result = ((cs::ast_field const *)arg1)->num_fields();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast_field *arg1 = (cs::ast_field *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_field **)&jarg1; 
  {
    try {
      result = ((cs::ast_field const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast_field *arg1 = (cs::ast_field *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_field **)&jarg1; 
  result = ((cs::ast_field const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_ast_1field_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::ast_field *arg1 = (cs::ast_field *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_field **)&jarg1; 
  result = (int)((cs::ast_field const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1bindings_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cs::ast_bindings *arg1 = (cs::ast_bindings *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< cs::ast_field > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_bindings **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = ((cs::ast_bindings const *)arg1)->operator []((std::string const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_field **)&jresult = new cs::ast_field((const cs::ast_field &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_ast_1bindings_1matched(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::ast_bindings *arg1 = (cs::ast_bindings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_bindings **)&jarg1; 
  {
    try {
      result = (bool)((cs::ast_bindings const *)arg1)->matched();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_ast_1bindings_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  cs::ast_bindings *arg1 = (cs::ast_bindings *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_bindings **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (bool)((cs::ast_bindings const *)arg1)->contains((std::string const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1bindings_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::ast_bindings *arg1 = (cs::ast_bindings *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_bindings **)&jarg1; 
  {
    try {
      result = ((cs::ast_bindings const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1bindings_1items(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::ast_bindings *arg1 = (cs::ast_bindings *) 0 ;
  std::vector< cs::string_ast_field_pair > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_bindings **)&jarg1; 
  {
    try {
      result = ((cs::ast_bindings const *)arg1)->items();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::string_ast_field_pair > **)&jresult = new std::vector< cs::string_ast_field_pair >((const std::vector< cs::string_ast_field_pair > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1bindings_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast_bindings *arg1 = (cs::ast_bindings *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_bindings **)&jarg1; 
  {
    try {
      result = ((cs::ast_bindings const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1bindings_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast_bindings *arg1 = (cs::ast_bindings *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_bindings **)&jarg1; 
  result = ((cs::ast_bindings const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1ast_1bindings(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::ast_bindings *arg1 = (cs::ast_bindings *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::ast_bindings **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1pattern_1compilation_1error_1get_1pattern(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast_pattern_compilation_error *arg1 = (cs::ast_pattern_compilation_error *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_pattern_compilation_error **)&jarg1; 
  {
    try {
      result = ((cs::ast_pattern_compilation_error const *)arg1)->get_pattern();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1pattern_1compilation_1error_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast_pattern_compilation_error *arg1 = (cs::ast_pattern_compilation_error *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_pattern_compilation_error **)&jarg1; 
  {
    try {
      result = ((cs::ast_pattern_compilation_error const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1pattern_1compilation_1error_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast_pattern_compilation_error *arg1 = (cs::ast_pattern_compilation_error *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_pattern_compilation_error **)&jarg1; 
  result = ((cs::ast_pattern_compilation_error const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1ast_1pattern_1compilation_1error(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::ast_pattern_compilation_error *arg1 = (cs::ast_pattern_compilation_error *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::ast_pattern_compilation_error **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1ast_1pattern_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  cs::ast_pattern *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (cs::ast_pattern *)new cs::ast_pattern((std::string const &)*arg1);
    }
    catch (cs::ast_pattern_compilation_error &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/ast_pattern_compilation_error");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(JZ)V"), 
        (jlong)new cs::ast_pattern_compilation_error(e),
        (jboolean)1 );
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
  }
  *(cs::ast_pattern **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1ast_1pattern(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::ast_pattern *arg1 = (cs::ast_pattern *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::ast_pattern **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1ast_1pattern_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::ast_pattern *arg1 = 0 ;
  cs::ast_pattern *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_pattern **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::ast_pattern const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cs::ast_pattern *)new cs::ast_pattern((cs::ast_pattern const &)*arg1);
    }
    catch (cs::ast_pattern_compilation_error &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/ast_pattern_compilation_error");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(JZ)V"), 
        (jlong)new cs::ast_pattern_compilation_error(e),
        (jboolean)1 );
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
  }
  *(cs::ast_pattern **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_ast_1pattern_1match(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::ast_pattern *arg1 = (cs::ast_pattern *) 0 ;
  SwigValueWrapper< cs::ast > arg2 ;
  cs::ast *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::ast_pattern **)&jarg1; 
  argp2 = *(cs::ast **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((cs::ast_pattern const *)arg1)->match(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ast_1pattern_1match_1with_1bindings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::ast_pattern *arg1 = (cs::ast_pattern *) 0 ;
  SwigValueWrapper< cs::ast > arg2 ;
  cs::ast *argp2 ;
  SwigValueWrapper< cs::ast_bindings > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::ast_pattern **)&jarg1; 
  argp2 = *(cs::ast **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((cs::ast_pattern const *)arg1)->match_with_bindings(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast_bindings **)&jresult = new cs::ast_bindings((const cs::ast_bindings &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1pattern_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast_pattern *arg1 = (cs::ast_pattern *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_pattern **)&jarg1; 
  {
    try {
      result = ((cs::ast_pattern const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ast_1pattern_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ast_pattern *arg1 = (cs::ast_pattern *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ast_pattern **)&jarg1; 
  result = ((cs::ast_pattern const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1language(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  cs::language *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (cs::language *)new cs::language(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::language **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_language_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::language *arg1 = (cs::language *) 0 ;
  cs::language *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::language **)&jarg1; 
  arg2 = *(cs::language **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::language const & reference is null");
    return 0;
  } 
  result = (int)((cs::language const *)arg1)->cmp((cs::language const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_language_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::language *arg1 = (cs::language *) 0 ;
  cs::language *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::language **)&jarg1; 
  arg2 = *(cs::language **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::language const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::language const *)arg1)->operator ==((cs::language const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_language_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::language *arg1 = (cs::language *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::language **)&jarg1; 
  result = (int)((cs::language const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_language_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::language *arg1 = (cs::language *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::language **)&jarg1; 
  {
    try {
      result = ((cs::language const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_language_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::language *arg1 = (cs::language *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::language **)&jarg1; 
  result = ((cs::language const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_language_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::language *arg1 = (cs::language *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::language **)&jarg1; 
  {
    try {
      result = ((cs::language const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_language_1is_1machine_1code(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::language *arg1 = (cs::language *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::language **)&jarg1; 
  {
    try {
      result = (bool)((cs::language const *)arg1)->is_machine_code();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_language_1WILDCARD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::language *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::language *)&cs::language::WILDCARD;
  *(cs::language **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_language_1SYNTHETIC_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::language *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::language *)&cs::language::SYNTHETIC;
  *(cs::language **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_language_1C_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::language *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::language *)&cs::language::C;
  *(cs::language **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_language_1CPP_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::language *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::language *)&cs::language::CPP;
  *(cs::language **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_language_1X86_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::language *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::language *)&cs::language::X86;
  *(cs::language **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_language_1X64_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::language *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::language *)&cs::language::X64;
  *(cs::language **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_language_1JAVA_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::language *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::language *)&cs::language::JAVA;
  *(cs::language **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_language_1CSHARP_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::language *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::language *)&cs::language::CSHARP;
  *(cs::language **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_language_1PPC32_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::language *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::language *)&cs::language::PPC32;
  *(cs::language **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_language_1ARM_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::language *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::language *)&cs::language::ARM;
  *(cs::language **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1language(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::language *arg1 = (cs::language *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::language **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_compunit_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  cs::compunit *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::compunit **)&jarg1; 
  arg2 = *(cs::compunit **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::compunit const & reference is null");
    return 0;
  } 
  result = (int)((cs::compunit const *)arg1)->cmp((cs::compunit const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_compunit_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  result = (int)((cs::compunit const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_compunit_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  cs::compunit *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::compunit **)&jarg1; 
  arg2 = *(cs::compunit **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::compunit const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->operator ==((cs::compunit const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_compunit_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  {
    try {
      result = ((cs::compunit const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_compunit_1normalized_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  {
    try {
      result = ((cs::compunit const *)arg1)->normalized_name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1lookup_1symbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< cs::symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = ((cs::compunit const *)arg1)->lookup_symbol((std::string const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::symbol **)&jresult = new cs::symbol((const cs::symbol &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1get_1ast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  SwigValueWrapper< cs::ast_family > arg2 ;
  cs::ast_family *argp2 ;
  SwigValueWrapper< cs::ast > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::compunit **)&jarg1; 
  argp2 = *(cs::ast_family **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_family");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((cs::compunit const *)arg1)->get_ast(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast **)&jresult = new cs::ast((const cs::ast &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_compunit_1set_1ast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  SwigValueWrapper< cs::ast_family > arg2 ;
  SwigValueWrapper< cs::ast > arg3 ;
  cs::ast_family *argp2 ;
  cs::ast *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cs::compunit **)&jarg1; 
  argp2 = *(cs::ast_family **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_family");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(cs::ast **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast");
    return ;
  }
  arg3 = *argp3; 
  {
    try {
      (arg1)->set_ast(arg2,arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1asts_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  cs_unitline arg2 ;
  std::vector< cs::ast_class > *arg3 = 0 ;
  std::vector< cs::ast > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(cs::compunit **)&jarg1; 
  arg2 = (cs_unitline)jarg2; 
  arg3 = *(std::vector< cs::ast_class > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::ast_class > const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::compunit const *)arg1)->asts_at(arg2,(std::vector< cs::ast_class > const &)*arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::ast > **)&jresult = new std::vector< cs::ast >((const std::vector< cs::ast > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_compunit_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jstring jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  cs_offset arg2 ;
  size_t arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  arg2 = (cs_offset)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = ((cs::compunit const *)arg1)->read(arg2,arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_compunit_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  cs_offset arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  arg2 = (cs_offset)jarg2; 
  {
    try {
      result = ((cs::compunit const *)arg1)->read(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_compunit_1read_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  {
    try {
      result = ((cs::compunit const *)arg1)->read();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1offset_1to_1sfileinst_1line(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  cs::compunit_offset arg2 ;
  SwigValueWrapper< std::pair< cs::sfileinst,unsigned int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  arg2 = (cs::compunit_offset)jarg2; 
  {
    try {
      result = ((cs::compunit const *)arg1)->offset_to_sfileinst_line(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::sfileinst_line_pair **)&jresult = new cs::sfileinst_line_pair((const cs::sfileinst_line_pair &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1offset_1to_1sfileinst_1line_1column(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  cs::compunit_offset arg2 ;
  SwigValueWrapper< std::pair< cs::sfileinst,std::pair< unsigned int,unsigned int > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  arg2 = (cs::compunit_offset)jarg2; 
  {
    try {
      result = ((cs::compunit const *)arg1)->offset_to_sfileinst_line_column(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::sfileinst_line_column **)&jresult = new cs::sfileinst_line_column((const cs::sfileinst_line_column &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1line_1to_1sfileinst_1line(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  cs::compunit_line arg2 ;
  SwigValueWrapper< std::pair< cs::sfileinst,unsigned int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  arg2 = (cs::compunit_line)jarg2; 
  {
    try {
      result = ((cs::compunit const *)arg1)->line_to_sfileinst_line(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::sfileinst_line_pair **)&jresult = new cs::sfileinst_line_pair((const cs::sfileinst_line_pair &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1offset_1to_1line(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  cs::compunit_offset arg2 ;
  cs::compunit_line result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  arg2 = (cs::compunit_offset)jarg2; 
  {
    try {
      result = (cs::compunit_line)((cs::compunit const *)arg1)->offset_to_line(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1offset_1range_1to_1sfileinst_1range(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  cs::compunit_offset arg2 ;
  cs::compunit_offset arg3 ;
  SwigValueWrapper< cs::sfileinst_range > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  arg2 = (cs::compunit_offset)jarg2; 
  arg3 = (cs::compunit_offset)jarg3; 
  {
    try {
      result = ((cs::compunit const *)arg1)->offset_range_to_sfileinst_range(arg2,arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::sfileinst_range **)&jresult = new cs::sfileinst_range((const cs::sfileinst_range &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1get_1language(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  SwigValueWrapper< cs::language > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  {
    try {
      result = ((cs::compunit const *)arg1)->get_language();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::language **)&jresult = new cs::language((const cs::language &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_compunit_1csonar_1front_1end_1run_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  {
    try {
      result = ((cs::compunit const *)arg1)->csonar_front_end_run_id();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_compunit_1compiler_1model(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  {
    try {
      result = ((cs::compunit const *)arg1)->compiler_model();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1compiler_1command_1line(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  {
    try {
      result = ((cs::compunit const *)arg1)->compiler_command_line();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1effective_1compiler_1flags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  {
    try {
      result = ((cs::compunit const *)arg1)->effective_compiler_flags();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1cs_1frontend_1command_1line(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  {
    try {
      result = ((cs::compunit const *)arg1)->cs_frontend_command_line();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1error_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  {
    try {
      result = ((cs::compunit const *)arg1)->error_count();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1warning_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  {
    try {
      result = ((cs::compunit const *)arg1)->warning_count();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1get_1sfileinst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  SwigValueWrapper< cs::sfileinst > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  {
    try {
      result = ((cs::compunit const *)arg1)->get_sfileinst();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::sfileinst **)&jresult = new cs::sfileinst((const cs::sfileinst &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1procedures(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::compunit_procedure_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  {
    try {
      result = ((cs::compunit const *)arg1)->procedures();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::compunit_procedure_iterator **)&jresult = new cs::compunit_procedure_iterator((const cs::compunit_procedure_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1global_1symbols(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::compunit_global_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  {
    try {
      result = ((cs::compunit const *)arg1)->global_symbols();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::compunit_global_iterator **)&jresult = new cs::compunit_global_iterator((const cs::compunit_global_iterator &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_compunit_1is_1valid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  {
    try {
      result = (bool)((cs::compunit const *)arg1)->is_valid();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_compunit_1is_1user(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  {
    try {
      result = (bool)((cs::compunit const *)arg1)->is_user();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_compunit_1is_1library_1model(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  {
    try {
      result = (bool)((cs::compunit const *)arg1)->is_library_model();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_compunit_1is_1rewriting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  {
    try {
      result = (bool)((cs::compunit const *)arg1)->is_rewriting();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_compunit_1is_1backend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  {
    try {
      result = (bool)((cs::compunit const *)arg1)->is_backend();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_compunit_1is_1shared(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  {
    try {
      result = (bool)((cs::compunit const *)arg1)->is_shared();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_compunit_1is_1hidden_1binary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  {
    try {
      result = (bool)((cs::compunit const *)arg1)->is_hidden_binary();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1line_1to_1sfile_1line(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  cs::compunit_line arg2 ;
  SwigValueWrapper< std::pair< cs::sfile,unsigned int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  arg2 = (cs::compunit_line)jarg2; 
  {
    try {
      result = ((cs::compunit const *)arg1)->line_to_sfile_line(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::sfile_line_pair **)&jresult = new cs::sfile_line_pair((const cs::sfile_line_pair &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_compunit_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  {
    try {
      result = ((cs::compunit const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_compunit_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::compunit **)&jarg1; 
  result = ((cs::compunit const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1compunit(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::compunit *arg1 = (cs::compunit *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::compunit **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1pdg_1edge_1kind_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  cs::pdg_edge_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (cs::pdg_edge_kind *)new cs::pdg_edge_kind(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::pdg_edge_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1kind_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::pdg_edge_kind *arg1 = (cs::pdg_edge_kind *) 0 ;
  cs::pdg_edge_kind *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::pdg_edge_kind **)&jarg1; 
  arg2 = *(cs::pdg_edge_kind **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::pdg_edge_kind const & reference is null");
    return 0;
  } 
  result = (int)((cs::pdg_edge_kind const *)arg1)->cmp((cs::pdg_edge_kind const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1kind_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::pdg_edge_kind *arg1 = (cs::pdg_edge_kind *) 0 ;
  cs::pdg_edge_kind *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::pdg_edge_kind **)&jarg1; 
  arg2 = *(cs::pdg_edge_kind **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::pdg_edge_kind const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::pdg_edge_kind const *)arg1)->operator ==((cs::pdg_edge_kind const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1kind_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::pdg_edge_kind *arg1 = (cs::pdg_edge_kind *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::pdg_edge_kind **)&jarg1; 
  result = (int)((cs::pdg_edge_kind const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1kind_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::pdg_edge_kind *arg1 = (cs::pdg_edge_kind *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::pdg_edge_kind **)&jarg1; 
  {
    try {
      result = ((cs::pdg_edge_kind const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1kind_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::pdg_edge_kind *arg1 = (cs::pdg_edge_kind *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::pdg_edge_kind **)&jarg1; 
  result = ((cs::pdg_edge_kind const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1pdg_1edge_1kind_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::pdg_edge_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (cs::pdg_edge_kind *)new cs::pdg_edge_kind();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::pdg_edge_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1kind_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::pdg_edge_kind *arg1 = (cs::pdg_edge_kind *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::pdg_edge_kind **)&jarg1; 
  {
    try {
      result = ((cs::pdg_edge_kind const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1kind_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::pdg_edge_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::pdg_edge_kind *)&cs::pdg_edge_kind::NONE;
  *(cs::pdg_edge_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1kind_1DATA_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::pdg_edge_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::pdg_edge_kind *)&cs::pdg_edge_kind::DATA;
  *(cs::pdg_edge_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1kind_1CONTROL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::pdg_edge_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::pdg_edge_kind *)&cs::pdg_edge_kind::CONTROL;
  *(cs::pdg_edge_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1kind_1DATACONTROL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::pdg_edge_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::pdg_edge_kind *)&cs::pdg_edge_kind::DATACONTROL;
  *(cs::pdg_edge_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1pdg_1edge_1kind(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::pdg_edge_kind *arg1 = (cs::pdg_edge_kind *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::pdg_edge_kind **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1point_1kind(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (cs::point_kind *)new cs::point_kind(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::point_kind *arg1 = (cs::point_kind *) 0 ;
  cs::point_kind *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::point_kind **)&jarg1; 
  arg2 = *(cs::point_kind **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::point_kind const & reference is null");
    return 0;
  } 
  result = (int)((cs::point_kind const *)arg1)->cmp((cs::point_kind const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::point_kind *arg1 = (cs::point_kind *) 0 ;
  cs::point_kind *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::point_kind **)&jarg1; 
  arg2 = *(cs::point_kind **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::point_kind const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::point_kind const *)arg1)->operator ==((cs::point_kind const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::point_kind *arg1 = (cs::point_kind *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point_kind **)&jarg1; 
  result = (int)((cs::point_kind const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::point_kind *arg1 = (cs::point_kind *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point_kind **)&jarg1; 
  {
    try {
      result = ((cs::point_kind const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::point_kind *arg1 = (cs::point_kind *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point_kind **)&jarg1; 
  result = ((cs::point_kind const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::point_kind *arg1 = (cs::point_kind *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point_kind **)&jarg1; 
  {
    try {
      result = ((cs::point_kind const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1participates_1in_1cfg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::point_kind *arg1 = (cs::point_kind *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point_kind **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->participates_in_cfg();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1RESERVED_1000_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::RESERVED_000;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1GLOBAL_1ACTUAL_1IN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::GLOBAL_ACTUAL_IN;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1GLOBAL_1ACTUAL_1OUT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::GLOBAL_ACTUAL_OUT;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1GLOBAL_1FORMAL_1IN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::GLOBAL_FORMAL_IN;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1GLOBAL_1FORMAL_1OUT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::GLOBAL_FORMAL_OUT;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1ACTUAL_1IN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::ACTUAL_IN;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1ACTUAL_1OUT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::ACTUAL_OUT;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1FORMAL_1IN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::FORMAL_IN;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1FORMAL_1OUT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::FORMAL_OUT;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1CALL_1SITE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::CALL_SITE;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1INDIRECT_1CALL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::INDIRECT_CALL;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1RESERVED_1002_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::RESERVED_002;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1ENTRY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::ENTRY;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1BODY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::BODY;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1EXIT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::EXIT;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1RESERVED_1003_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::RESERVED_003;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1DECLARATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::DECLARATION;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1VARIABLE_1INITIALIZATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::VARIABLE_INITIALIZATION;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1CONTROL_1POINT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::CONTROL_POINT;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1JUMP_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::JUMP;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1LABEL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::LABEL;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1SWITCH_1CASE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::SWITCH_CASE;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1RETURN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::RETURN;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1EXPRESSION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::EXPRESSION;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1UNAVAILABLE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::UNAVAILABLE;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1RESERVED_1004_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::RESERVED_004;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1AUXILIARY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::AUXILIARY;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1PHI_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::PHI;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1PI_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::PI;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1NORMAL_1EXIT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::NORMAL_EXIT;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1EXCPT_1EXIT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::EXCPT_EXIT;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1NORMAL_1RETURN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::NORMAL_RETURN;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1EXCPT_1RETURN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::EXCPT_RETURN;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1HAMMOCK_1HEADER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::HAMMOCK_HEADER;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1kind_1HAMMOCK_1EXIT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_kind *)&cs::point_kind::HAMMOCK_EXIT;
  *(cs::point_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1point_1kind(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::point_kind *arg1 = (cs::point_kind *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::point_kind **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1procedure_1kind(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  cs::procedure_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (cs::procedure_kind *)new cs::procedure_kind(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::procedure_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_procedure_1kind_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::procedure_kind *arg1 = (cs::procedure_kind *) 0 ;
  cs::procedure_kind *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::procedure_kind **)&jarg1; 
  arg2 = *(cs::procedure_kind **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::procedure_kind const & reference is null");
    return 0;
  } 
  result = (int)((cs::procedure_kind const *)arg1)->cmp((cs::procedure_kind const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_procedure_1kind_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::procedure_kind *arg1 = (cs::procedure_kind *) 0 ;
  cs::procedure_kind *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::procedure_kind **)&jarg1; 
  arg2 = *(cs::procedure_kind **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::procedure_kind const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::procedure_kind const *)arg1)->operator ==((cs::procedure_kind const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_procedure_1kind_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::procedure_kind *arg1 = (cs::procedure_kind *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure_kind **)&jarg1; 
  result = (int)((cs::procedure_kind const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_procedure_1kind_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::procedure_kind *arg1 = (cs::procedure_kind *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure_kind **)&jarg1; 
  {
    try {
      result = ((cs::procedure_kind const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_procedure_1kind_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::procedure_kind *arg1 = (cs::procedure_kind *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure_kind **)&jarg1; 
  result = ((cs::procedure_kind const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_procedure_1kind_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::procedure_kind *arg1 = (cs::procedure_kind *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure_kind **)&jarg1; 
  {
    try {
      result = ((cs::procedure_kind const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1kind_1USER_1DEFINED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::procedure_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::procedure_kind *)&cs::procedure_kind::USER_DEFINED;
  *(cs::procedure_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1kind_1GENERATED_1INDIRECT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::procedure_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::procedure_kind *)&cs::procedure_kind::GENERATED_INDIRECT;
  *(cs::procedure_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1kind_1UNDEFINED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::procedure_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::procedure_kind *)&cs::procedure_kind::UNDEFINED;
  *(cs::procedure_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1kind_1LIBRARY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::procedure_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::procedure_kind *)&cs::procedure_kind::LIBRARY;
  *(cs::procedure_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1kind_1SYSTEM_1INITIALIZATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::procedure_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::procedure_kind *)&cs::procedure_kind::SYSTEM_INITIALIZATION;
  *(cs::procedure_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1kind_1FILE_1INITIALIZATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::procedure_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::procedure_kind *)&cs::procedure_kind::FILE_INITIALIZATION;
  *(cs::procedure_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1kind_1HAMMOCK_1GENERATED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::procedure_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::procedure_kind *)&cs::procedure_kind::HAMMOCK_GENERATED;
  *(cs::procedure_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1procedure_1kind(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::procedure_kind *arg1 = (cs::procedure_kind *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::procedure_kind **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1depfilter_1procedure_1directive(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  cs::depfilter_procedure_directive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (cs::depfilter_procedure_directive *)new cs::depfilter_procedure_directive(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::depfilter_procedure_directive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_depfilter_1procedure_1directive_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::depfilter_procedure_directive *arg1 = (cs::depfilter_procedure_directive *) 0 ;
  cs::depfilter_procedure_directive *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::depfilter_procedure_directive **)&jarg1; 
  arg2 = *(cs::depfilter_procedure_directive **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::depfilter_procedure_directive const & reference is null");
    return 0;
  } 
  result = (int)((cs::depfilter_procedure_directive const *)arg1)->cmp((cs::depfilter_procedure_directive const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_depfilter_1procedure_1directive_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::depfilter_procedure_directive *arg1 = (cs::depfilter_procedure_directive *) 0 ;
  cs::depfilter_procedure_directive *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::depfilter_procedure_directive **)&jarg1; 
  arg2 = *(cs::depfilter_procedure_directive **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::depfilter_procedure_directive const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::depfilter_procedure_directive const *)arg1)->operator ==((cs::depfilter_procedure_directive const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_depfilter_1procedure_1directive_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::depfilter_procedure_directive *arg1 = (cs::depfilter_procedure_directive *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::depfilter_procedure_directive **)&jarg1; 
  result = (int)((cs::depfilter_procedure_directive const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_depfilter_1procedure_1directive_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::depfilter_procedure_directive *arg1 = (cs::depfilter_procedure_directive *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::depfilter_procedure_directive **)&jarg1; 
  {
    try {
      result = ((cs::depfilter_procedure_directive const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_depfilter_1procedure_1directive_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::depfilter_procedure_directive *arg1 = (cs::depfilter_procedure_directive *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::depfilter_procedure_directive **)&jarg1; 
  result = ((cs::depfilter_procedure_directive const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_depfilter_1procedure_1directive_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::depfilter_procedure_directive *arg1 = (cs::depfilter_procedure_directive *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::depfilter_procedure_directive **)&jarg1; 
  {
    try {
      result = ((cs::depfilter_procedure_directive const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_depfilter_1procedure_1directive_1DIRECTIVE_1SHOW_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::depfilter_procedure_directive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::depfilter_procedure_directive *)&cs::depfilter_procedure_directive::DIRECTIVE_SHOW;
  *(cs::depfilter_procedure_directive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_depfilter_1procedure_1directive_1DIRECTIVE_1SKIP_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::depfilter_procedure_directive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::depfilter_procedure_directive *)&cs::depfilter_procedure_directive::DIRECTIVE_SKIP;
  *(cs::depfilter_procedure_directive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_depfilter_1procedure_1directive_1DIRECTIVE_1STOP_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::depfilter_procedure_directive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::depfilter_procedure_directive *)&cs::depfilter_procedure_directive::DIRECTIVE_STOP;
  *(cs::depfilter_procedure_directive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_depfilter_1procedure_1directive_1DIRECTIVE_1OPAQUE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::depfilter_procedure_directive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::depfilter_procedure_directive *)&cs::depfilter_procedure_directive::DIRECTIVE_OPAQUE;
  *(cs::depfilter_procedure_directive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1depfilter_1procedure_1directive(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::depfilter_procedure_directive *arg1 = (cs::depfilter_procedure_directive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::depfilter_procedure_directive **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1depfilter_1point_1directive(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  cs::depfilter_point_directive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (cs::depfilter_point_directive *)new cs::depfilter_point_directive(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::depfilter_point_directive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_depfilter_1point_1directive_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::depfilter_point_directive *arg1 = (cs::depfilter_point_directive *) 0 ;
  cs::depfilter_point_directive *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::depfilter_point_directive **)&jarg1; 
  arg2 = *(cs::depfilter_point_directive **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::depfilter_point_directive const & reference is null");
    return 0;
  } 
  result = (int)((cs::depfilter_point_directive const *)arg1)->cmp((cs::depfilter_point_directive const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_depfilter_1point_1directive_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::depfilter_point_directive *arg1 = (cs::depfilter_point_directive *) 0 ;
  cs::depfilter_point_directive *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::depfilter_point_directive **)&jarg1; 
  arg2 = *(cs::depfilter_point_directive **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::depfilter_point_directive const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::depfilter_point_directive const *)arg1)->operator ==((cs::depfilter_point_directive const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_depfilter_1point_1directive_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::depfilter_point_directive *arg1 = (cs::depfilter_point_directive *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::depfilter_point_directive **)&jarg1; 
  result = (int)((cs::depfilter_point_directive const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_depfilter_1point_1directive_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::depfilter_point_directive *arg1 = (cs::depfilter_point_directive *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::depfilter_point_directive **)&jarg1; 
  {
    try {
      result = ((cs::depfilter_point_directive const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_depfilter_1point_1directive_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::depfilter_point_directive *arg1 = (cs::depfilter_point_directive *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::depfilter_point_directive **)&jarg1; 
  result = ((cs::depfilter_point_directive const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_depfilter_1point_1directive_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::depfilter_point_directive *arg1 = (cs::depfilter_point_directive *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::depfilter_point_directive **)&jarg1; 
  {
    try {
      result = ((cs::depfilter_point_directive const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_depfilter_1point_1directive_1SHOW_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::depfilter_point_directive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::depfilter_point_directive *)&cs::depfilter_point_directive::SHOW;
  *(cs::depfilter_point_directive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_depfilter_1point_1directive_1SKIP_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::depfilter_point_directive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::depfilter_point_directive *)&cs::depfilter_point_directive::SKIP;
  *(cs::depfilter_point_directive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_depfilter_1point_1directive_1STOP_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::depfilter_point_directive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::depfilter_point_directive *)&cs::depfilter_point_directive::STOP;
  *(cs::depfilter_point_directive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1depfilter_1point_1directive(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::depfilter_point_directive *arg1 = (cs::depfilter_point_directive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::depfilter_point_directive **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1depfilter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::depfilter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (cs::depfilter *)new cs::depfilter();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::depfilter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_depfilter_1point_1mode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::depfilter *arg1 = (cs::depfilter *) 0 ;
  SwigValueWrapper< cs::point_kind > arg2 ;
  cs::point_kind *argp2 ;
  SwigValueWrapper< cs::depfilter_point_directive > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::depfilter **)&jarg1; 
  argp2 = *(cs::point_kind **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::point_kind");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((cs::depfilter const *)arg1)->point_mode(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::depfilter_point_directive **)&jresult = new cs::depfilter_point_directive((const cs::depfilter_point_directive &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_depfilter_1procedure_1mode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::depfilter *arg1 = (cs::depfilter *) 0 ;
  SwigValueWrapper< cs::procedure_kind > arg2 ;
  cs::procedure_kind *argp2 ;
  SwigValueWrapper< cs::depfilter_procedure_directive > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::depfilter **)&jarg1; 
  argp2 = *(cs::procedure_kind **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::procedure_kind");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((cs::depfilter const *)arg1)->procedure_mode(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::depfilter_procedure_directive **)&jresult = new cs::depfilter_procedure_directive((const cs::depfilter_procedure_directive &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_depfilter_1edge_1kind(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::depfilter *arg1 = (cs::depfilter *) 0 ;
  cs::pdg_edge_kind result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::depfilter **)&jarg1; 
  {
    try {
      result = ((cs::depfilter const *)arg1)->edge_kind();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::pdg_edge_kind **)&jresult = new cs::pdg_edge_kind((const cs::pdg_edge_kind &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_depfilter_1set_1point_1mode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  cs::depfilter *arg1 = (cs::depfilter *) 0 ;
  SwigValueWrapper< cs::point_kind > arg2 ;
  SwigValueWrapper< cs::depfilter_point_directive > arg3 ;
  cs::point_kind *argp2 ;
  cs::depfilter_point_directive *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cs::depfilter **)&jarg1; 
  argp2 = *(cs::point_kind **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::point_kind");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(cs::depfilter_point_directive **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::depfilter_point_directive");
    return ;
  }
  arg3 = *argp3; 
  {
    try {
      (arg1)->set_point_mode(arg2,arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_depfilter_1set_1procedure_1mode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  cs::depfilter *arg1 = (cs::depfilter *) 0 ;
  SwigValueWrapper< cs::procedure_kind > arg2 ;
  SwigValueWrapper< cs::depfilter_procedure_directive > arg3 ;
  cs::procedure_kind *argp2 ;
  cs::depfilter_procedure_directive *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cs::depfilter **)&jarg1; 
  argp2 = *(cs::procedure_kind **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::procedure_kind");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(cs::depfilter_procedure_directive **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::depfilter_procedure_directive");
    return ;
  }
  arg3 = *argp3; 
  {
    try {
      (arg1)->set_procedure_mode(arg2,arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_depfilter_1set_1edge_1kind(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cs::depfilter *arg1 = (cs::depfilter *) 0 ;
  cs::pdg_edge_kind arg2 ;
  cs::pdg_edge_kind *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::depfilter **)&jarg1; 
  argp2 = *(cs::pdg_edge_kind **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::pdg_edge_kind");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->set_edge_kind(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_depfilter_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::depfilter *arg1 = (cs::depfilter *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::depfilter **)&jarg1; 
  {
    try {
      result = ((cs::depfilter const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_depfilter_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::depfilter *arg1 = (cs::depfilter *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::depfilter **)&jarg1; 
  result = ((cs::depfilter const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1depfilter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::depfilter *arg1 = (cs::depfilter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::depfilter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1predsucc_1filter_1directive_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  cs::predsucc_filter_directive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (cs::predsucc_filter_directive *)new cs::predsucc_filter_directive(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::predsucc_filter_directive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_predsucc_1filter_1directive_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::predsucc_filter_directive *arg1 = (cs::predsucc_filter_directive *) 0 ;
  cs::predsucc_filter_directive *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::predsucc_filter_directive **)&jarg1; 
  arg2 = *(cs::predsucc_filter_directive **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::predsucc_filter_directive const & reference is null");
    return 0;
  } 
  result = (int)((cs::predsucc_filter_directive const *)arg1)->cmp((cs::predsucc_filter_directive const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_predsucc_1filter_1directive_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::predsucc_filter_directive *arg1 = (cs::predsucc_filter_directive *) 0 ;
  cs::predsucc_filter_directive *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::predsucc_filter_directive **)&jarg1; 
  arg2 = *(cs::predsucc_filter_directive **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::predsucc_filter_directive const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::predsucc_filter_directive const *)arg1)->operator ==((cs::predsucc_filter_directive const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_predsucc_1filter_1directive_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::predsucc_filter_directive *arg1 = (cs::predsucc_filter_directive *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::predsucc_filter_directive **)&jarg1; 
  result = (int)((cs::predsucc_filter_directive const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_predsucc_1filter_1directive_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::predsucc_filter_directive *arg1 = (cs::predsucc_filter_directive *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::predsucc_filter_directive **)&jarg1; 
  {
    try {
      result = ((cs::predsucc_filter_directive const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_predsucc_1filter_1directive_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::predsucc_filter_directive *arg1 = (cs::predsucc_filter_directive *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::predsucc_filter_directive **)&jarg1; 
  result = ((cs::predsucc_filter_directive const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_predsucc_1filter_1directive_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::predsucc_filter_directive *arg1 = (cs::predsucc_filter_directive *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::predsucc_filter_directive **)&jarg1; 
  {
    try {
      result = ((cs::predsucc_filter_directive const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1predsucc_1filter_1directive_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::predsucc_filter_directive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (cs::predsucc_filter_directive *)new cs::predsucc_filter_directive();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::predsucc_filter_directive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_predsucc_1filter_1directive_1STOP_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::predsucc_filter_directive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::predsucc_filter_directive *)&cs::predsucc_filter_directive::STOP;
  *(cs::predsucc_filter_directive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_predsucc_1filter_1directive_1SKIP_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::predsucc_filter_directive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::predsucc_filter_directive *)&cs::predsucc_filter_directive::SKIP;
  *(cs::predsucc_filter_directive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_predsucc_1filter_1directive_1SHOW_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::predsucc_filter_directive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::predsucc_filter_directive *)&cs::predsucc_filter_directive::SHOW;
  *(cs::predsucc_filter_directive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_predsucc_1filter_1directive_1ACCUMULATE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::predsucc_filter_directive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::predsucc_filter_directive *)&cs::predsucc_filter_directive::ACCUMULATE;
  *(cs::predsucc_filter_directive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1predsucc_1filter_1directive(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::predsucc_filter_directive *arg1 = (cs::predsucc_filter_directive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::predsucc_filter_directive **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_predsucc_1filter_1visit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::predsucc_filter *arg1 = (cs::predsucc_filter *) 0 ;
  SwigValueWrapper< cs::point > arg2 ;
  cs::point *argp2 ;
  SwigValueWrapper< std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::predsucc_filter **)&jarg1; 
  argp2 = *(cs::point **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::point");
    return 0;
  }
  arg2 = *argp2; 
  {
    result = (arg1)->operator ()(arg2);
  }
  *(std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind > **)&jresult = new std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind >((const std::pair< cs::predsucc_filter_directive,cs::pdg_edge_kind > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1predsucc_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::predsucc_filter *arg1 = (cs::predsucc_filter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::predsucc_filter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1predsucc_1filter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::predsucc_filter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (cs::predsucc_filter *)new SwigDirector_predsucc_filter(jenv);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::predsucc_filter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_predsucc_1filter_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  cs::predsucc_filter *obj = *((cs::predsucc_filter **)&objarg);
  (void)jcls;
  SwigDirector_predsucc_filter *director = dynamic_cast<SwigDirector_predsucc_filter *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_predsucc_1filter_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  cs::predsucc_filter *obj = *((cs::predsucc_filter **)&objarg);
  SwigDirector_predsucc_filter *director = dynamic_cast<SwigDirector_predsucc_filter *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1syntax_1kind(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  cs::syntax_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (cs::syntax_kind *)new cs::syntax_kind(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::syntax_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_syntax_1kind_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::syntax_kind *arg1 = (cs::syntax_kind *) 0 ;
  cs::syntax_kind *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::syntax_kind **)&jarg1; 
  arg2 = *(cs::syntax_kind **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::syntax_kind const & reference is null");
    return 0;
  } 
  result = (int)((cs::syntax_kind const *)arg1)->cmp((cs::syntax_kind const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_syntax_1kind_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::syntax_kind *arg1 = (cs::syntax_kind *) 0 ;
  cs::syntax_kind *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::syntax_kind **)&jarg1; 
  arg2 = *(cs::syntax_kind **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::syntax_kind const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::syntax_kind const *)arg1)->operator ==((cs::syntax_kind const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_syntax_1kind_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::syntax_kind *arg1 = (cs::syntax_kind *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::syntax_kind **)&jarg1; 
  result = (int)((cs::syntax_kind const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_syntax_1kind_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::syntax_kind *arg1 = (cs::syntax_kind *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::syntax_kind **)&jarg1; 
  {
    try {
      result = ((cs::syntax_kind const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_syntax_1kind_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::syntax_kind *arg1 = (cs::syntax_kind *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::syntax_kind **)&jarg1; 
  result = ((cs::syntax_kind const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_syntax_1kind_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::syntax_kind *arg1 = (cs::syntax_kind *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::syntax_kind **)&jarg1; 
  {
    try {
      result = ((cs::syntax_kind const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_syntax_1kind_1COMMENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::syntax_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::syntax_kind *)&cs::syntax_kind::COMMENT;
  *(cs::syntax_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_syntax_1kind_1MACRO_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::syntax_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::syntax_kind *)&cs::syntax_kind::MACRO;
  *(cs::syntax_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_syntax_1kind_1PREPROCESSOR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::syntax_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::syntax_kind *)&cs::syntax_kind::PREPROCESSOR;
  *(cs::syntax_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_syntax_1kind_1INCLUDE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::syntax_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::syntax_kind *)&cs::syntax_kind::INCLUDE;
  *(cs::syntax_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_syntax_1kind_1KEYWORD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::syntax_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::syntax_kind *)&cs::syntax_kind::KEYWORD;
  *(cs::syntax_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_syntax_1kind_1OPCODE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::syntax_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::syntax_kind *)&cs::syntax_kind::OPCODE;
  *(cs::syntax_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_syntax_1kind_1LABEL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::syntax_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::syntax_kind *)&cs::syntax_kind::LABEL;
  *(cs::syntax_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_syntax_1kind_1GRAYOUT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::syntax_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::syntax_kind *)&cs::syntax_kind::GRAYOUT;
  *(cs::syntax_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_syntax_1kind_1STRING_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::syntax_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::syntax_kind *)&cs::syntax_kind::STRING;
  *(cs::syntax_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_syntax_1kind_1INCLUDE_1DIRECTIVE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::syntax_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::syntax_kind *)&cs::syntax_kind::INCLUDE_DIRECTIVE;
  *(cs::syntax_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1syntax_1kind(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::syntax_kind *arg1 = (cs::syntax_kind *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::syntax_kind **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_line_1counts_1get_1blank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::line_counts *arg1 = (cs::line_counts *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::line_counts **)&jarg1; 
  {
    try {
      result = ((cs::line_counts const *)arg1)->get_blank();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_line_1counts_1get_1comment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::line_counts *arg1 = (cs::line_counts *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::line_counts **)&jarg1; 
  {
    try {
      result = ((cs::line_counts const *)arg1)->get_comment();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_line_1counts_1get_1code(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::line_counts *arg1 = (cs::line_counts *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::line_counts **)&jarg1; 
  {
    try {
      result = ((cs::line_counts const *)arg1)->get_code();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_line_1counts_1get_1mixed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::line_counts *arg1 = (cs::line_counts *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::line_counts **)&jarg1; 
  {
    try {
      result = ((cs::line_counts const *)arg1)->get_mixed();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1line_1counts(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  cs::line_counts *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  {
    try {
      result = (cs::line_counts *)new cs::line_counts(arg1,arg2,arg3,arg4);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::line_counts **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_line_1counts_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::line_counts *arg1 = (cs::line_counts *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::line_counts **)&jarg1; 
  {
    try {
      result = ((cs::line_counts const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_line_1counts_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::line_counts *arg1 = (cs::line_counts *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::line_counts **)&jarg1; 
  result = ((cs::line_counts const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1line_1counts(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::line_counts *arg1 = (cs::line_counts *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::line_counts **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::sfileinst *arg1 = (cs::sfileinst *) 0 ;
  cs::sfileinst *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::sfileinst **)&jarg1; 
  arg2 = *(cs::sfileinst **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::sfileinst const & reference is null");
    return 0;
  } 
  result = (int)((cs::sfileinst const *)arg1)->cmp((cs::sfileinst const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::sfileinst *arg1 = (cs::sfileinst *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfileinst **)&jarg1; 
  result = (int)((cs::sfileinst const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::sfileinst *arg1 = (cs::sfileinst *) 0 ;
  cs::sfileinst *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::sfileinst **)&jarg1; 
  arg2 = *(cs::sfileinst **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::sfileinst const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->operator ==((cs::sfileinst const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::sfileinst *arg1 = (cs::sfileinst *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfileinst **)&jarg1; 
  {
    try {
      result = ((cs::sfileinst const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1normalized_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::sfileinst *arg1 = (cs::sfileinst *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfileinst **)&jarg1; 
  {
    try {
      result = ((cs::sfileinst const *)arg1)->normalized_name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1include_1tree_1path(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::sfileinst *arg1 = (cs::sfileinst *) 0 ;
  std::vector< cs::sfileinst > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfileinst **)&jarg1; 
  {
    try {
      result = ((cs::sfileinst const *)arg1)->include_tree_path();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::sfileinst > **)&jresult = new std::vector< cs::sfileinst >((const std::vector< cs::sfileinst > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jstring jresult = 0 ;
  cs::sfileinst *arg1 = (cs::sfileinst *) 0 ;
  cs::line_number arg2 ;
  cs::column_number arg3 ;
  cs::line_number arg4 ;
  cs::column_number arg5 ;
  size_t arg6 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfileinst **)&jarg1; 
  arg2 = (cs::line_number)jarg2; 
  arg3 = (cs::column_number)jarg3; 
  arg4 = (cs::line_number)jarg4; 
  arg5 = (cs::column_number)jarg5; 
  arg6 = (size_t)jarg6; 
  {
    try {
      result = ((cs::sfileinst const *)arg1)->read(arg2,arg3,arg4,arg5,arg6);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jstring jresult = 0 ;
  cs::sfileinst *arg1 = (cs::sfileinst *) 0 ;
  cs::line_number arg2 ;
  cs::column_number arg3 ;
  cs::line_number arg4 ;
  cs::column_number arg5 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfileinst **)&jarg1; 
  arg2 = (cs::line_number)jarg2; 
  arg3 = (cs::column_number)jarg3; 
  arg4 = (cs::line_number)jarg4; 
  arg5 = (cs::column_number)jarg5; 
  {
    try {
      result = ((cs::sfileinst const *)arg1)->read(arg2,arg3,arg4,arg5);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1line_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::sfileinst *arg1 = (cs::sfileinst *) 0 ;
  cs::line_number result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfileinst **)&jarg1; 
  {
    try {
      result = (cs::line_number)((cs::sfileinst const *)arg1)->line_count();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1line_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  cs::sfileinst *arg1 = (cs::sfileinst *) 0 ;
  cs::line_number arg2 ;
  cs::compunit_offset result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfileinst **)&jarg1; 
  arg2 = (cs::line_number)jarg2; 
  {
    try {
      result = (cs::compunit_offset)((cs::sfileinst const *)arg1)->line_offset(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1line_1range(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  cs::sfileinst *arg1 = (cs::sfileinst *) 0 ;
  cs::line_number arg2 ;
  SwigValueWrapper< std::pair< unsigned int,unsigned int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfileinst **)&jarg1; 
  arg2 = (cs::line_number)jarg2; 
  {
    try {
      result = ((cs::sfileinst const *)arg1)->line_range(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::compunit_offset,cs::compunit_offset > **)&jresult = new std::pair< cs::compunit_offset,cs::compunit_offset >((const std::pair< cs::compunit_offset,cs::compunit_offset > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1line_1to_1compunit_1line(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  cs::sfileinst *arg1 = (cs::sfileinst *) 0 ;
  cs::line_number arg2 ;
  SwigValueWrapper< std::pair< cs::compunit,unsigned int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfileinst **)&jarg1; 
  arg2 = (cs::line_number)jarg2; 
  {
    try {
      result = ((cs::sfileinst const *)arg1)->line_to_compunit_line(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::compunit_line_pair **)&jresult = new cs::compunit_line_pair((const cs::compunit_line_pair &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1line_1to_1compunit_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  cs::sfileinst *arg1 = (cs::sfileinst *) 0 ;
  cs::line_number arg2 ;
  SwigValueWrapper< std::pair< cs::compunit,unsigned int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfileinst **)&jarg1; 
  arg2 = (cs::line_number)jarg2; 
  {
    try {
      result = ((cs::sfileinst const *)arg1)->line_to_compunit_offset(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::compunit_offset_pair **)&jresult = new cs::compunit_offset_pair((const cs::compunit_offset_pair &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1get_1compunit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::sfileinst *arg1 = (cs::sfileinst *) 0 ;
  SwigValueWrapper< cs::compunit > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfileinst **)&jarg1; 
  {
    try {
      result = ((cs::sfileinst const *)arg1)->get_compunit();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::compunit **)&jresult = new cs::compunit((const cs::compunit &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1children(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::sfileinst *arg1 = (cs::sfileinst *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::sfileinst_children_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfileinst **)&jarg1; 
  {
    try {
      result = ((cs::sfileinst const *)arg1)->children();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::sfileinst_children_iterator **)&jresult = new cs::sfileinst_children_iterator((const cs::sfileinst_children_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1children_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::sfileinst *arg1 = (cs::sfileinst *) 0 ;
  std::vector< cs::sfileinst > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfileinst **)&jarg1; 
  {
    try {
      result = ((cs::sfileinst const *)arg1)->children_vector();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::sfileinst > **)&jresult = new std::vector< cs::sfileinst >((const std::vector< cs::sfileinst > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1parent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::sfileinst *arg1 = (cs::sfileinst *) 0 ;
  SwigValueWrapper< cs::sfileinst > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfileinst **)&jarg1; 
  {
    try {
      result = ((cs::sfileinst const *)arg1)->parent();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::sfileinst **)&jresult = new cs::sfileinst((const cs::sfileinst &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1color_1map_1iterator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  cs::sfileinst *arg1 = (cs::sfileinst *) 0 ;
  SwigValueWrapper< cs::syntax_kind > arg2 ;
  cs::line_number arg3 ;
  cs::syntax_kind *argp2 ;
  SwigValueWrapper< cs::iterator_adapter< cs::sfileinst_color_map_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::sfileinst **)&jarg1; 
  argp2 = *(cs::syntax_kind **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::syntax_kind");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (cs::line_number)jarg3; 
  {
    try {
      result = ((cs::sfileinst const *)arg1)->color_map_iterator(arg2,arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::sfileinst_color_map_iterator **)&jresult = new cs::sfileinst_color_map_iterator((const cs::sfileinst_color_map_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1color_1map_1iterator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::sfileinst *arg1 = (cs::sfileinst *) 0 ;
  SwigValueWrapper< cs::syntax_kind > arg2 ;
  cs::syntax_kind *argp2 ;
  SwigValueWrapper< cs::iterator_adapter< cs::sfileinst_color_map_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::sfileinst **)&jarg1; 
  argp2 = *(cs::syntax_kind **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::syntax_kind");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((cs::sfileinst const *)arg1)->color_map_iterator(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::sfileinst_color_map_iterator **)&jresult = new cs::sfileinst_color_map_iterator((const cs::sfileinst_color_map_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1count_1lines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  cs::sfileinst *arg1 = (cs::sfileinst *) 0 ;
  cs::line_number arg2 ;
  cs::line_number arg3 ;
  SwigValueWrapper< cs::line_counts > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfileinst **)&jarg1; 
  arg2 = (cs::line_number)jarg2; 
  arg3 = (cs::line_number)jarg3; 
  {
    try {
      result = ((cs::sfileinst const *)arg1)->count_lines(arg2,arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::line_counts **)&jresult = new cs::line_counts((const cs::line_counts &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1count_1lines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  cs::sfileinst *arg1 = (cs::sfileinst *) 0 ;
  cs::line_number arg2 ;
  SwigValueWrapper< cs::line_counts > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfileinst **)&jarg1; 
  arg2 = (cs::line_number)jarg2; 
  {
    try {
      result = ((cs::sfileinst const *)arg1)->count_lines(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::line_counts **)&jresult = new cs::line_counts((const cs::line_counts &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1count_1lines_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::sfileinst *arg1 = (cs::sfileinst *) 0 ;
  SwigValueWrapper< cs::line_counts > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfileinst **)&jarg1; 
  {
    try {
      result = ((cs::sfileinst const *)arg1)->count_lines();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::line_counts **)&jresult = new cs::line_counts((const cs::line_counts &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1get_1sfile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::sfileinst *arg1 = (cs::sfileinst *) 0 ;
  SwigValueWrapper< cs::sfile > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfileinst **)&jarg1; 
  {
    try {
      result = ((cs::sfileinst const *)arg1)->get_sfile();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::sfile **)&jresult = new cs::sfile((const cs::sfile &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::sfileinst *arg1 = (cs::sfileinst *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfileinst **)&jarg1; 
  {
    try {
      result = ((cs::sfileinst const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::sfileinst *arg1 = (cs::sfileinst *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfileinst **)&jarg1; 
  result = ((cs::sfileinst const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1sfileinst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::sfileinst *arg1 = (cs::sfileinst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::sfileinst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1range_1get_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::sfileinst_range *arg1 = (cs::sfileinst_range *) 0 ;
  SwigValueWrapper< cs::sfileinst > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfileinst_range **)&jarg1; 
  {
    try {
      result = ((cs::sfileinst_range const *)arg1)->get_file();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::sfileinst **)&jresult = new cs::sfileinst((const cs::sfileinst &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1range_1get_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::sfileinst_range *arg1 = (cs::sfileinst_range *) 0 ;
  SwigValueWrapper< std::pair< unsigned int,unsigned int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfileinst_range **)&jarg1; 
  {
    try {
      result = ((cs::sfileinst_range const *)arg1)->get_start();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::line_and_column_number **)&jresult = new cs::line_and_column_number((const cs::line_and_column_number &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1range_1get_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::sfileinst_range *arg1 = (cs::sfileinst_range *) 0 ;
  SwigValueWrapper< std::pair< unsigned int,unsigned int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfileinst_range **)&jarg1; 
  {
    try {
      result = ((cs::sfileinst_range const *)arg1)->get_end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::line_and_column_number **)&jresult = new cs::line_and_column_number((const cs::line_and_column_number &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1sfileinst_1range(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::sfileinst > arg1 ;
  SwigValueWrapper< std::pair< unsigned int,unsigned int > > arg2 ;
  SwigValueWrapper< std::pair< unsigned int,unsigned int > > arg3 ;
  cs::sfileinst *argp1 ;
  cs::line_and_column_number *argp2 ;
  cs::line_and_column_number *argp3 ;
  cs::sfileinst_range *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(cs::sfileinst **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::sfileinst");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(cs::line_and_column_number **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::line_and_column_number");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(cs::line_and_column_number **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::line_and_column_number");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (cs::sfileinst_range *)new cs::sfileinst_range(arg1,arg2,arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::sfileinst_range **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1range_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::sfileinst_range *arg1 = (cs::sfileinst_range *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfileinst_range **)&jarg1; 
  {
    try {
      result = ((cs::sfileinst_range const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_sfileinst_1range_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::sfileinst_range *arg1 = (cs::sfileinst_range *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfileinst_range **)&jarg1; 
  result = ((cs::sfileinst_range const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1sfileinst_1range(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::sfileinst_range *arg1 = (cs::sfileinst_range *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::sfileinst_range **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1var_1attrs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  cs::var_attrs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (cs::var_attrs *)new cs::var_attrs(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::var_attrs **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_var_1attrs_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::var_attrs *arg1 = (cs::var_attrs *) 0 ;
  cs::var_attrs *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::var_attrs **)&jarg1; 
  arg2 = *(cs::var_attrs **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::var_attrs const & reference is null");
    return 0;
  } 
  result = (int)((cs::var_attrs const *)arg1)->cmp((cs::var_attrs const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_var_1attrs_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::var_attrs *arg1 = (cs::var_attrs *) 0 ;
  cs::var_attrs *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::var_attrs **)&jarg1; 
  arg2 = *(cs::var_attrs **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::var_attrs const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::var_attrs const *)arg1)->operator ==((cs::var_attrs const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_var_1attrs_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::var_attrs *arg1 = (cs::var_attrs *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::var_attrs **)&jarg1; 
  result = (int)((cs::var_attrs const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_var_1attrs_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::var_attrs *arg1 = (cs::var_attrs *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::var_attrs **)&jarg1; 
  {
    try {
      result = ((cs::var_attrs const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_var_1attrs_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::var_attrs *arg1 = (cs::var_attrs *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::var_attrs **)&jarg1; 
  result = ((cs::var_attrs const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_var_1attrs_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::var_attrs *arg1 = (cs::var_attrs *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::var_attrs **)&jarg1; 
  {
    try {
      result = ((cs::var_attrs const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_var_1attrs_1or_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::var_attrs *arg1 = (cs::var_attrs *) 0 ;
  cs::var_attrs *arg2 = 0 ;
  SwigValueWrapper< cs::var_attrs > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::var_attrs **)&jarg1; 
  arg2 = *(cs::var_attrs **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::var_attrs const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::var_attrs const *)arg1)->or_((cs::var_attrs const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::var_attrs **)&jresult = new cs::var_attrs((const cs::var_attrs &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_var_1attrs_1and_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::var_attrs *arg1 = (cs::var_attrs *) 0 ;
  cs::var_attrs *arg2 = 0 ;
  SwigValueWrapper< cs::var_attrs > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::var_attrs **)&jarg1; 
  arg2 = *(cs::var_attrs **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::var_attrs const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::var_attrs const *)arg1)->and_((cs::var_attrs const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::var_attrs **)&jresult = new cs::var_attrs((const cs::var_attrs &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_var_1attrs_1not_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::var_attrs *arg1 = (cs::var_attrs *) 0 ;
  SwigValueWrapper< cs::var_attrs > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::var_attrs **)&jarg1; 
  {
    try {
      result = ((cs::var_attrs const *)arg1)->not_();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::var_attrs **)&jresult = new cs::var_attrs((const cs::var_attrs &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_var_1attrs_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::var_attrs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::var_attrs *)&cs::var_attrs::NONE;
  *(cs::var_attrs **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_var_1attrs_1WEAK_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::var_attrs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::var_attrs *)&cs::var_attrs::WEAK;
  *(cs::var_attrs **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_var_1attrs_1THREADLOCAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::var_attrs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::var_attrs *)&cs::var_attrs::THREADLOCAL;
  *(cs::var_attrs **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1var_1attrs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::var_attrs *arg1 = (cs::var_attrs *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::var_attrs **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1func_1attrs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  cs::func_attrs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (cs::func_attrs *)new cs::func_attrs(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::func_attrs **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_func_1attrs_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::func_attrs *arg1 = (cs::func_attrs *) 0 ;
  cs::func_attrs *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::func_attrs **)&jarg1; 
  arg2 = *(cs::func_attrs **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::func_attrs const & reference is null");
    return 0;
  } 
  result = (int)((cs::func_attrs const *)arg1)->cmp((cs::func_attrs const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_func_1attrs_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::func_attrs *arg1 = (cs::func_attrs *) 0 ;
  cs::func_attrs *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::func_attrs **)&jarg1; 
  arg2 = *(cs::func_attrs **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::func_attrs const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::func_attrs const *)arg1)->operator ==((cs::func_attrs const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_func_1attrs_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::func_attrs *arg1 = (cs::func_attrs *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::func_attrs **)&jarg1; 
  result = (int)((cs::func_attrs const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_func_1attrs_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::func_attrs *arg1 = (cs::func_attrs *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::func_attrs **)&jarg1; 
  {
    try {
      result = ((cs::func_attrs const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_func_1attrs_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::func_attrs *arg1 = (cs::func_attrs *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::func_attrs **)&jarg1; 
  result = ((cs::func_attrs const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_func_1attrs_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::func_attrs *arg1 = (cs::func_attrs *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::func_attrs **)&jarg1; 
  {
    try {
      result = ((cs::func_attrs const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_func_1attrs_1or_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::func_attrs *arg1 = (cs::func_attrs *) 0 ;
  cs::func_attrs *arg2 = 0 ;
  SwigValueWrapper< cs::func_attrs > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::func_attrs **)&jarg1; 
  arg2 = *(cs::func_attrs **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::func_attrs const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::func_attrs const *)arg1)->or_((cs::func_attrs const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::func_attrs **)&jresult = new cs::func_attrs((const cs::func_attrs &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_func_1attrs_1and_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::func_attrs *arg1 = (cs::func_attrs *) 0 ;
  cs::func_attrs *arg2 = 0 ;
  SwigValueWrapper< cs::func_attrs > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::func_attrs **)&jarg1; 
  arg2 = *(cs::func_attrs **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::func_attrs const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::func_attrs const *)arg1)->and_((cs::func_attrs const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::func_attrs **)&jresult = new cs::func_attrs((const cs::func_attrs &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_func_1attrs_1not_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::func_attrs *arg1 = (cs::func_attrs *) 0 ;
  SwigValueWrapper< cs::func_attrs > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::func_attrs **)&jarg1; 
  {
    try {
      result = ((cs::func_attrs const *)arg1)->not_();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::func_attrs **)&jresult = new cs::func_attrs((const cs::func_attrs &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_func_1attrs_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::func_attrs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::func_attrs *)&cs::func_attrs::NONE;
  *(cs::func_attrs **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_func_1attrs_1WEAK_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::func_attrs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::func_attrs *)&cs::func_attrs::WEAK;
  *(cs::func_attrs **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_func_1attrs_1INLINE_1FUNCTION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::func_attrs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::func_attrs *)&cs::func_attrs::INLINE_FUNCTION;
  *(cs::func_attrs **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_func_1attrs_1INITIALIZATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::func_attrs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::func_attrs *)&cs::func_attrs::INITIALIZATION;
  *(cs::func_attrs **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_func_1attrs_1FINALIZATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::func_attrs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::func_attrs *)&cs::func_attrs::FINALIZATION;
  *(cs::func_attrs **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_func_1attrs_1LIBRARY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::func_attrs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::func_attrs *)&cs::func_attrs::LIBRARY;
  *(cs::func_attrs **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_func_1attrs_1COMPILER_1GENERATED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::func_attrs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::func_attrs *)&cs::func_attrs::COMPILER_GENERATED;
  *(cs::func_attrs **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_func_1attrs_1CS_1GENERATED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::func_attrs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::func_attrs *)&cs::func_attrs::CS_GENERATED;
  *(cs::func_attrs **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_func_1attrs_1CONSTRUCTOR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::func_attrs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::func_attrs *)&cs::func_attrs::CONSTRUCTOR;
  *(cs::func_attrs **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_func_1attrs_1DESTRUCTOR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::func_attrs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::func_attrs *)&cs::func_attrs::DESTRUCTOR;
  *(cs::func_attrs **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_func_1attrs_1ASSIGNMENT_1OPERATOR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::func_attrs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::func_attrs *)&cs::func_attrs::ASSIGNMENT_OPERATOR;
  *(cs::func_attrs **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_func_1attrs_1TEMPLATE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::func_attrs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::func_attrs *)&cs::func_attrs::TEMPLATE;
  *(cs::func_attrs **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_func_1attrs_1CSONAR_1LIBRARY_1REFINE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::func_attrs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::func_attrs *)&cs::func_attrs::CSONAR_LIBRARY_REFINE;
  *(cs::func_attrs **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_func_1attrs_1MULTI_1DEFINE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::func_attrs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::func_attrs *)&cs::func_attrs::MULTI_DEFINE;
  *(cs::func_attrs **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_func_1attrs_1MAIN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::func_attrs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::func_attrs *)&cs::func_attrs::MAIN;
  *(cs::func_attrs **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1func_1attrs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::func_attrs *arg1 = (cs::func_attrs *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::func_attrs **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1symbol_1kind(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  cs::symbol_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (cs::symbol_kind *)new cs::symbol_kind(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::symbol_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_symbol_1kind_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::symbol_kind *arg1 = (cs::symbol_kind *) 0 ;
  cs::symbol_kind *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::symbol_kind **)&jarg1; 
  arg2 = *(cs::symbol_kind **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::symbol_kind const & reference is null");
    return 0;
  } 
  result = (int)((cs::symbol_kind const *)arg1)->cmp((cs::symbol_kind const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_symbol_1kind_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::symbol_kind *arg1 = (cs::symbol_kind *) 0 ;
  cs::symbol_kind *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::symbol_kind **)&jarg1; 
  arg2 = *(cs::symbol_kind **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::symbol_kind const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::symbol_kind const *)arg1)->operator ==((cs::symbol_kind const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_symbol_1kind_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::symbol_kind *arg1 = (cs::symbol_kind *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol_kind **)&jarg1; 
  result = (int)((cs::symbol_kind const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_symbol_1kind_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::symbol_kind *arg1 = (cs::symbol_kind *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol_kind **)&jarg1; 
  {
    try {
      result = ((cs::symbol_kind const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_symbol_1kind_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::symbol_kind *arg1 = (cs::symbol_kind *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol_kind **)&jarg1; 
  result = ((cs::symbol_kind const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_symbol_1kind_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::symbol_kind *arg1 = (cs::symbol_kind *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol_kind **)&jarg1; 
  {
    try {
      result = ((cs::symbol_kind const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1kind_1USER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::symbol_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::symbol_kind *)&cs::symbol_kind::USER;
  *(cs::symbol_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1kind_1INTERMEDIATE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::symbol_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::symbol_kind *)&cs::symbol_kind::INTERMEDIATE;
  *(cs::symbol_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1kind_1PARAM_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::symbol_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::symbol_kind *)&cs::symbol_kind::PARAM;
  *(cs::symbol_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1kind_1RETURN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::symbol_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::symbol_kind *)&cs::symbol_kind::RETURN;
  *(cs::symbol_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1kind_1RESULT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::symbol_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::symbol_kind *)&cs::symbol_kind::RESULT;
  *(cs::symbol_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1kind_1HEAP_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::symbol_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::symbol_kind *)&cs::symbol_kind::HEAP;
  *(cs::symbol_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1kind_1STRING_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::symbol_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::symbol_kind *)&cs::symbol_kind::STRING;
  *(cs::symbol_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1kind_1FUNCTION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::symbol_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::symbol_kind *)&cs::symbol_kind::FUNCTION;
  *(cs::symbol_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1kind_1LABEL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::symbol_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::symbol_kind *)&cs::symbol_kind::LABEL;
  *(cs::symbol_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1kind_1INTERNAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::symbol_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::symbol_kind *)&cs::symbol_kind::INTERNAL;
  *(cs::symbol_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1kind_1SUBOBJ_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::symbol_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::symbol_kind *)&cs::symbol_kind::SUBOBJ;
  *(cs::symbol_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1symbol_1kind(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::symbol_kind *arg1 = (cs::symbol_kind *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::symbol_kind **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_symbol_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  cs::symbol *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::symbol **)&jarg1; 
  arg2 = *(cs::symbol **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::symbol const & reference is null");
    return 0;
  } 
  result = (int)((cs::symbol const *)arg1)->cmp((cs::symbol const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_symbol_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  result = (int)((cs::symbol const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_symbol_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  cs::symbol *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::symbol **)&jarg1; 
  arg2 = *(cs::symbol **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::symbol const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->operator ==((cs::symbol const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1get_1kind(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  SwigValueWrapper< cs::symbol_kind > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = ((cs::symbol const *)arg1)->get_kind();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::symbol_kind **)&jresult = new cs::symbol_kind((const cs::symbol_kind &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1get_1var_1attrs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  SwigValueWrapper< cs::var_attrs > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = ((cs::symbol const *)arg1)->get_var_attrs();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::var_attrs **)&jresult = new cs::var_attrs((const cs::var_attrs &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1get_1func_1attrs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  SwigValueWrapper< cs::func_attrs > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = ((cs::symbol const *)arg1)->get_func_attrs();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::func_attrs **)&jresult = new cs::func_attrs((const cs::func_attrs &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_symbol_1is_1global(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = (bool)((cs::symbol const *)arg1)->is_global();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_symbol_1is_1heap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = (bool)((cs::symbol const *)arg1)->is_heap();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_symbol_1is_1function(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = (bool)((cs::symbol const *)arg1)->is_function();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_symbol_1is_1static_1function(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = (bool)((cs::symbol const *)arg1)->is_static_function();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_symbol_1is_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = (bool)((cs::symbol const *)arg1)->is_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_symbol_1is_1file_1static(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = (bool)((cs::symbol const *)arg1)->is_file_static();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_symbol_1is_1local_1static(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = (bool)((cs::symbol const *)arg1)->is_local_static();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_symbol_1is_1local(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = (bool)((cs::symbol const *)arg1)->is_local();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_symbol_1is_1formal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = (bool)((cs::symbol const *)arg1)->is_formal();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_symbol_1extern_1only(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = (bool)((cs::symbol const *)arg1)->extern_only();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_symbol_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = ((cs::symbol const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1as_1procedure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  SwigValueWrapper< cs::procedure > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = ((cs::symbol const *)arg1)->as_procedure();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::procedure **)&jresult = new cs::procedure((const cs::procedure &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_symbol_1represented_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = ((cs::symbol const *)arg1)->represented_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1declarations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = ((cs::symbol const *)arg1)->declarations();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1primary_1declaration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  SwigValueWrapper< cs::point > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = ((cs::symbol const *)arg1)->primary_declaration();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point **)&jresult = new cs::point((const cs::point &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1get_1procedure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  SwigValueWrapper< cs::procedure > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = ((cs::symbol const *)arg1)->get_procedure();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::procedure **)&jresult = new cs::procedure((const cs::procedure &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1get_1compunit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  SwigValueWrapper< cs::compunit > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = ((cs::symbol const *)arg1)->get_compunit();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::compunit **)&jresult = new cs::compunit((const cs::compunit &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1get_1ast_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  SwigValueWrapper< cs::ast_family > arg2 ;
  cs::ast_family *argp2 ;
  SwigValueWrapper< cs::ast > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::symbol **)&jarg1; 
  argp2 = *(cs::ast_family **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_family");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((cs::symbol const *)arg1)->get_ast(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast **)&jresult = new cs::ast((const cs::ast &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1get_1ast_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  SwigValueWrapper< cs::ast > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = ((cs::symbol const *)arg1)->get_ast();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast **)&jresult = new cs::ast((const cs::ast &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1ast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  SwigValueWrapper< cs::ast_family > arg2 ;
  SwigValueWrapper< cs::ast > arg3 ;
  cs::ast_family *argp2 ;
  cs::ast *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cs::symbol **)&jarg1; 
  argp2 = *(cs::ast_family **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_family");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(cs::ast **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast");
    return ;
  }
  arg3 = *argp3; 
  {
    try {
      (arg1)->set_ast(arg2,arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1get_1type_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  SwigValueWrapper< cs::ast_family > arg2 ;
  cs::ast_family *argp2 ;
  SwigValueWrapper< cs::ast > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::symbol **)&jarg1; 
  argp2 = *(cs::ast_family **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_family");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((cs::symbol const *)arg1)->get_type(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast **)&jresult = new cs::ast((const cs::ast &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1get_1type_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  SwigValueWrapper< cs::ast > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = ((cs::symbol const *)arg1)->get_type();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast **)&jresult = new cs::ast((const cs::ast &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  SwigValueWrapper< cs::ast_family > arg2 ;
  SwigValueWrapper< cs::ast > arg3 ;
  cs::ast_family *argp2 ;
  cs::ast *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cs::symbol **)&jarg1; 
  argp2 = *(cs::ast_family **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_family");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(cs::ast **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast");
    return ;
  }
  arg3 = *argp3; 
  {
    try {
      (arg1)->set_type(arg2,arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1file_1line(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  SwigValueWrapper< std::pair< cs::sfileinst,unsigned int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = ((cs::symbol const *)arg1)->file_line();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::sfileinst_line_pair **)&jresult = new cs::sfileinst_line_pair((const cs::sfileinst_line_pair &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1compunit_1line(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  SwigValueWrapper< std::pair< cs::compunit,unsigned int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = ((cs::symbol const *)arg1)->compunit_line();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::compunit_line_pair **)&jresult = new cs::compunit_line_pair((const cs::compunit_line_pair &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1pointed_1to_1by(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  cs::symbol_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = ((cs::symbol const *)arg1)->pointed_to_by();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::symbol_set **)&jresult = new cs::symbol_set((const cs::symbol_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1points_1to(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  cs::symbol_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = ((cs::symbol const *)arg1)->points_to();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::symbol_set **)&jresult = new cs::symbol_set((const cs::symbol_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1used_1points(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = ((cs::symbol const *)arg1)->used_points();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1killed_1points(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = ((cs::symbol const *)arg1)->killed_points();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1cond_1killed_1points(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = ((cs::symbol const *)arg1)->cond_killed_points();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1may_1killed_1points(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = ((cs::symbol const *)arg1)->may_killed_points();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1fields(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  std::vector< cs::symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = ((cs::symbol const *)arg1)->fields();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::symbol > **)&jresult = new std::vector< cs::symbol >((const std::vector< cs::symbol > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1container(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  SwigValueWrapper< cs::symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = ((cs::symbol const *)arg1)->container();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::symbol **)&jresult = new cs::symbol((const cs::symbol &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1inline_1targets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  std::vector< cs::symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = ((cs::symbol const *)arg1)->inline_targets();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::symbol > **)&jresult = new std::vector< cs::symbol >((const std::vector< cs::symbol > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1inline_1source(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  SwigValueWrapper< cs::symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = ((cs::symbol const *)arg1)->inline_source();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::symbol **)&jresult = new cs::symbol((const cs::symbol &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_symbol_1temp_1source(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = ((cs::symbol const *)arg1)->temp_source();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_symbol_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  {
    try {
      result = ((cs::symbol const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_symbol_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::symbol **)&jarg1; 
  result = ((cs::symbol const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1symbol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::symbol *arg1 = (cs::symbol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::symbol **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1point_1syntax_1kind(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  cs::point_syntax_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (cs::point_syntax_kind *)new cs::point_syntax_kind(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_syntax_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1kind_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::point_syntax_kind *arg1 = (cs::point_syntax_kind *) 0 ;
  cs::point_syntax_kind *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::point_syntax_kind **)&jarg1; 
  arg2 = *(cs::point_syntax_kind **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::point_syntax_kind const & reference is null");
    return 0;
  } 
  result = (int)((cs::point_syntax_kind const *)arg1)->cmp((cs::point_syntax_kind const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1kind_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::point_syntax_kind *arg1 = (cs::point_syntax_kind *) 0 ;
  cs::point_syntax_kind *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::point_syntax_kind **)&jarg1; 
  arg2 = *(cs::point_syntax_kind **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::point_syntax_kind const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::point_syntax_kind const *)arg1)->operator ==((cs::point_syntax_kind const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1kind_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::point_syntax_kind *arg1 = (cs::point_syntax_kind *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point_syntax_kind **)&jarg1; 
  result = (int)((cs::point_syntax_kind const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1kind_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::point_syntax_kind *arg1 = (cs::point_syntax_kind *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point_syntax_kind **)&jarg1; 
  {
    try {
      result = ((cs::point_syntax_kind const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1kind_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::point_syntax_kind *arg1 = (cs::point_syntax_kind *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point_syntax_kind **)&jarg1; 
  result = ((cs::point_syntax_kind const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1kind_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::point_syntax_kind *arg1 = (cs::point_syntax_kind *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point_syntax_kind **)&jarg1; 
  {
    try {
      result = ((cs::point_syntax_kind const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1kind_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_syntax_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_syntax_kind *)&cs::point_syntax_kind::NONE;
  *(cs::point_syntax_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1kind_1IF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_syntax_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_syntax_kind *)&cs::point_syntax_kind::IF;
  *(cs::point_syntax_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1kind_1ELSE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_syntax_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_syntax_kind *)&cs::point_syntax_kind::ELSE;
  *(cs::point_syntax_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1kind_1SWITCH_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_syntax_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_syntax_kind *)&cs::point_syntax_kind::SWITCH;
  *(cs::point_syntax_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1kind_1CASE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_syntax_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_syntax_kind *)&cs::point_syntax_kind::CASE;
  *(cs::point_syntax_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1kind_1WHILE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_syntax_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_syntax_kind *)&cs::point_syntax_kind::WHILE;
  *(cs::point_syntax_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1kind_1DO_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_syntax_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_syntax_kind *)&cs::point_syntax_kind::DO;
  *(cs::point_syntax_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1kind_1FOR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_syntax_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_syntax_kind *)&cs::point_syntax_kind::FOR;
  *(cs::point_syntax_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1kind_1CONTINUE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_syntax_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_syntax_kind *)&cs::point_syntax_kind::CONTINUE;
  *(cs::point_syntax_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1kind_1BREAK_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_syntax_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_syntax_kind *)&cs::point_syntax_kind::BREAK;
  *(cs::point_syntax_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1kind_1GOTO_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_syntax_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_syntax_kind *)&cs::point_syntax_kind::GOTO;
  *(cs::point_syntax_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1kind_1LABEL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_syntax_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_syntax_kind *)&cs::point_syntax_kind::LABEL;
  *(cs::point_syntax_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1kind_1RETURN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_syntax_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_syntax_kind *)&cs::point_syntax_kind::RETURN;
  *(cs::point_syntax_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1kind_1THROW_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_syntax_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_syntax_kind *)&cs::point_syntax_kind::THROW;
  *(cs::point_syntax_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1kind_1TRY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_syntax_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_syntax_kind *)&cs::point_syntax_kind::TRY;
  *(cs::point_syntax_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1kind_1CATCH_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_syntax_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_syntax_kind *)&cs::point_syntax_kind::CATCH;
  *(cs::point_syntax_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1kind_1ASM_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_syntax_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_syntax_kind *)&cs::point_syntax_kind::ASM;
  *(cs::point_syntax_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1point_1syntax_1kind(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::point_syntax_kind *arg1 = (cs::point_syntax_kind *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::point_syntax_kind **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1point_1syntax_1element(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  cs::point_syntax_element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (cs::point_syntax_element *)new cs::point_syntax_element(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_syntax_element **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1element_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::point_syntax_element *arg1 = (cs::point_syntax_element *) 0 ;
  cs::point_syntax_element *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::point_syntax_element **)&jarg1; 
  arg2 = *(cs::point_syntax_element **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::point_syntax_element const & reference is null");
    return 0;
  } 
  result = (int)((cs::point_syntax_element const *)arg1)->cmp((cs::point_syntax_element const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1element_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::point_syntax_element *arg1 = (cs::point_syntax_element *) 0 ;
  cs::point_syntax_element *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::point_syntax_element **)&jarg1; 
  arg2 = *(cs::point_syntax_element **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::point_syntax_element const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::point_syntax_element const *)arg1)->operator ==((cs::point_syntax_element const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1element_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::point_syntax_element *arg1 = (cs::point_syntax_element *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point_syntax_element **)&jarg1; 
  result = (int)((cs::point_syntax_element const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1element_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::point_syntax_element *arg1 = (cs::point_syntax_element *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point_syntax_element **)&jarg1; 
  {
    try {
      result = ((cs::point_syntax_element const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1element_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::point_syntax_element *arg1 = (cs::point_syntax_element *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point_syntax_element **)&jarg1; 
  result = ((cs::point_syntax_element const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1element_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::point_syntax_element *arg1 = (cs::point_syntax_element *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point_syntax_element **)&jarg1; 
  {
    try {
      result = ((cs::point_syntax_element const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1element_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_syntax_element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_syntax_element *)&cs::point_syntax_element::NONE;
  *(cs::point_syntax_element **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1element_1INIT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_syntax_element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_syntax_element *)&cs::point_syntax_element::INIT;
  *(cs::point_syntax_element **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1element_1COND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_syntax_element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_syntax_element *)&cs::point_syntax_element::COND;
  *(cs::point_syntax_element **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1element_1INCR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_syntax_element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_syntax_element *)&cs::point_syntax_element::INCR;
  *(cs::point_syntax_element **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1syntax_1element_1EXPR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::point_syntax_element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::point_syntax_element *)&cs::point_syntax_element::EXPR;
  *(cs::point_syntax_element **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1point_1syntax_1element(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::point_syntax_element *arg1 = (cs::point_syntax_element *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::point_syntax_element **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_point_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  cs::point *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::point **)&jarg1; 
  arg2 = *(cs::point **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::point const & reference is null");
    return 0;
  } 
  result = (int)((cs::point const *)arg1)->cmp((cs::point const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_point_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  result = (int)((cs::point const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_point_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  cs::point *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::point **)&jarg1; 
  arg2 = *(cs::point **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::point const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->operator ==((cs::point const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  csint64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = (csint64)((cs::point const *)arg1)->id();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1get_1kind(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  SwigValueWrapper< cs::point_kind > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->get_kind();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_kind **)&jresult = new cs::point_kind((const cs::point_kind &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1get_1syntax_1kind(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  SwigValueWrapper< cs::point_syntax_kind > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->get_syntax_kind();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_syntax_kind **)&jresult = new cs::point_syntax_kind((const cs::point_syntax_kind &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1get_1syntax_1element(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  SwigValueWrapper< cs::point_syntax_element > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->get_syntax_element();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_syntax_element **)&jresult = new cs::point_syntax_element((const cs::point_syntax_element &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1get_1procedure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  SwigValueWrapper< cs::procedure > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->get_procedure();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::procedure **)&jresult = new cs::procedure((const cs::procedure &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1get_1ast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  SwigValueWrapper< cs::ast_family > arg2 ;
  cs::ast_family *argp2 ;
  SwigValueWrapper< cs::ast > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::point **)&jarg1; 
  argp2 = *(cs::ast_family **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_family");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((cs::point const *)arg1)->get_ast(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast **)&jresult = new cs::ast((const cs::ast &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_point_1set_1ast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  cs::point *arg1 = (cs::point *) 0 ;
  SwigValueWrapper< cs::ast_family > arg2 ;
  SwigValueWrapper< cs::ast > arg3 ;
  cs::ast_family *argp2 ;
  cs::ast *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cs::point **)&jarg1; 
  argp2 = *(cs::ast_family **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_family");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(cs::ast **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast");
    return ;
  }
  arg3 = *argp3; 
  {
    try {
      (arg1)->set_ast(arg2,arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1charpos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  cs::int_pair_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->charpos();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::int_pair_set **)&jresult = new cs::int_pair_set((const cs::int_pair_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1compunit_1line(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  SwigValueWrapper< std::pair< cs::compunit,unsigned int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->compunit_line();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::compunit_line_pair **)&jresult = new cs::compunit_line_pair((const cs::compunit_line_pair &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1file_1line(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  SwigValueWrapper< std::pair< cs::sfileinst,unsigned int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->file_line();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::sfileinst_line_pair **)&jresult = new cs::sfileinst_line_pair((const cs::sfileinst_line_pair &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_point_1characters_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  size_t arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((cs::point const *)arg1)->characters(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_point_1characters_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->characters();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1declared_1symbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  SwigValueWrapper< cs::symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->declared_symbol();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::symbol **)&jresult = new cs::symbol((const cs::symbol &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1declared_1symbols(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  cs::symbol_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->declared_symbols();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::symbol_set **)&jresult = new cs::symbol_set((const cs::symbol_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1rank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->rank();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1ids_1decl_1uses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  cs::symbol_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->ids_decl_uses();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::symbol_set **)&jresult = new cs::symbol_set((const cs::symbol_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1ids_1used(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  cs::symbol_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->ids_used();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::symbol_set **)&jresult = new cs::symbol_set((const cs::symbol_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1ids_1killed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  cs::symbol_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->ids_killed();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::symbol_set **)&jresult = new cs::symbol_set((const cs::symbol_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1ids_1cond_1killed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  cs::symbol_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->ids_cond_killed();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::symbol_set **)&jresult = new cs::symbol_set((const cs::symbol_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1actual_1points_1to(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  cs::symbol_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->actual_points_to();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::symbol_set **)&jresult = new cs::symbol_set((const cs::symbol_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1parameter_1symbols(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  std::vector< cs::symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->parameter_symbols();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::symbol > **)&jresult = new std::vector< cs::symbol >((const std::vector< cs::symbol > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1cfg_1successors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  SwigValueWrapper< cs::immutable_set< std::pair< cs::point,cs::edge_label > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->cfg_successors();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::cfg_edge_set **)&jresult = new cs::cfg_edge_set((const cs::cfg_edge_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1cfg_1predecessors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  SwigValueWrapper< cs::immutable_set< std::pair< cs::point,cs::edge_label > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->cfg_predecessors();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::cfg_edge_set **)&jresult = new cs::cfg_edge_set((const cs::cfg_edge_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1cfg_1inter_1targets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  SwigValueWrapper< cs::immutable_set< std::pair< cs::point,cs::edge_label > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->cfg_inter_targets();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::cfg_edge_set **)&jresult = new cs::cfg_edge_set((const cs::cfg_edge_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1cfg_1inter_1sources(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  SwigValueWrapper< cs::immutable_set< std::pair< cs::point,cs::edge_label > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->cfg_inter_sources();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::cfg_edge_set **)&jresult = new cs::cfg_edge_set((const cs::cfg_edge_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1cfg_1targets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  SwigValueWrapper< cs::immutable_set< std::pair< cs::point,cs::edge_label > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->cfg_targets();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::cfg_edge_set **)&jresult = new cs::cfg_edge_set((const cs::cfg_edge_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1cfg_1sources(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  SwigValueWrapper< cs::immutable_set< std::pair< cs::point,cs::edge_label > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->cfg_sources();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::cfg_edge_set **)&jresult = new cs::cfg_edge_set((const cs::cfg_edge_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1get_1basic_1block(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  SwigValueWrapper< cs::basic_block > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->get_basic_block();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::basic_block **)&jresult = new cs::basic_block((const cs::basic_block &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1solitary_1cfg_1target(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  SwigValueWrapper< cs::point > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->solitary_cfg_target();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point **)&jresult = new cs::point((const cs::point &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1solitary_1cfg_1source(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  SwigValueWrapper< cs::point > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->solitary_cfg_source();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point **)&jresult = new cs::point((const cs::point &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1inter_1targets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  SwigValueWrapper< cs::immutable_set< std::pair< cs::point,cs::pdg_edge_kind > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->inter_targets();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::pdg_edge_set **)&jresult = new cs::pdg_edge_set((const cs::pdg_edge_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1inter_1sources(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  SwigValueWrapper< cs::immutable_set< std::pair< cs::point,cs::pdg_edge_kind > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->inter_sources();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::pdg_edge_set **)&jresult = new cs::pdg_edge_set((const cs::pdg_edge_set &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_point_1summary_1edge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  SwigValueWrapper< cs::point > arg2 ;
  cs::point *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::point **)&jarg1; 
  argp2 = *(cs::point **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::point");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((cs::point const *)arg1)->summary_edge(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1intra_1targets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  SwigValueWrapper< cs::immutable_set< std::pair< cs::point,cs::pdg_edge_kind > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->intra_targets();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::pdg_edge_set **)&jresult = new cs::pdg_edge_set((const cs::pdg_edge_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1intra_1sources(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  SwigValueWrapper< cs::immutable_set< std::pair< cs::point,cs::pdg_edge_kind > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->intra_sources();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::pdg_edge_set **)&jresult = new cs::pdg_edge_set((const cs::pdg_edge_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1actual_1to_1formals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->actual_to_formals();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1actuals_1in(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->actuals_in();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1actuals_1out(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->actuals_out();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_point_1set_1actual_1outs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cs::point *arg1 = (cs::point *) 0 ;
  std::vector< cs::point > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::point **)&jarg1; 
  arg2 = *(std::vector< cs::point > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::point > const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set_actual_outs((std::vector< cs::point > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_point_1set_1actual_1ins(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cs::point *arg1 = (cs::point *) 0 ;
  std::vector< cs::point > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::point **)&jarg1; 
  arg2 = *(std::vector< cs::point > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::point > const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set_actual_ins((std::vector< cs::point > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1actuals_1in_1as_1list(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  std::vector< cs::point > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->actuals_in_as_list();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::point > **)&jresult = new std::vector< cs::point >((const std::vector< cs::point > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1actuals_1out_1as_1list(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  std::vector< cs::point > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->actuals_out_as_list();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::point > **)&jresult = new std::vector< cs::point >((const std::vector< cs::point > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1actual_1in(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< cs::point > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((cs::point const *)arg1)->actual_in(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point **)&jresult = new cs::point((const cs::point &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1actual_1out(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< cs::point > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((cs::point const *)arg1)->actual_out(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point **)&jresult = new cs::point((const cs::point &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1call_1site(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  SwigValueWrapper< cs::point > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->call_site();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point **)&jresult = new cs::point((const cs::point &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1callee(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  SwigValueWrapper< cs::procedure > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->callee();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::procedure **)&jresult = new cs::procedure((const cs::procedure &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1normal_1return(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  SwigValueWrapper< cs::point > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->normal_return();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point **)&jresult = new cs::point((const cs::point &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1exceptional_1returns(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  std::vector< cs::exceptional_return > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->exceptional_returns();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::exceptional_return > **)&jresult = new std::vector< cs::exceptional_return >((const std::vector< cs::exceptional_return > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1labeled_1intra_1control_1sources(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  SwigValueWrapper< cs::immutable_set< std::pair< cs::point,cs::pdg_edge_label > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->labeled_intra_control_sources();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::labeled_pdg_edge_set **)&jresult = new cs::labeled_pdg_edge_set((const cs::labeled_pdg_edge_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1labeled_1intra_1control_1targets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  SwigValueWrapper< cs::immutable_set< std::pair< cs::point,cs::pdg_edge_label > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->labeled_intra_control_targets();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::labeled_pdg_edge_set **)&jresult = new cs::labeled_pdg_edge_set((const cs::labeled_pdg_edge_set &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_point_1is_1inside_1macro(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = (bool)((cs::point const *)arg1)->is_inside_macro();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_point_1source_1pp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->source_pp();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_grammatech_cs_csJNI_point_1condition_1number(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  csuint64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = (csuint64)((cs::point const *)arg1)->condition_number();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_point_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = ((cs::point const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_point_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  result = ((cs::point const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_grammatech_cs_csJNI_point_1get_1address(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  cs_ea result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = (cs_ea)((cs::point const *)arg1)->get_address();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_grammatech_cs_csJNI_point_1get_1affiliated_1address(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  cs::point *arg1 = (cs::point *) 0 ;
  cs_ea result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::point **)&jarg1; 
  {
    try {
      result = (cs_ea)((cs::point const *)arg1)->get_affiliated_address();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1point(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::point *arg1 = (cs::point *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::point **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::basic_block *arg1 = (cs::basic_block *) 0 ;
  cs::basic_block *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::basic_block **)&jarg1; 
  arg2 = *(cs::basic_block **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::basic_block const & reference is null");
    return 0;
  } 
  result = (int)((cs::basic_block const *)arg1)->cmp((cs::basic_block const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::basic_block *arg1 = (cs::basic_block *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::basic_block **)&jarg1; 
  result = (int)((cs::basic_block const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::basic_block *arg1 = (cs::basic_block *) 0 ;
  cs::basic_block *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::basic_block **)&jarg1; 
  arg2 = *(cs::basic_block **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::basic_block const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->operator ==((cs::basic_block const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1first_1point(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::basic_block *arg1 = (cs::basic_block *) 0 ;
  SwigValueWrapper< cs::point > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::basic_block **)&jarg1; 
  {
    try {
      result = ((cs::basic_block const *)arg1)->first_point();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point **)&jresult = new cs::point((const cs::point &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1last_1point(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::basic_block *arg1 = (cs::basic_block *) 0 ;
  SwigValueWrapper< cs::point > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::basic_block **)&jarg1; 
  {
    try {
      result = ((cs::basic_block const *)arg1)->last_point();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point **)&jresult = new cs::point((const cs::point &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1points(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::basic_block *arg1 = (cs::basic_block *) 0 ;
  std::vector< cs::point > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::basic_block **)&jarg1; 
  {
    try {
      result = ((cs::basic_block const *)arg1)->points();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::point > **)&jresult = new std::vector< cs::point >((const std::vector< cs::point > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1predecessors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::basic_block *arg1 = (cs::basic_block *) 0 ;
  SwigValueWrapper< cs::immutable_set< std::pair< cs::basic_block,cs::edge_label > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::basic_block **)&jarg1; 
  {
    try {
      result = ((cs::basic_block const *)arg1)->predecessors();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::basic_block_cfg_edge_set **)&jresult = new cs::basic_block_cfg_edge_set((const cs::basic_block_cfg_edge_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1successors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::basic_block *arg1 = (cs::basic_block *) 0 ;
  SwigValueWrapper< cs::immutable_set< std::pair< cs::basic_block,cs::edge_label > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::basic_block **)&jarg1; 
  {
    try {
      result = ((cs::basic_block const *)arg1)->successors();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::basic_block_cfg_edge_set **)&jresult = new cs::basic_block_cfg_edge_set((const cs::basic_block_cfg_edge_set &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::basic_block *arg1 = (cs::basic_block *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::basic_block **)&jarg1; 
  {
    try {
      result = ((cs::basic_block const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::basic_block *arg1 = (cs::basic_block *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::basic_block **)&jarg1; 
  result = ((cs::basic_block const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1basic_1block(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::basic_block *arg1 = (cs::basic_block *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::basic_block **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_edge_1label_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::edge_label *arg1 = (cs::edge_label *) 0 ;
  cs::edge_label *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::edge_label **)&jarg1; 
  arg2 = *(cs::edge_label **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::edge_label const & reference is null");
    return 0;
  } 
  result = (int)((cs::edge_label const *)arg1)->cmp((cs::edge_label const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_edge_1label_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::edge_label *arg1 = (cs::edge_label *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::edge_label **)&jarg1; 
  result = (int)((cs::edge_label const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_edge_1label_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::edge_label *arg1 = (cs::edge_label *) 0 ;
  cs::edge_label *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::edge_label **)&jarg1; 
  arg2 = *(cs::edge_label **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::edge_label const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->operator ==((cs::edge_label const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1edge_1label(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  cs::edge_label *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  {
    try {
      result = (cs::edge_label *)new cs::edge_label(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::edge_label **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_edge_1label_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::edge_label *arg1 = (cs::edge_label *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::edge_label **)&jarg1; 
  {
    try {
      result = ((cs::edge_label const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_edge_1label_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::edge_label *arg1 = (cs::edge_label *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::edge_label **)&jarg1; 
  {
    try {
      result = ((cs::edge_label const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_edge_1label_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::edge_label *arg1 = (cs::edge_label *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::edge_label **)&jarg1; 
  result = ((cs::edge_label const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1edge_1label(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::edge_label *arg1 = (cs::edge_label *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::edge_label **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1procedure_1call_1sites_1flags(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  cs::procedure_call_sites_flags *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (cs::procedure_call_sites_flags *)new cs::procedure_call_sites_flags(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::procedure_call_sites_flags **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_procedure_1call_1sites_1flags_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::procedure_call_sites_flags *arg1 = (cs::procedure_call_sites_flags *) 0 ;
  cs::procedure_call_sites_flags *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::procedure_call_sites_flags **)&jarg1; 
  arg2 = *(cs::procedure_call_sites_flags **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::procedure_call_sites_flags const & reference is null");
    return 0;
  } 
  result = (int)((cs::procedure_call_sites_flags const *)arg1)->cmp((cs::procedure_call_sites_flags const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_procedure_1call_1sites_1flags_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::procedure_call_sites_flags *arg1 = (cs::procedure_call_sites_flags *) 0 ;
  cs::procedure_call_sites_flags *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::procedure_call_sites_flags **)&jarg1; 
  arg2 = *(cs::procedure_call_sites_flags **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::procedure_call_sites_flags const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::procedure_call_sites_flags const *)arg1)->operator ==((cs::procedure_call_sites_flags const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_procedure_1call_1sites_1flags_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::procedure_call_sites_flags *arg1 = (cs::procedure_call_sites_flags *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure_call_sites_flags **)&jarg1; 
  result = (int)((cs::procedure_call_sites_flags const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_procedure_1call_1sites_1flags_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::procedure_call_sites_flags *arg1 = (cs::procedure_call_sites_flags *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure_call_sites_flags **)&jarg1; 
  {
    try {
      result = ((cs::procedure_call_sites_flags const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_procedure_1call_1sites_1flags_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::procedure_call_sites_flags *arg1 = (cs::procedure_call_sites_flags *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure_call_sites_flags **)&jarg1; 
  result = ((cs::procedure_call_sites_flags const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_procedure_1call_1sites_1flags_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::procedure_call_sites_flags *arg1 = (cs::procedure_call_sites_flags *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure_call_sites_flags **)&jarg1; 
  {
    try {
      result = ((cs::procedure_call_sites_flags const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1call_1sites_1flags_1or_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::procedure_call_sites_flags *arg1 = (cs::procedure_call_sites_flags *) 0 ;
  cs::procedure_call_sites_flags *arg2 = 0 ;
  SwigValueWrapper< cs::procedure_call_sites_flags > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::procedure_call_sites_flags **)&jarg1; 
  arg2 = *(cs::procedure_call_sites_flags **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::procedure_call_sites_flags const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::procedure_call_sites_flags const *)arg1)->or_((cs::procedure_call_sites_flags const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::procedure_call_sites_flags **)&jresult = new cs::procedure_call_sites_flags((const cs::procedure_call_sites_flags &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1call_1sites_1flags_1and_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::procedure_call_sites_flags *arg1 = (cs::procedure_call_sites_flags *) 0 ;
  cs::procedure_call_sites_flags *arg2 = 0 ;
  SwigValueWrapper< cs::procedure_call_sites_flags > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::procedure_call_sites_flags **)&jarg1; 
  arg2 = *(cs::procedure_call_sites_flags **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::procedure_call_sites_flags const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::procedure_call_sites_flags const *)arg1)->and_((cs::procedure_call_sites_flags const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::procedure_call_sites_flags **)&jresult = new cs::procedure_call_sites_flags((const cs::procedure_call_sites_flags &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1call_1sites_1flags_1not_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::procedure_call_sites_flags *arg1 = (cs::procedure_call_sites_flags *) 0 ;
  SwigValueWrapper< cs::procedure_call_sites_flags > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure_call_sites_flags **)&jarg1; 
  {
    try {
      result = ((cs::procedure_call_sites_flags const *)arg1)->not_();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::procedure_call_sites_flags **)&jresult = new cs::procedure_call_sites_flags((const cs::procedure_call_sites_flags &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1call_1sites_1flags_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::procedure_call_sites_flags *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::procedure_call_sites_flags *)&cs::procedure_call_sites_flags::NONE;
  *(cs::procedure_call_sites_flags **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1call_1sites_1flags_1DIRECT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::procedure_call_sites_flags *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::procedure_call_sites_flags *)&cs::procedure_call_sites_flags::DIRECT;
  *(cs::procedure_call_sites_flags **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1call_1sites_1flags_1INDIRECT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::procedure_call_sites_flags *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::procedure_call_sites_flags *)&cs::procedure_call_sites_flags::INDIRECT;
  *(cs::procedure_call_sites_flags **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1procedure_1call_1sites_1flags(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::procedure_call_sites_flags *arg1 = (cs::procedure_call_sites_flags *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::procedure_call_sites_flags **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_procedure_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  cs::procedure *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::procedure **)&jarg1; 
  arg2 = *(cs::procedure **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::procedure const & reference is null");
    return 0;
  } 
  result = (int)((cs::procedure const *)arg1)->cmp((cs::procedure const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_procedure_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  result = (int)((cs::procedure const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_procedure_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  cs::procedure *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::procedure **)&jarg1; 
  arg2 = *(cs::procedure **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::procedure const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->operator ==((cs::procedure const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1get_1kind(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  SwigValueWrapper< cs::procedure_kind > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = ((cs::procedure const *)arg1)->get_kind();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::procedure_kind **)&jresult = new cs::procedure_kind((const cs::procedure_kind &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1get_1ast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  SwigValueWrapper< cs::ast_family > arg2 ;
  cs::ast_family *argp2 ;
  SwigValueWrapper< cs::ast > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::procedure **)&jarg1; 
  argp2 = *(cs::ast_family **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_family");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((cs::procedure const *)arg1)->get_ast(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast **)&jresult = new cs::ast((const cs::ast &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_procedure_1set_1ast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  SwigValueWrapper< cs::ast_family > arg2 ;
  SwigValueWrapper< cs::ast > arg3 ;
  cs::ast_family *argp2 ;
  cs::ast *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cs::procedure **)&jarg1; 
  argp2 = *(cs::ast_family **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_family");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(cs::ast **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast");
    return ;
  }
  arg3 = *argp3; 
  {
    try {
      (arg1)->set_ast(arg2,arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1file_1line(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  SwigValueWrapper< std::pair< cs::sfileinst,unsigned int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = ((cs::procedure const *)arg1)->file_line();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::sfileinst_line_pair **)&jresult = new cs::sfileinst_line_pair((const cs::sfileinst_line_pair &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1compunit_1line(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  SwigValueWrapper< std::pair< cs::compunit,unsigned int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = ((cs::procedure const *)arg1)->compunit_line();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::compunit_line_pair **)&jresult = new cs::compunit_line_pair((const cs::compunit_line_pair &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1get_1symbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  SwigValueWrapper< cs::symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = ((cs::procedure const *)arg1)->get_symbol();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::symbol **)&jresult = new cs::symbol((const cs::symbol &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1get_1compunit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  SwigValueWrapper< cs::compunit > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = ((cs::procedure const *)arg1)->get_compunit();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::compunit **)&jresult = new cs::compunit((const cs::compunit &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1entry_1point(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  SwigValueWrapper< cs::point > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = ((cs::procedure const *)arg1)->entry_point();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point **)&jresult = new cs::point((const cs::point &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1exit_1point(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  SwigValueWrapper< cs::point > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = ((cs::procedure const *)arg1)->exit_point();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point **)&jresult = new cs::point((const cs::point &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  csint64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = (csint64)((cs::procedure const *)arg1)->id();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_procedure_1verbose_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = ((cs::procedure const *)arg1)->verbose_name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_procedure_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = ((cs::procedure const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1points(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = ((cs::procedure const *)arg1)->points();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1local_1symbols(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::procedure_locals_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = ((cs::procedure const *)arg1)->local_symbols();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::procedure_locals_iterator **)&jresult = new cs::procedure_locals_iterator((const cs::procedure_locals_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1declared_1symbols(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  std::vector< cs::symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = ((cs::procedure const *)arg1)->declared_symbols();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::symbol > **)&jresult = new std::vector< cs::symbol >((const std::vector< cs::symbol > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1find_1symbol_1by_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  csint32 arg2 ;
  SwigValueWrapper< cs::symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  arg2 = (csint32)jarg2; 
  {
    try {
      result = ((cs::procedure const *)arg1)->find_symbol_by_offset(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::symbol **)&jresult = new cs::symbol((const cs::symbol &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1find_1containing_1symbol_1by_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  csint32 arg2 ;
  SwigValueWrapper< cs::symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  arg2 = (csint32)jarg2; 
  {
    try {
      result = ((cs::procedure const *)arg1)->find_containing_symbol_by_offset(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::symbol **)&jresult = new cs::symbol((const cs::symbol &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1add_1declaration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  SwigValueWrapper< cs::symbol > arg2 ;
  cs::symbol *argp2 ;
  SwigValueWrapper< cs::point > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::procedure **)&jarg1; 
  argp2 = *(cs::symbol **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::symbol");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (arg1)->add_declaration(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point **)&jresult = new cs::point((const cs::point &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1call_1sites_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  SwigValueWrapper< cs::procedure_call_sites_flags > arg2 ;
  cs::procedure_call_sites_flags *argp2 ;
  std::vector< cs::point > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::procedure **)&jarg1; 
  argp2 = *(cs::procedure_call_sites_flags **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::procedure_call_sites_flags");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((cs::procedure const *)arg1)->call_sites_vector(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::point > **)&jresult = new std::vector< cs::point >((const std::vector< cs::point > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1call_1sites_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  std::vector< cs::point > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = ((cs::procedure const *)arg1)->call_sites_vector();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::point > **)&jresult = new std::vector< cs::point >((const std::vector< cs::point > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1call_1sites_1count_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  SwigValueWrapper< cs::procedure_call_sites_flags > arg2 ;
  cs::procedure_call_sites_flags *argp2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::procedure **)&jarg1; 
  argp2 = *(cs::procedure_call_sites_flags **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::procedure_call_sites_flags");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((cs::procedure const *)arg1)->call_sites_count(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1call_1sites_1count_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = ((cs::procedure const *)arg1)->call_sites_count();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1call_1sites_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  SwigValueWrapper< cs::procedure_call_sites_flags > arg2 ;
  cs::procedure_call_sites_flags *argp2 ;
  SwigValueWrapper< cs::iterator_adapter< cs::procedure_call_sites_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::procedure **)&jarg1; 
  argp2 = *(cs::procedure_call_sites_flags **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::procedure_call_sites_flags");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((cs::procedure const *)arg1)->call_sites(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::procedure_call_sites_iterator **)&jresult = new cs::procedure_call_sites_iterator((const cs::procedure_call_sites_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1call_1sites_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::procedure_call_sites_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = ((cs::procedure const *)arg1)->call_sites();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::procedure_call_sites_iterator **)&jresult = new cs::procedure_call_sites_iterator((const cs::procedure_call_sites_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1callers_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = ((cs::procedure const *)arg1)->callers_count();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1callers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::procedure_callers_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = ((cs::procedure const *)arg1)->callers();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::procedure_callers_iterator **)&jresult = new cs::procedure_callers_iterator((const cs::procedure_callers_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1formal_1ins(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = ((cs::procedure const *)arg1)->formal_ins();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1formal_1ins_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  std::vector< cs::point > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = ((cs::procedure const *)arg1)->formal_ins_vector();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::point > **)&jresult = new std::vector< cs::point >((const std::vector< cs::point > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1formal_1in(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< cs::point > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (arg1)->formal_in(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point **)&jresult = new cs::point((const cs::point &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_procedure_1set_1formal_1ins(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  std::vector< cs::symbol > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::procedure **)&jarg1; 
  arg2 = *(std::vector< cs::symbol > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::symbol > const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set_formal_ins((std::vector< cs::symbol > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1formal_1outs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = ((cs::procedure const *)arg1)->formal_outs();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1formal_1outs_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  std::vector< cs::point > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = ((cs::procedure const *)arg1)->formal_outs_vector();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::point > **)&jresult = new std::vector< cs::point >((const std::vector< cs::point > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_procedure_1set_1formal_1outs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  std::vector< cs::symbol > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::procedure **)&jarg1; 
  arg2 = *(std::vector< cs::symbol > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::symbol > const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set_formal_outs((std::vector< cs::symbol > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1retrieve_1point(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  csint64 arg2 ;
  SwigValueWrapper< cs::point > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  arg2 = (csint64)jarg2; 
  {
    try {
      result = ((cs::procedure const *)arg1)->retrieve_point(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point **)&jresult = new cs::point((const cs::point &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1used_1points(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  SwigValueWrapper< cs::symbol > arg2 ;
  cs::symbol *argp2 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::procedure **)&jarg1; 
  argp2 = *(cs::symbol **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::symbol");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((cs::procedure const *)arg1)->used_points(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1used_1points_1from_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  cs::symbol_set *arg2 = 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::procedure **)&jarg1; 
  arg2 = *(cs::symbol_set **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::symbol_set const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::procedure const *)arg1)->used_points_from_set((cs::symbol_set const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1killed_1points(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  SwigValueWrapper< cs::symbol > arg2 ;
  cs::symbol *argp2 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::procedure **)&jarg1; 
  argp2 = *(cs::symbol **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::symbol");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((cs::procedure const *)arg1)->killed_points(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1killed_1points_1from_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  cs::symbol_set *arg2 = 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::procedure **)&jarg1; 
  arg2 = *(cs::symbol_set **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::symbol_set const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::procedure const *)arg1)->killed_points_from_set((cs::symbol_set const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1cond_1killed_1points(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  SwigValueWrapper< cs::symbol > arg2 ;
  cs::symbol *argp2 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::procedure **)&jarg1; 
  argp2 = *(cs::symbol **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::symbol");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((cs::procedure const *)arg1)->cond_killed_points(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1cond_1killed_1points_1from_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  cs::symbol_set *arg2 = 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::procedure **)&jarg1; 
  arg2 = *(cs::symbol_set **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::symbol_set const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::procedure const *)arg1)->cond_killed_points_from_set((cs::symbol_set const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1may_1killed_1points(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  SwigValueWrapper< cs::symbol > arg2 ;
  cs::symbol *argp2 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::procedure **)&jarg1; 
  argp2 = *(cs::symbol **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::symbol");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((cs::procedure const *)arg1)->may_killed_points(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1may_1killed_1points_1from_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  cs::symbol_set *arg2 = 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::procedure **)&jarg1; 
  arg2 = *(cs::symbol_set **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::symbol_set const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::procedure const *)arg1)->may_killed_points_from_set((cs::symbol_set const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1gref(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  cs::symbol_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = ((cs::procedure const *)arg1)->gref();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::symbol_set **)&jresult = new cs::symbol_set((const cs::symbol_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1gmod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  cs::symbol_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = ((cs::procedure const *)arg1)->gmod();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::symbol_set **)&jresult = new cs::symbol_set((const cs::symbol_set &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_procedure_1has_1vararg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = (bool)((cs::procedure const *)arg1)->has_vararg();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_procedure_1has_1incomplete_1summary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = (bool)((cs::procedure const *)arg1)->has_incomplete_summary();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1scc_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = ((cs::procedure const *)arg1)->scc_id();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1retrieve_1basic_1block(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  csint64 arg2 ;
  SwigValueWrapper< cs::basic_block > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  arg2 = (csint64)jarg2; 
  {
    try {
      result = ((cs::procedure const *)arg1)->retrieve_basic_block(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::basic_block **)&jresult = new cs::basic_block((const cs::basic_block &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1entry_1basic_1block(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  SwigValueWrapper< cs::basic_block > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = ((cs::procedure const *)arg1)->entry_basic_block();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::basic_block **)&jresult = new cs::basic_block((const cs::basic_block &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1exit_1basic_1block(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  SwigValueWrapper< cs::basic_block > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = ((cs::procedure const *)arg1)->exit_basic_block();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::basic_block **)&jresult = new cs::basic_block((const cs::basic_block &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1basic_1blocks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  cs::basic_block_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = ((cs::procedure const *)arg1)->basic_blocks();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::basic_block_set **)&jresult = new cs::basic_block_set((const cs::basic_block_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1normal_1exit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  SwigValueWrapper< cs::point > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = ((cs::procedure const *)arg1)->normal_exit();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point **)&jresult = new cs::point((const cs::point &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1exceptional_1exits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  std::vector< cs::exceptional_exit > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = ((cs::procedure const *)arg1)->exceptional_exits();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::exceptional_exit > **)&jresult = new std::vector< cs::exceptional_exit >((const std::vector< cs::exceptional_exit > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_procedure_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = ((cs::procedure const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_procedure_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  result = ((cs::procedure const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_grammatech_cs_csJNI_procedure_1get_1address(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  cs_ea result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::procedure **)&jarg1; 
  {
    try {
      result = (cs_ea)((cs::procedure const *)arg1)->get_address();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1procedure(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::procedure *arg1 = (cs::procedure *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::procedure **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jobject JNICALL Java_com_grammatech_cs_csJNI_xr_1namehash(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jobject jresult = 0 ;
  std::string *arg1 = 0 ;
  csuint64 result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (csuint64)cs::xr_namehash((std::string const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1xr_1kind(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  cs::xr_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (cs::xr_kind *)new cs::xr_kind(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::xr_kind *arg1 = (cs::xr_kind *) 0 ;
  cs::xr_kind *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::xr_kind **)&jarg1; 
  arg2 = *(cs::xr_kind **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::xr_kind const & reference is null");
    return 0;
  } 
  result = (int)((cs::xr_kind const *)arg1)->cmp((cs::xr_kind const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::xr_kind *arg1 = (cs::xr_kind *) 0 ;
  cs::xr_kind *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::xr_kind **)&jarg1; 
  arg2 = *(cs::xr_kind **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::xr_kind const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::xr_kind const *)arg1)->operator ==((cs::xr_kind const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::xr_kind *arg1 = (cs::xr_kind *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_kind **)&jarg1; 
  result = (int)((cs::xr_kind const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::xr_kind *arg1 = (cs::xr_kind *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_kind **)&jarg1; 
  {
    try {
      result = ((cs::xr_kind const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::xr_kind *arg1 = (cs::xr_kind *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_kind **)&jarg1; 
  result = ((cs::xr_kind const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::xr_kind *arg1 = (cs::xr_kind *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_kind **)&jarg1; 
  {
    try {
      result = ((cs::xr_kind const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind *)&cs::xr_kind::TYPE;
  *(cs::xr_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1NAMESPACE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind *)&cs::xr_kind::NAMESPACE;
  *(cs::xr_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1FUNC_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind *)&cs::xr_kind::FUNC;
  *(cs::xr_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1VAR_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind *)&cs::xr_kind::VAR;
  *(cs::xr_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1MACRO_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind *)&cs::xr_kind::MACRO;
  *(cs::xr_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1FIELD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind *)&cs::xr_kind::FIELD;
  *(cs::xr_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1ENUM_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind *)&cs::xr_kind::ENUM;
  *(cs::xr_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1STRINGLIT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind *)&cs::xr_kind::STRINGLIT;
  *(cs::xr_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1TLT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind *)&cs::xr_kind::TLT;
  *(cs::xr_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1TLV_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind *)&cs::xr_kind::TLV;
  *(cs::xr_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1LABEL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind *)&cs::xr_kind::LABEL;
  *(cs::xr_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1FILE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind *)&cs::xr_kind::FILE;
  *(cs::xr_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1BUILTIN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind *)&cs::xr_kind::BUILTIN;
  *(cs::xr_kind **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1xr_1kind(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::xr_kind *arg1 = (cs::xr_kind *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::xr_kind **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1xr_1role(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (cs::xr_role *)new cs::xr_role(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::xr_role *arg1 = (cs::xr_role *) 0 ;
  cs::xr_role *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::xr_role **)&jarg1; 
  arg2 = *(cs::xr_role **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::xr_role const & reference is null");
    return 0;
  } 
  result = (int)((cs::xr_role const *)arg1)->cmp((cs::xr_role const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::xr_role *arg1 = (cs::xr_role *) 0 ;
  cs::xr_role *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::xr_role **)&jarg1; 
  arg2 = *(cs::xr_role **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::xr_role const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::xr_role const *)arg1)->operator ==((cs::xr_role const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::xr_role *arg1 = (cs::xr_role *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_role **)&jarg1; 
  result = (int)((cs::xr_role const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::xr_role *arg1 = (cs::xr_role *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_role **)&jarg1; 
  {
    try {
      result = ((cs::xr_role const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::xr_role *arg1 = (cs::xr_role *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_role **)&jarg1; 
  result = ((cs::xr_role const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::xr_role *arg1 = (cs::xr_role *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_role **)&jarg1; 
  {
    try {
      result = ((cs::xr_role const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1AGGREGATE_1MEMBER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::AGGREGATE_MEMBER;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1CALL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::CALL;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1CAST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::CAST;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1CATCH_1PARAM_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::CATCH_PARAM;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1DECLARATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::DECLARATION;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1DEFINITION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::DEFINITION;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1EXT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::EXT;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1FILE_1STATIC_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::FILE_STATIC;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1FORMAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::FORMAL;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1FRIEND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::FRIEND;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1GLOBAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::GLOBAL;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1GOTO_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::GOTO;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1CONSTANT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::CONSTANT;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1INCLUDE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::INCLUDE;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1INVOCATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::INVOCATION;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1LOCAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::LOCAL;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1LOCAL_1STATIC_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::LOCAL_STATIC;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1METHOD_1INVOCATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::METHOD_INVOCATION;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1CONSTRUCTOR_1INITIALIZATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::CONSTRUCTOR_INITIALIZATION;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1NEW_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::NEW;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1OCCURRENCE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::OCCURRENCE;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1OTHER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::OTHER;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1SIZEOF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::SIZEOF;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1READ_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::READ;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1REDEF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::REDEF;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1RETURN_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::RETURN_TYPE;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1QUALIFIER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::QUALIFIER;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1SUBCLASS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::SUBCLASS;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1TAKE_1ADDRESS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::TAKE_ADDRESS;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1TEMPL_1ARG_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::TEMPL_ARG;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1TEMPLATE_1PARAMETER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::TEMPLATE_PARAMETER;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1THROW_1EXCEPTION_1SPEC_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::THROW_EXCEPTION_SPEC;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1TYPEDEF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::TYPEDEF;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1UNDEF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::UNDEF;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1USING_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::USING;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1WRITE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::WRITE;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1role_1WRITE_1THROUGH_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_role *)&cs::xr_role::WRITE_THROUGH;
  *(cs::xr_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1xr_1role(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::xr_role *arg1 = (cs::xr_role *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::xr_role **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1xr_1kind_1role_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (cs::xr_kind_role *)new cs::xr_kind_role(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::xr_kind_role *arg1 = (cs::xr_kind_role *) 0 ;
  cs::xr_kind_role *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::xr_kind_role **)&jarg1; 
  arg2 = *(cs::xr_kind_role **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::xr_kind_role const & reference is null");
    return 0;
  } 
  result = (int)((cs::xr_kind_role const *)arg1)->cmp((cs::xr_kind_role const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::xr_kind_role *arg1 = (cs::xr_kind_role *) 0 ;
  cs::xr_kind_role *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::xr_kind_role **)&jarg1; 
  arg2 = *(cs::xr_kind_role **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::xr_kind_role const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::xr_kind_role const *)arg1)->operator ==((cs::xr_kind_role const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::xr_kind_role *arg1 = (cs::xr_kind_role *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_kind_role **)&jarg1; 
  result = (int)((cs::xr_kind_role const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::xr_kind_role *arg1 = (cs::xr_kind_role *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_kind_role **)&jarg1; 
  {
    try {
      result = ((cs::xr_kind_role const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::xr_kind_role *arg1 = (cs::xr_kind_role *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_kind_role **)&jarg1; 
  result = ((cs::xr_kind_role const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::xr_kind_role *arg1 = (cs::xr_kind_role *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_kind_role **)&jarg1; 
  {
    try {
      result = ((cs::xr_kind_role const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1xr_1kind_1role_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::xr_kind > arg1 ;
  SwigValueWrapper< cs::xr_role > arg2 ;
  cs::xr_kind *argp1 ;
  cs::xr_role *argp2 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(cs::xr_kind **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::xr_kind");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(cs::xr_role **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::xr_role");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (cs::xr_kind_role *)new cs::xr_kind_role(arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1decompose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::xr_kind_role *arg1 = (cs::xr_kind_role *) 0 ;
  SwigValueWrapper< std::pair< cs::xr_kind,cs::xr_role > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_kind_role **)&jarg1; 
  {
    try {
      result = ((cs::xr_kind_role const *)arg1)->decompose();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::pair< cs::xr_kind,cs::xr_role > **)&jresult = new std::pair< cs::xr_kind,cs::xr_role >((const std::pair< cs::xr_kind,cs::xr_role > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TYPE_1DEFINITION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TYPE_DEFINITION;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1NAMESPACE_1DEFINITION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::NAMESPACE_DEFINITION;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1FUNC_1DEFINITION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::FUNC_DEFINITION;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1VAR_1DEFINITION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::VAR_DEFINITION;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1MACRO_1DEFINITION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::MACRO_DEFINITION;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1FIELD_1DEFINITION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::FIELD_DEFINITION;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1ENUM_1DEFINITION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::ENUM_DEFINITION;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1STRINGLIT_1DEFINITION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::STRINGLIT_DEFINITION;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TLT_1DEFINITION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TLT_DEFINITION;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TLV_1DEFINITION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TLV_DEFINITION;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1LABEL_1DEFINITION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::LABEL_DEFINITION;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1FILE_1DEFINITION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::FILE_DEFINITION;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1LAST_1DEFINITION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::LAST_DEFINITION;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1ENUM_1OCCURRENCE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::ENUM_OCCURRENCE;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1FIELD_1READ_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::FIELD_READ;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1FIELD_1WRITE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::FIELD_WRITE;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1FIELD_1WRITE_1THROUGH_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::FIELD_WRITE_THROUGH;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1FIELD_1TAKE_1ADDRESS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::FIELD_TAKE_ADDRESS;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1FIELD_1INVOCATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::FIELD_INVOCATION;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1FIELD_1METHOD_1INVOCATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::FIELD_METHOD_INVOCATION;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1FIELD_1CONSTRUCTOR_1INITIALIZATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::FIELD_CONSTRUCTOR_INITIALIZATION;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1FIELD_1SIZEOF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::FIELD_SIZEOF;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1FIELD_1OTHER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::FIELD_OTHER;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1VAR_1DECLARATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::VAR_DECLARATION;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1VAR_1READ_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::VAR_READ;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1VAR_1WRITE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::VAR_WRITE;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1VAR_1WRITE_1THROUGH_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::VAR_WRITE_THROUGH;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1VAR_1TAKE_1ADDRESS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::VAR_TAKE_ADDRESS;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1VAR_1INVOCATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::VAR_INVOCATION;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1VAR_1METHOD_1INVOCATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::VAR_METHOD_INVOCATION;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1VAR_1TEMPL_1ARG_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::VAR_TEMPL_ARG;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1VAR_1SIZEOF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::VAR_SIZEOF;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1VAR_1OTHER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::VAR_OTHER;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TLV_1READ_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TLV_READ;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TLV_1WRITE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TLV_WRITE;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TLV_1WRITE_1THROUGH_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TLV_WRITE_THROUGH;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TLV_1TAKE_1ADDRESS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TLV_TAKE_ADDRESS;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TLV_1INVOCATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TLV_INVOCATION;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TLV_1METHOD_1INVOCATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TLV_METHOD_INVOCATION;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TLV_1TEMPL_1ARG_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TLV_TEMPL_ARG;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TLV_1SIZEOF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TLV_SIZEOF;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TLV_1OTHER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TLV_OTHER;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1FUNC_1DECLARATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::FUNC_DECLARATION;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1FUNC_1TAKE_1ADDRESS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::FUNC_TAKE_ADDRESS;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1FUNC_1CALL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::FUNC_CALL;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1FUNC_1TEMPL_1ARG_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::FUNC_TEMPL_ARG;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1FUNC_1FRIEND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::FUNC_FRIEND;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1FUNC_1SIZEOF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::FUNC_SIZEOF;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1FUNC_1OTHER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::FUNC_OTHER;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TYPE_1DECLARATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TYPE_DECLARATION;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TYPE_1AGGREGATE_1MEMBER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TYPE_AGGREGATE_MEMBER;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TYPE_1LOCAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TYPE_LOCAL;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TYPE_1TEMPLATE_1PARAMETER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TYPE_TEMPLATE_PARAMETER;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TYPE_1FORMAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TYPE_FORMAL;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TYPE_1FRIEND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TYPE_FRIEND;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TYPE_1FILE_1STATIC_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TYPE_FILE_STATIC;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TYPE_1LOCAL_1STATIC_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TYPE_LOCAL_STATIC;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TYPE_1GLOBAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TYPE_GLOBAL;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TYPE_1CONSTANT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TYPE_CONSTANT;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TYPE_1CONSTRUCTOR_1INITIALIZATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TYPE_CONSTRUCTOR_INITIALIZATION;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TYPE_1CAST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TYPE_CAST;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TYPE_1QUALIFIER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TYPE_QUALIFIER;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TYPE_1NEW_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TYPE_NEW;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TYPE_1RETURN_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TYPE_RETURN_TYPE;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TYPE_1TYPEDEF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TYPE_TYPEDEF;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TYPE_1SUBCLASS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TYPE_SUBCLASS;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TYPE_1CATCH_1PARAM_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TYPE_CATCH_PARAM;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TYPE_1THROW_1EXCEPTION_1SPEC_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TYPE_THROW_EXCEPTION_SPEC;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TYPE_1TEMPL_1ARG_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TYPE_TEMPL_ARG;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TYPE_1SIZEOF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TYPE_SIZEOF;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TYPE_1OTHER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TYPE_OTHER;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TLT_1AGGREGATE_1MEMBER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TLT_AGGREGATE_MEMBER;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TLT_1LOCAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TLT_LOCAL;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TLT_1TEMPLATE_1PARAMETER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TLT_TEMPLATE_PARAMETER;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TLT_1FORMAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TLT_FORMAL;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TLT_1FRIEND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TLT_FRIEND;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TLT_1FILE_1STATIC_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TLT_FILE_STATIC;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TLT_1LOCAL_1STATIC_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TLT_LOCAL_STATIC;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TLT_1GLOBAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TLT_GLOBAL;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TLT_1CONSTANT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TLT_CONSTANT;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TLT_1CAST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TLT_CAST;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TLT_1QUALIFIER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TLT_QUALIFIER;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TLT_1NEW_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TLT_NEW;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TLT_1RETURN_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TLT_RETURN_TYPE;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TLT_1TYPEDEF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TLT_TYPEDEF;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TLT_1SUBCLASS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TLT_SUBCLASS;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TLT_1CATCH_1PARAM_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TLT_CATCH_PARAM;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TLT_1THROW_1EXCEPTION_1SPEC_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TLT_THROW_EXCEPTION_SPEC;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TLT_1TEMPL_1ARG_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TLT_TEMPL_ARG;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TLT_1SIZEOF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TLT_SIZEOF;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1TLT_1OTHER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::TLT_OTHER;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1MACRO_1UNDEF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::MACRO_UNDEF;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1MACRO_1REDEF_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::MACRO_REDEF;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1MACRO_1INVOCATION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::MACRO_INVOCATION;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1NAMESPACE_1EXT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::NAMESPACE_EXT;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1NAMESPACE_1USING_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::NAMESPACE_USING;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1NAMESPACE_1QUALIFIER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::NAMESPACE_QUALIFIER;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1LABEL_1GOTO_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::LABEL_GOTO;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1LABEL_1TAKE_1ADDRESS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::LABEL_TAKE_ADDRESS;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1FILE_1INCLUDE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::FILE_INCLUDE;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1kind_1role_1BUILTIN_1OTHER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_kind_role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_kind_role *)&cs::xr_kind_role::BUILTIN_OTHER;
  *(cs::xr_kind_role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1xr_1kind_1role(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::xr_kind_role *arg1 = (cs::xr_kind_role *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::xr_kind_role **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1xr_1def_1iter_1flags(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  cs::xr_def_iter_flags *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (cs::xr_def_iter_flags *)new cs::xr_def_iter_flags(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_def_iter_flags **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_xr_1def_1iter_1flags_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::xr_def_iter_flags *arg1 = (cs::xr_def_iter_flags *) 0 ;
  cs::xr_def_iter_flags *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::xr_def_iter_flags **)&jarg1; 
  arg2 = *(cs::xr_def_iter_flags **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::xr_def_iter_flags const & reference is null");
    return 0;
  } 
  result = (int)((cs::xr_def_iter_flags const *)arg1)->cmp((cs::xr_def_iter_flags const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_xr_1def_1iter_1flags_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::xr_def_iter_flags *arg1 = (cs::xr_def_iter_flags *) 0 ;
  cs::xr_def_iter_flags *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::xr_def_iter_flags **)&jarg1; 
  arg2 = *(cs::xr_def_iter_flags **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::xr_def_iter_flags const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::xr_def_iter_flags const *)arg1)->operator ==((cs::xr_def_iter_flags const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_xr_1def_1iter_1flags_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::xr_def_iter_flags *arg1 = (cs::xr_def_iter_flags *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_def_iter_flags **)&jarg1; 
  result = (int)((cs::xr_def_iter_flags const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1def_1iter_1flags_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::xr_def_iter_flags *arg1 = (cs::xr_def_iter_flags *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_def_iter_flags **)&jarg1; 
  {
    try {
      result = ((cs::xr_def_iter_flags const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1def_1iter_1flags_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::xr_def_iter_flags *arg1 = (cs::xr_def_iter_flags *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_def_iter_flags **)&jarg1; 
  result = ((cs::xr_def_iter_flags const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1def_1iter_1flags_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::xr_def_iter_flags *arg1 = (cs::xr_def_iter_flags *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_def_iter_flags **)&jarg1; 
  {
    try {
      result = ((cs::xr_def_iter_flags const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1def_1iter_1flags_1or_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::xr_def_iter_flags *arg1 = (cs::xr_def_iter_flags *) 0 ;
  cs::xr_def_iter_flags *arg2 = 0 ;
  SwigValueWrapper< cs::xr_def_iter_flags > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::xr_def_iter_flags **)&jarg1; 
  arg2 = *(cs::xr_def_iter_flags **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::xr_def_iter_flags const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::xr_def_iter_flags const *)arg1)->or_((cs::xr_def_iter_flags const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_def_iter_flags **)&jresult = new cs::xr_def_iter_flags((const cs::xr_def_iter_flags &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1def_1iter_1flags_1and_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::xr_def_iter_flags *arg1 = (cs::xr_def_iter_flags *) 0 ;
  cs::xr_def_iter_flags *arg2 = 0 ;
  SwigValueWrapper< cs::xr_def_iter_flags > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::xr_def_iter_flags **)&jarg1; 
  arg2 = *(cs::xr_def_iter_flags **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::xr_def_iter_flags const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::xr_def_iter_flags const *)arg1)->and_((cs::xr_def_iter_flags const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_def_iter_flags **)&jresult = new cs::xr_def_iter_flags((const cs::xr_def_iter_flags &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1def_1iter_1flags_1not_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::xr_def_iter_flags *arg1 = (cs::xr_def_iter_flags *) 0 ;
  SwigValueWrapper< cs::xr_def_iter_flags > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_def_iter_flags **)&jarg1; 
  {
    try {
      result = ((cs::xr_def_iter_flags const *)arg1)->not_();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_def_iter_flags **)&jresult = new cs::xr_def_iter_flags((const cs::xr_def_iter_flags &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1def_1iter_1flags_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_def_iter_flags *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_def_iter_flags *)&cs::xr_def_iter_flags::NONE;
  *(cs::xr_def_iter_flags **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1def_1iter_1flags_1DROP_1LIBMODEL_1DEFS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_def_iter_flags *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_def_iter_flags *)&cs::xr_def_iter_flags::DROP_LIBMODEL_DEFS;
  *(cs::xr_def_iter_flags **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1xr_1def_1iter_1flags(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::xr_def_iter_flags *arg1 = (cs::xr_def_iter_flags *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::xr_def_iter_flags **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1xr_1occ_1iter_1flags(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  cs::xr_occ_iter_flags *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (cs::xr_occ_iter_flags *)new cs::xr_occ_iter_flags(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_occ_iter_flags **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_xr_1occ_1iter_1flags_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::xr_occ_iter_flags *arg1 = (cs::xr_occ_iter_flags *) 0 ;
  cs::xr_occ_iter_flags *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::xr_occ_iter_flags **)&jarg1; 
  arg2 = *(cs::xr_occ_iter_flags **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::xr_occ_iter_flags const & reference is null");
    return 0;
  } 
  result = (int)((cs::xr_occ_iter_flags const *)arg1)->cmp((cs::xr_occ_iter_flags const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_xr_1occ_1iter_1flags_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::xr_occ_iter_flags *arg1 = (cs::xr_occ_iter_flags *) 0 ;
  cs::xr_occ_iter_flags *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::xr_occ_iter_flags **)&jarg1; 
  arg2 = *(cs::xr_occ_iter_flags **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::xr_occ_iter_flags const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::xr_occ_iter_flags const *)arg1)->operator ==((cs::xr_occ_iter_flags const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_xr_1occ_1iter_1flags_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::xr_occ_iter_flags *arg1 = (cs::xr_occ_iter_flags *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_occ_iter_flags **)&jarg1; 
  result = (int)((cs::xr_occ_iter_flags const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1occ_1iter_1flags_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::xr_occ_iter_flags *arg1 = (cs::xr_occ_iter_flags *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_occ_iter_flags **)&jarg1; 
  {
    try {
      result = ((cs::xr_occ_iter_flags const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1occ_1iter_1flags_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::xr_occ_iter_flags *arg1 = (cs::xr_occ_iter_flags *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_occ_iter_flags **)&jarg1; 
  result = ((cs::xr_occ_iter_flags const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1occ_1iter_1flags_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::xr_occ_iter_flags *arg1 = (cs::xr_occ_iter_flags *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_occ_iter_flags **)&jarg1; 
  {
    try {
      result = ((cs::xr_occ_iter_flags const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1occ_1iter_1flags_1or_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::xr_occ_iter_flags *arg1 = (cs::xr_occ_iter_flags *) 0 ;
  cs::xr_occ_iter_flags *arg2 = 0 ;
  SwigValueWrapper< cs::xr_occ_iter_flags > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::xr_occ_iter_flags **)&jarg1; 
  arg2 = *(cs::xr_occ_iter_flags **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::xr_occ_iter_flags const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::xr_occ_iter_flags const *)arg1)->or_((cs::xr_occ_iter_flags const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_occ_iter_flags **)&jresult = new cs::xr_occ_iter_flags((const cs::xr_occ_iter_flags &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1occ_1iter_1flags_1and_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::xr_occ_iter_flags *arg1 = (cs::xr_occ_iter_flags *) 0 ;
  cs::xr_occ_iter_flags *arg2 = 0 ;
  SwigValueWrapper< cs::xr_occ_iter_flags > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::xr_occ_iter_flags **)&jarg1; 
  arg2 = *(cs::xr_occ_iter_flags **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::xr_occ_iter_flags const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::xr_occ_iter_flags const *)arg1)->and_((cs::xr_occ_iter_flags const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_occ_iter_flags **)&jresult = new cs::xr_occ_iter_flags((const cs::xr_occ_iter_flags &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1occ_1iter_1flags_1not_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::xr_occ_iter_flags *arg1 = (cs::xr_occ_iter_flags *) 0 ;
  SwigValueWrapper< cs::xr_occ_iter_flags > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_occ_iter_flags **)&jarg1; 
  {
    try {
      result = ((cs::xr_occ_iter_flags const *)arg1)->not_();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_occ_iter_flags **)&jresult = new cs::xr_occ_iter_flags((const cs::xr_occ_iter_flags &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1occ_1iter_1flags_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_occ_iter_flags *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_occ_iter_flags *)&cs::xr_occ_iter_flags::NONE;
  *(cs::xr_occ_iter_flags **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1occ_1iter_1flags_1DROP_1LIBMODEL_1DEFS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_occ_iter_flags *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_occ_iter_flags *)&cs::xr_occ_iter_flags::DROP_LIBMODEL_DEFS;
  *(cs::xr_occ_iter_flags **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1occ_1iter_1flags_1DROP_1LIBMODEL_1OCCS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_occ_iter_flags *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_occ_iter_flags *)&cs::xr_occ_iter_flags::DROP_LIBMODEL_OCCS;
  *(cs::xr_occ_iter_flags **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1occ_1iter_1flags_1DONTCARE_1COMPLETE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_occ_iter_flags *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_occ_iter_flags *)&cs::xr_occ_iter_flags::DONTCARE_COMPLETE;
  *(cs::xr_occ_iter_flags **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1xr_1occ_1iter_1flags(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::xr_occ_iter_flags *arg1 = (cs::xr_occ_iter_flags *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::xr_occ_iter_flags **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1xr_1query_1flags(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  cs::xr_query_flags *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (cs::xr_query_flags *)new cs::xr_query_flags(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_query_flags **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_xr_1query_1flags_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::xr_query_flags *arg1 = (cs::xr_query_flags *) 0 ;
  cs::xr_query_flags *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::xr_query_flags **)&jarg1; 
  arg2 = *(cs::xr_query_flags **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::xr_query_flags const & reference is null");
    return 0;
  } 
  result = (int)((cs::xr_query_flags const *)arg1)->cmp((cs::xr_query_flags const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_xr_1query_1flags_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::xr_query_flags *arg1 = (cs::xr_query_flags *) 0 ;
  cs::xr_query_flags *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::xr_query_flags **)&jarg1; 
  arg2 = *(cs::xr_query_flags **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::xr_query_flags const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::xr_query_flags const *)arg1)->operator ==((cs::xr_query_flags const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_xr_1query_1flags_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::xr_query_flags *arg1 = (cs::xr_query_flags *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_query_flags **)&jarg1; 
  result = (int)((cs::xr_query_flags const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1query_1flags_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::xr_query_flags *arg1 = (cs::xr_query_flags *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_query_flags **)&jarg1; 
  {
    try {
      result = ((cs::xr_query_flags const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1query_1flags_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::xr_query_flags *arg1 = (cs::xr_query_flags *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_query_flags **)&jarg1; 
  result = ((cs::xr_query_flags const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1query_1flags_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::xr_query_flags *arg1 = (cs::xr_query_flags *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_query_flags **)&jarg1; 
  {
    try {
      result = ((cs::xr_query_flags const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1query_1flags_1or_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::xr_query_flags *arg1 = (cs::xr_query_flags *) 0 ;
  cs::xr_query_flags *arg2 = 0 ;
  SwigValueWrapper< cs::xr_query_flags > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::xr_query_flags **)&jarg1; 
  arg2 = *(cs::xr_query_flags **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::xr_query_flags const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::xr_query_flags const *)arg1)->or_((cs::xr_query_flags const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_query_flags **)&jresult = new cs::xr_query_flags((const cs::xr_query_flags &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1query_1flags_1and_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::xr_query_flags *arg1 = (cs::xr_query_flags *) 0 ;
  cs::xr_query_flags *arg2 = 0 ;
  SwigValueWrapper< cs::xr_query_flags > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::xr_query_flags **)&jarg1; 
  arg2 = *(cs::xr_query_flags **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::xr_query_flags const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::xr_query_flags const *)arg1)->and_((cs::xr_query_flags const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_query_flags **)&jresult = new cs::xr_query_flags((const cs::xr_query_flags &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1query_1flags_1not_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::xr_query_flags *arg1 = (cs::xr_query_flags *) 0 ;
  SwigValueWrapper< cs::xr_query_flags > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_query_flags **)&jarg1; 
  {
    try {
      result = ((cs::xr_query_flags const *)arg1)->not_();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_query_flags **)&jresult = new cs::xr_query_flags((const cs::xr_query_flags &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1query_1flags_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_query_flags *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_query_flags *)&cs::xr_query_flags::NONE;
  *(cs::xr_query_flags **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1query_1flags_1UNIQUIFY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_query_flags *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_query_flags *)&cs::xr_query_flags::UNIQUIFY;
  *(cs::xr_query_flags **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1query_1flags_1POPULATE_1COUNTERS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_query_flags *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cs::xr_query_flags *)&cs::xr_query_flags::POPULATE_COUNTERS;
  *(cs::xr_query_flags **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1xr_1query_1flags(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::xr_query_flags *arg1 = (cs::xr_query_flags *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::xr_query_flags **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_sfile_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::sfile *arg1 = (cs::sfile *) 0 ;
  cs::sfile *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::sfile **)&jarg1; 
  arg2 = *(cs::sfile **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::sfile const & reference is null");
    return 0;
  } 
  result = (int)((cs::sfile const *)arg1)->cmp((cs::sfile const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_sfile_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::sfile *arg1 = (cs::sfile *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfile **)&jarg1; 
  result = (int)((cs::sfile const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_sfile_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::sfile *arg1 = (cs::sfile *) 0 ;
  cs::sfile *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::sfile **)&jarg1; 
  arg2 = *(cs::sfile **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::sfile const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->operator ==((cs::sfile const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_grammatech_cs_csJNI_sfile_1hash64(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  cs::sfile *arg1 = (cs::sfile *) 0 ;
  csuint64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfile **)&jarg1; 
  {
    try {
      result = (csuint64)((cs::sfile const *)arg1)->hash64();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1arbitrary_1instance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::sfile *arg1 = (cs::sfile *) 0 ;
  SwigValueWrapper< cs::sfileinst > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfile **)&jarg1; 
  {
    try {
      result = ((cs::sfile const *)arg1)->arbitrary_instance();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::sfileinst **)&jresult = new cs::sfileinst((const cs::sfileinst &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1instances(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::sfile *arg1 = (cs::sfile *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::sfile_instance_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfile **)&jarg1; 
  {
    try {
      result = ((cs::sfile const *)arg1)->instances();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::sfile_instance_iterator **)&jresult = new cs::sfile_instance_iterator((const cs::sfile_instance_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1procedures_1on_1line_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  cs::sfile *arg1 = (cs::sfile *) 0 ;
  cs::line_number arg2 ;
  bool arg3 ;
  std::vector< cs::procedure > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfile **)&jarg1; 
  arg2 = (cs::line_number)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = ((cs::sfile const *)arg1)->procedures_on_line(arg2,arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::procedure > **)&jresult = new std::vector< cs::procedure >((const std::vector< cs::procedure > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1procedures_1on_1line_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  cs::sfile *arg1 = (cs::sfile *) 0 ;
  cs::line_number arg2 ;
  std::vector< cs::procedure > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfile **)&jarg1; 
  arg2 = (cs::line_number)jarg2; 
  {
    try {
      result = ((cs::sfile const *)arg1)->procedures_on_line(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::procedure > **)&jresult = new std::vector< cs::procedure >((const std::vector< cs::procedure > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1token_1definition_1iterator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  cs::sfile *arg1 = (cs::sfile *) 0 ;
  cs::line_number arg2 ;
  csuint64 arg3 ;
  SwigValueWrapper< cs::xr_def_iter_flags > arg4 ;
  cs::xr_def_iter_flags *argp4 ;
  SwigValueWrapper< cs::iterator_adapter< cs::xr_definition_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(cs::sfile **)&jarg1; 
  arg2 = (cs::line_number)jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    for(i=0; i<sz; i++) {
      arg3 = (arg3 << 8) | (csuint64)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  argp4 = *(cs::xr_def_iter_flags **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::xr_def_iter_flags");
    return 0;
  }
  arg4 = *argp4; 
  {
    try {
      result = ((cs::sfile const *)arg1)->token_definition_iterator(arg2,arg3,arg4);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_definition_iterator **)&jresult = new cs::xr_definition_iterator((const cs::xr_definition_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1token_1definition_1iterator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg3) {
  jlong jresult = 0 ;
  cs::sfile *arg1 = (cs::sfile *) 0 ;
  cs::line_number arg2 ;
  csuint64 arg3 ;
  SwigValueWrapper< cs::iterator_adapter< cs::xr_definition_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfile **)&jarg1; 
  arg2 = (cs::line_number)jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    for(i=0; i<sz; i++) {
      arg3 = (arg3 << 8) | (csuint64)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    try {
      result = ((cs::sfile const *)arg1)->token_definition_iterator(arg2,arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_definition_iterator **)&jresult = new cs::xr_definition_iterator((const cs::xr_definition_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1token_1definition_1iterator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  cs::sfile *arg1 = (cs::sfile *) 0 ;
  cs::line_number arg2 ;
  std::string *arg3 = 0 ;
  SwigValueWrapper< cs::xr_def_iter_flags > arg4 ;
  cs::xr_def_iter_flags *argp4 ;
  SwigValueWrapper< cs::iterator_adapter< cs::xr_definition_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(cs::sfile **)&jarg1; 
  arg2 = (cs::line_number)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  argp4 = *(cs::xr_def_iter_flags **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::xr_def_iter_flags");
    return 0;
  }
  arg4 = *argp4; 
  {
    try {
      result = ((cs::sfile const *)arg1)->token_definition_iterator(arg2,(std::string const &)*arg3,arg4);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_definition_iterator **)&jresult = new cs::xr_definition_iterator((const cs::xr_definition_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1token_1definition_1iterator_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  cs::sfile *arg1 = (cs::sfile *) 0 ;
  cs::line_number arg2 ;
  std::string *arg3 = 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::xr_definition_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfile **)&jarg1; 
  arg2 = (cs::line_number)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((cs::sfile const *)arg1)->token_definition_iterator(arg2,(std::string const &)*arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_definition_iterator **)&jresult = new cs::xr_definition_iterator((const cs::xr_definition_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1token_1occurrence_1iterator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  cs::sfile *arg1 = (cs::sfile *) 0 ;
  cs::line_number arg2 ;
  csuint64 arg3 ;
  SwigValueWrapper< cs::xr_kind_role > arg4 ;
  size_t arg5 ;
  SwigValueWrapper< cs::xr_occ_iter_flags > arg6 ;
  cs::xr_kind_role *argp4 ;
  cs::xr_occ_iter_flags *argp6 ;
  SwigValueWrapper< cs::iterator_adapter< cs::xr_occurrence_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg6_;
  arg1 = *(cs::sfile **)&jarg1; 
  arg2 = (cs::line_number)jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    for(i=0; i<sz; i++) {
      arg3 = (arg3 << 8) | (csuint64)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  argp4 = *(cs::xr_kind_role **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::xr_kind_role");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (size_t)jarg5; 
  argp6 = *(cs::xr_occ_iter_flags **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::xr_occ_iter_flags");
    return 0;
  }
  arg6 = *argp6; 
  {
    try {
      result = ((cs::sfile const *)arg1)->token_occurrence_iterator(arg2,arg3,arg4,arg5,arg6);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_occurrence_iterator **)&jresult = new cs::xr_occurrence_iterator((const cs::xr_occurrence_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1token_1occurrence_1iterator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jlong jresult = 0 ;
  cs::sfile *arg1 = (cs::sfile *) 0 ;
  cs::line_number arg2 ;
  csuint64 arg3 ;
  SwigValueWrapper< cs::xr_kind_role > arg4 ;
  size_t arg5 ;
  cs::xr_kind_role *argp4 ;
  SwigValueWrapper< cs::iterator_adapter< cs::xr_occurrence_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(cs::sfile **)&jarg1; 
  arg2 = (cs::line_number)jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    for(i=0; i<sz; i++) {
      arg3 = (arg3 << 8) | (csuint64)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  argp4 = *(cs::xr_kind_role **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::xr_kind_role");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (size_t)jarg5; 
  {
    try {
      result = ((cs::sfile const *)arg1)->token_occurrence_iterator(arg2,arg3,arg4,arg5);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_occurrence_iterator **)&jresult = new cs::xr_occurrence_iterator((const cs::xr_occurrence_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1token_1occurrence_1iterator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  cs::sfile *arg1 = (cs::sfile *) 0 ;
  cs::line_number arg2 ;
  csuint64 arg3 ;
  SwigValueWrapper< cs::xr_kind_role > arg4 ;
  cs::xr_kind_role *argp4 ;
  SwigValueWrapper< cs::iterator_adapter< cs::xr_occurrence_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(cs::sfile **)&jarg1; 
  arg2 = (cs::line_number)jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    for(i=0; i<sz; i++) {
      arg3 = (arg3 << 8) | (csuint64)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  argp4 = *(cs::xr_kind_role **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::xr_kind_role");
    return 0;
  }
  arg4 = *argp4; 
  {
    try {
      result = ((cs::sfile const *)arg1)->token_occurrence_iterator(arg2,arg3,arg4);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_occurrence_iterator **)&jresult = new cs::xr_occurrence_iterator((const cs::xr_occurrence_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1token_1occurrence_1iterator_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  cs::sfile *arg1 = (cs::sfile *) 0 ;
  cs::line_number arg2 ;
  std::string *arg3 = 0 ;
  SwigValueWrapper< cs::xr_kind_role > arg4 ;
  size_t arg5 ;
  SwigValueWrapper< cs::xr_occ_iter_flags > arg6 ;
  cs::xr_kind_role *argp4 ;
  cs::xr_occ_iter_flags *argp6 ;
  SwigValueWrapper< cs::iterator_adapter< cs::xr_occurrence_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg6_;
  arg1 = *(cs::sfile **)&jarg1; 
  arg2 = (cs::line_number)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  argp4 = *(cs::xr_kind_role **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::xr_kind_role");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (size_t)jarg5; 
  argp6 = *(cs::xr_occ_iter_flags **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::xr_occ_iter_flags");
    return 0;
  }
  arg6 = *argp6; 
  {
    try {
      result = ((cs::sfile const *)arg1)->token_occurrence_iterator(arg2,(std::string const &)*arg3,arg4,arg5,arg6);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_occurrence_iterator **)&jresult = new cs::xr_occurrence_iterator((const cs::xr_occurrence_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1token_1occurrence_1iterator_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jlong jresult = 0 ;
  cs::sfile *arg1 = (cs::sfile *) 0 ;
  cs::line_number arg2 ;
  std::string *arg3 = 0 ;
  SwigValueWrapper< cs::xr_kind_role > arg4 ;
  size_t arg5 ;
  cs::xr_kind_role *argp4 ;
  SwigValueWrapper< cs::iterator_adapter< cs::xr_occurrence_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(cs::sfile **)&jarg1; 
  arg2 = (cs::line_number)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  argp4 = *(cs::xr_kind_role **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::xr_kind_role");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (size_t)jarg5; 
  {
    try {
      result = ((cs::sfile const *)arg1)->token_occurrence_iterator(arg2,(std::string const &)*arg3,arg4,arg5);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_occurrence_iterator **)&jresult = new cs::xr_occurrence_iterator((const cs::xr_occurrence_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1token_1occurrence_1iterator_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  cs::sfile *arg1 = (cs::sfile *) 0 ;
  cs::line_number arg2 ;
  std::string *arg3 = 0 ;
  SwigValueWrapper< cs::xr_kind_role > arg4 ;
  cs::xr_kind_role *argp4 ;
  SwigValueWrapper< cs::iterator_adapter< cs::xr_occurrence_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(cs::sfile **)&jarg1; 
  arg2 = (cs::line_number)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  argp4 = *(cs::xr_kind_role **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::xr_kind_role");
    return 0;
  }
  arg4 = *argp4; 
  {
    try {
      result = ((cs::sfile const *)arg1)->token_occurrence_iterator(arg2,(std::string const &)*arg3,arg4);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_occurrence_iterator **)&jresult = new cs::xr_occurrence_iterator((const cs::xr_occurrence_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1token_1occurrence_1iterator_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  cs::sfile *arg1 = (cs::sfile *) 0 ;
  cs::line_number arg2 ;
  csuint64 arg3 ;
  size_t arg4 ;
  SwigValueWrapper< cs::xr_occ_iter_flags > arg5 ;
  cs::xr_occ_iter_flags *argp5 ;
  SwigValueWrapper< cs::iterator_adapter< cs::xr_occurrence_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(cs::sfile **)&jarg1; 
  arg2 = (cs::line_number)jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    for(i=0; i<sz; i++) {
      arg3 = (arg3 << 8) | (csuint64)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg4 = (size_t)jarg4; 
  argp5 = *(cs::xr_occ_iter_flags **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::xr_occ_iter_flags");
    return 0;
  }
  arg5 = *argp5; 
  {
    try {
      result = ((cs::sfile const *)arg1)->token_occurrence_iterator(arg2,arg3,arg4,arg5);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_occurrence_iterator **)&jresult = new cs::xr_occurrence_iterator((const cs::xr_occurrence_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1token_1occurrence_1iterator_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  cs::sfile *arg1 = (cs::sfile *) 0 ;
  cs::line_number arg2 ;
  csuint64 arg3 ;
  size_t arg4 ;
  SwigValueWrapper< cs::iterator_adapter< cs::xr_occurrence_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfile **)&jarg1; 
  arg2 = (cs::line_number)jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    for(i=0; i<sz; i++) {
      arg3 = (arg3 << 8) | (csuint64)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg4 = (size_t)jarg4; 
  {
    try {
      result = ((cs::sfile const *)arg1)->token_occurrence_iterator(arg2,arg3,arg4);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_occurrence_iterator **)&jresult = new cs::xr_occurrence_iterator((const cs::xr_occurrence_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1token_1occurrence_1iterator_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg3) {
  jlong jresult = 0 ;
  cs::sfile *arg1 = (cs::sfile *) 0 ;
  cs::line_number arg2 ;
  csuint64 arg3 ;
  SwigValueWrapper< cs::iterator_adapter< cs::xr_occurrence_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfile **)&jarg1; 
  arg2 = (cs::line_number)jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    for(i=0; i<sz; i++) {
      arg3 = (arg3 << 8) | (csuint64)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    try {
      result = ((cs::sfile const *)arg1)->token_occurrence_iterator(arg2,arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_occurrence_iterator **)&jresult = new cs::xr_occurrence_iterator((const cs::xr_occurrence_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1token_1occurrence_1iterator_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  cs::sfile *arg1 = (cs::sfile *) 0 ;
  cs::line_number arg2 ;
  std::string *arg3 = 0 ;
  size_t arg4 ;
  SwigValueWrapper< cs::xr_occ_iter_flags > arg5 ;
  cs::xr_occ_iter_flags *argp5 ;
  SwigValueWrapper< cs::iterator_adapter< cs::xr_occurrence_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(cs::sfile **)&jarg1; 
  arg2 = (cs::line_number)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (size_t)jarg4; 
  argp5 = *(cs::xr_occ_iter_flags **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::xr_occ_iter_flags");
    return 0;
  }
  arg5 = *argp5; 
  {
    try {
      result = ((cs::sfile const *)arg1)->token_occurrence_iterator(arg2,(std::string const &)*arg3,arg4,arg5);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_occurrence_iterator **)&jresult = new cs::xr_occurrence_iterator((const cs::xr_occurrence_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1token_1occurrence_1iterator_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  cs::sfile *arg1 = (cs::sfile *) 0 ;
  cs::line_number arg2 ;
  std::string *arg3 = 0 ;
  size_t arg4 ;
  SwigValueWrapper< cs::iterator_adapter< cs::xr_occurrence_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfile **)&jarg1; 
  arg2 = (cs::line_number)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (size_t)jarg4; 
  {
    try {
      result = ((cs::sfile const *)arg1)->token_occurrence_iterator(arg2,(std::string const &)*arg3,arg4);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_occurrence_iterator **)&jresult = new cs::xr_occurrence_iterator((const cs::xr_occurrence_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1token_1occurrence_1iterator_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  cs::sfile *arg1 = (cs::sfile *) 0 ;
  cs::line_number arg2 ;
  std::string *arg3 = 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::xr_occurrence_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfile **)&jarg1; 
  arg2 = (cs::line_number)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((cs::sfile const *)arg1)->token_occurrence_iterator(arg2,(std::string const &)*arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_occurrence_iterator **)&jresult = new cs::xr_occurrence_iterator((const cs::xr_occurrence_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1range_1definition_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  cs::sfile *arg1 = (cs::sfile *) 0 ;
  cs::line_number arg2 ;
  cs::line_number arg3 ;
  SwigValueWrapper< cs::iterator_adapter< cs::xr_intra_definition_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfile **)&jarg1; 
  arg2 = (cs::line_number)jarg2; 
  arg3 = (cs::line_number)jarg3; 
  {
    try {
      result = ((cs::sfile const *)arg1)->range_definition_iterator(arg2,arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_intra_definition_iterator **)&jresult = new cs::xr_intra_definition_iterator((const cs::xr_intra_definition_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1parent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::sfile *arg1 = (cs::sfile *) 0 ;
  SwigValueWrapper< cs::directory > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfile **)&jarg1; 
  {
    try {
      result = ((cs::sfile const *)arg1)->parent();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::directory **)&jresult = new cs::directory((const cs::directory &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_sfile_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::sfile *arg1 = (cs::sfile *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfile **)&jarg1; 
  {
    try {
      result = ((cs::sfile const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_sfile_1normalized_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::sfile *arg1 = (cs::sfile *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfile **)&jarg1; 
  {
    try {
      result = ((cs::sfile const *)arg1)->normalized_name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_sfile_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::sfile *arg1 = (cs::sfile *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfile **)&jarg1; 
  {
    try {
      result = ((cs::sfile const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_sfile_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::sfile *arg1 = (cs::sfile *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::sfile **)&jarg1; 
  result = ((cs::sfile const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1sfile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::sfile *arg1 = (cs::sfile *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::sfile **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_directory_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::directory *arg1 = (cs::directory *) 0 ;
  cs::directory *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::directory **)&jarg1; 
  arg2 = *(cs::directory **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::directory const & reference is null");
    return 0;
  } 
  result = (int)((cs::directory const *)arg1)->cmp((cs::directory const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_directory_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::directory *arg1 = (cs::directory *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::directory **)&jarg1; 
  result = (int)((cs::directory const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_directory_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::directory *arg1 = (cs::directory *) 0 ;
  cs::directory *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::directory **)&jarg1; 
  arg2 = *(cs::directory **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::directory const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->operator ==((cs::directory const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_directory_1children(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::directory *arg1 = (cs::directory *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::directory_children_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::directory **)&jarg1; 
  {
    try {
      result = ((cs::directory const *)arg1)->children();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::directory_children_iterator **)&jresult = new cs::directory_children_iterator((const cs::directory_children_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_directory_1files(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::directory *arg1 = (cs::directory *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::directory_files_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::directory **)&jarg1; 
  {
    try {
      result = ((cs::directory const *)arg1)->files();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::directory_files_iterator **)&jresult = new cs::directory_files_iterator((const cs::directory_files_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_directory_1parent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::directory *arg1 = (cs::directory *) 0 ;
  SwigValueWrapper< cs::directory > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::directory **)&jarg1; 
  {
    try {
      result = ((cs::directory const *)arg1)->parent();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::directory **)&jresult = new cs::directory((const cs::directory &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_directory_1depth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::directory *arg1 = (cs::directory *) 0 ;
  csuint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::directory **)&jarg1; 
  {
    try {
      result = (csuint32)((cs::directory const *)arg1)->depth();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_directory_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::directory *arg1 = (cs::directory *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::directory **)&jarg1; 
  {
    try {
      result = ((cs::directory const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_directory_1normalized_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::directory *arg1 = (cs::directory *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::directory **)&jarg1; 
  {
    try {
      result = ((cs::directory const *)arg1)->normalized_name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_directory_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::directory *arg1 = (cs::directory *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::directory **)&jarg1; 
  {
    try {
      result = ((cs::directory const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_directory_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::directory *arg1 = (cs::directory *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::directory **)&jarg1; 
  result = ((cs::directory const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1directory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::directory *arg1 = (cs::directory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::directory **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1int_1pairs_1to_1points_1map(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::compunit > arg1 ;
  cs::compunit *argp1 ;
  cs::int_pairs_to_points_map *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(cs::compunit **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::compunit");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (cs::int_pairs_to_points_map *)new cs::int_pairs_to_points_map(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::int_pairs_to_points_map **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1int_1pairs_1to_1points_1map(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::int_pairs_to_points_map *arg1 = (cs::int_pairs_to_points_map *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::int_pairs_to_points_map **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_int_1pairs_1to_1points_1map_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::int_pairs_to_points_map *arg1 = (cs::int_pairs_to_points_map *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::int_pairs_to_points_map **)&jarg1; 
  result = (int)((cs::int_pairs_to_points_map const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_int_1pairs_1to_1points_1map_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::int_pairs_to_points_map *arg1 = (cs::int_pairs_to_points_map *) 0 ;
  SwigValueWrapper< std::pair< unsigned int,unsigned int > > arg2 ;
  cs::int_pair *argp2 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::int_pairs_to_points_map **)&jarg1; 
  argp2 = *(cs::int_pair **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::int_pair");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((cs::int_pairs_to_points_map const *)arg1)->operator [](arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_int_1pairs_1to_1points_1map_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::int_pairs_to_points_map *arg1 = (cs::int_pairs_to_points_map *) 0 ;
  SwigValueWrapper< std::pair< unsigned int,unsigned int > > arg2 ;
  cs::int_pair *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::int_pairs_to_points_map **)&jarg1; 
  argp2 = *(cs::int_pair **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::int_pair");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((cs::int_pairs_to_points_map const *)arg1)->contains(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_int_1pairs_1to_1points_1map_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::int_pairs_to_points_map *arg1 = (cs::int_pairs_to_points_map *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::int_pairs_to_points_map **)&jarg1; 
  result = ((cs::int_pairs_to_points_map const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_int_1pairs_1to_1points_1map_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::int_pairs_to_points_map *arg1 = (cs::int_pairs_to_points_map *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::int_pairs_to_points_map **)&jarg1; 
  {
    try {
      result = ((cs::int_pairs_to_points_map const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_int_1pairs_1to_1points_1map_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::int_pairs_to_points_map *arg1 = (cs::int_pairs_to_points_map *) 0 ;
  cs::int_pairs_to_points_map *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::int_pairs_to_points_map **)&jarg1; 
  arg2 = *(cs::int_pairs_to_points_map **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::int_pairs_to_points_map const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::int_pairs_to_points_map const *)arg1)->operator ==((cs::int_pairs_to_points_map const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ir_1factory_1make_1symbol_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  cs::ir_factory *arg1 = (cs::ir_factory *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< cs::symbol_kind > arg3 ;
  cs::symbol_kind *argp3 ;
  SwigValueWrapper< cs::symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(cs::ir_factory **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(cs::symbol_kind **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::symbol_kind");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (arg1)->make_symbol((std::string const &)*arg2,arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::symbol **)&jresult = new cs::symbol((const cs::symbol &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ir_1factory_1make_1symbol_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  cs::ir_factory *arg1 = (cs::ir_factory *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< cs::symbol_kind > arg3 ;
  SwigValueWrapper< cs::compunit > arg4 ;
  cs::symbol_kind *argp3 ;
  cs::compunit *argp4 ;
  SwigValueWrapper< cs::symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(cs::ir_factory **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(cs::symbol_kind **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::symbol_kind");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(cs::compunit **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::compunit");
    return 0;
  }
  arg4 = *argp4; 
  {
    try {
      result = (arg1)->make_symbol((std::string const &)*arg2,arg3,arg4);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::symbol **)&jresult = new cs::symbol((const cs::symbol &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ir_1factory_1make_1symbol_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  jlong jresult = 0 ;
  cs::ir_factory *arg1 = (cs::ir_factory *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< cs::symbol_kind > arg3 ;
  SwigValueWrapper< cs::procedure > arg4 ;
  bool arg5 ;
  cs::symbol_kind *argp3 ;
  cs::procedure *argp4 ;
  SwigValueWrapper< cs::symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(cs::ir_factory **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(cs::symbol_kind **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::symbol_kind");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(cs::procedure **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::procedure");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      result = (arg1)->make_symbol((std::string const &)*arg2,arg3,arg4,arg5);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::symbol **)&jresult = new cs::symbol((const cs::symbol &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ir_1factory_1make_1symbol_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  cs::ir_factory *arg1 = (cs::ir_factory *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< cs::symbol_kind > arg3 ;
  SwigValueWrapper< cs::procedure > arg4 ;
  cs::symbol_kind *argp3 ;
  cs::procedure *argp4 ;
  SwigValueWrapper< cs::symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(cs::ir_factory **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(cs::symbol_kind **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::symbol_kind");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(cs::procedure **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::procedure");
    return 0;
  }
  arg4 = *argp4; 
  {
    try {
      result = (arg1)->make_symbol((std::string const &)*arg2,arg3,arg4);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::symbol **)&jresult = new cs::symbol((const cs::symbol &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ir_1factory_1make_1edge_1label(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cs::ir_factory *arg1 = (cs::ir_factory *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< cs::edge_label > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ir_factory **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->make_edge_label((std::string const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::edge_label **)&jresult = new cs::edge_label((const cs::edge_label &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ir_1factory_1make_1ast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  cs::ir_factory *arg1 = (cs::ir_factory *) 0 ;
  SwigValueWrapper< cs::ast_class > arg2 ;
  std::vector< cs::ast_field > *arg3 = 0 ;
  cs::ast_class *argp2 ;
  SwigValueWrapper< cs::ast > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cs::ir_factory **)&jarg1; 
  argp2 = *(cs::ast_class **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast_class");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(std::vector< cs::ast_field > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::ast_field > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->make_ast(arg2,(std::vector< cs::ast_field > const &)*arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast **)&jresult = new cs::ast((const cs::ast &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ir_1factory_1make_1compunit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  cs::ir_factory *arg1 = (cs::ir_factory *) 0 ;
  std::string *arg2 = 0 ;
  cs_language arg3 ;
  SwigValueWrapper< cs::compunit > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ir_factory **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (cs_language)jarg3; 
  {
    try {
      result = (arg1)->make_compunit((std::string const &)*arg2,arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::compunit **)&jresult = new cs::compunit((const cs::compunit &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_ir_1factory_1ast_1append_1buf_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  cs::ir_factory *arg1 = (cs::ir_factory *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< cs::ast > arg3 ;
  cs::ast *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(cs::ir_factory **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(cs::ast **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::ast");
    return ;
  }
  arg3 = *argp3; 
  {
    try {
      (arg1)->ast_append_buf_append((std::string const &)*arg2,arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ir_1factory_1ast_1append_1buf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  cs::ir_factory *arg1 = (cs::ir_factory *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  SwigValueWrapper< cs::ast > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ir_factory **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (arg1)->ast_append_buf_get((std::string const &)*arg2,arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ast **)&jresult = new cs::ast((const cs::ast &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_ir_1factory_1ast_1append_1buf_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cs::ir_factory *arg1 = (cs::ir_factory *) 0 ;
  std::string *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ir_factory **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->ast_append_buf_length((std::string const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_ir_1factory_1ast_1append_1buf_1delete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cs::ir_factory *arg1 = (cs::ir_factory *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ir_factory **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->ast_append_buf_delete((std::string const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ir_1factory_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ir_factory *arg1 = (cs::ir_factory *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ir_factory **)&jarg1; 
  result = ((cs::ir_factory const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_ir_1factory_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::ir_factory *arg1 = (cs::ir_factory *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::ir_factory **)&jarg1; 
  {
    try {
      result = ((cs::ir_factory const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1ir_1factory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::ir_factory *arg1 = (cs::ir_factory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::ir_factory **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1label_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::pdg_edge_label *arg1 = (cs::pdg_edge_label *) 0 ;
  cs::pdg_edge_label *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::pdg_edge_label **)&jarg1; 
  arg2 = *(cs::pdg_edge_label **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::pdg_edge_label const & reference is null");
    return 0;
  } 
  result = (int)((cs::pdg_edge_label const *)arg1)->cmp((cs::pdg_edge_label const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1label_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::pdg_edge_label *arg1 = (cs::pdg_edge_label *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::pdg_edge_label **)&jarg1; 
  result = (int)((cs::pdg_edge_label const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1label_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::pdg_edge_label *arg1 = (cs::pdg_edge_label *) 0 ;
  cs::pdg_edge_label *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::pdg_edge_label **)&jarg1; 
  arg2 = *(cs::pdg_edge_label **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::pdg_edge_label const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->operator ==((cs::pdg_edge_label const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1pdg_1edge_1label(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  cs::pdg_edge_label *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  {
    try {
      result = (cs::pdg_edge_label *)new cs::pdg_edge_label(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::pdg_edge_label **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1label_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::pdg_edge_label *arg1 = (cs::pdg_edge_label *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::pdg_edge_label **)&jarg1; 
  {
    try {
      result = ((cs::pdg_edge_label const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1label_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::pdg_edge_label *arg1 = (cs::pdg_edge_label *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::pdg_edge_label **)&jarg1; 
  {
    try {
      result = ((cs::pdg_edge_label const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1label_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::pdg_edge_label *arg1 = (cs::pdg_edge_label *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::pdg_edge_label **)&jarg1; 
  result = ((cs::pdg_edge_label const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1pdg_1edge_1label(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::pdg_edge_label *arg1 = (cs::pdg_edge_label *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::pdg_edge_label **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jobject JNICALL Java_com_grammatech_cs_csJNI_xr_1tuple_1get_1namehash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  cs::xr_tuple *arg1 = (cs::xr_tuple *) 0 ;
  csuint64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_tuple **)&jarg1; 
  {
    try {
      result = (csuint64)((cs::xr_tuple const *)arg1)->get_namehash();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1tuple_1get_1kind_1role(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::xr_tuple *arg1 = (cs::xr_tuple *) 0 ;
  SwigValueWrapper< cs::xr_kind_role > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_tuple **)&jarg1; 
  {
    try {
      result = ((cs::xr_tuple const *)arg1)->get_kind_role();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_kind_role **)&jresult = new cs::xr_kind_role((const cs::xr_kind_role &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_xr_1tuple_1get_1complete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::xr_tuple *arg1 = (cs::xr_tuple *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_tuple **)&jarg1; 
  {
    try {
      result = (bool)((cs::xr_tuple const *)arg1)->get_complete();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1tuple_1get_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::xr_tuple *arg1 = (cs::xr_tuple *) 0 ;
  SwigValueWrapper< cs::sfile > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_tuple **)&jarg1; 
  {
    try {
      result = ((cs::xr_tuple const *)arg1)->get_file();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::sfile **)&jresult = new cs::sfile((const cs::sfile &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1tuple_1get_1line(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::xr_tuple *arg1 = (cs::xr_tuple *) 0 ;
  cs::line_number result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_tuple **)&jarg1; 
  {
    try {
      result = (cs::line_number)((cs::xr_tuple const *)arg1)->get_line();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1tuple_1get_1def_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::xr_tuple *arg1 = (cs::xr_tuple *) 0 ;
  SwigValueWrapper< cs::sfile > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_tuple **)&jarg1; 
  {
    try {
      result = ((cs::xr_tuple const *)arg1)->get_def_file();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::sfile **)&jresult = new cs::sfile((const cs::sfile &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_xr_1tuple_1get_1def_1line(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::xr_tuple *arg1 = (cs::xr_tuple *) 0 ;
  cs::line_number result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_tuple **)&jarg1; 
  {
    try {
      result = (cs::line_number)((cs::xr_tuple const *)arg1)->get_def_line();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1tuple_1get_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::xr_tuple *arg1 = (cs::xr_tuple *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_tuple **)&jarg1; 
  {
    try {
      result = ((cs::xr_tuple const *)arg1)->get_name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1xr_1tuple(JNIEnv *jenv, jclass jcls, jobject jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6, jobject jarg6_, jlong jarg7) {
  jlong jresult = 0 ;
  csuint64 arg1 ;
  SwigValueWrapper< cs::xr_kind_role > arg2 ;
  bool arg3 ;
  SwigValueWrapper< cs::sfile > arg4 ;
  cs::line_number arg5 ;
  SwigValueWrapper< cs::sfile > arg6 ;
  cs::line_number arg7 ;
  cs::xr_kind_role *argp2 ;
  cs::sfile *argp4 ;
  cs::sfile *argp6 ;
  cs::xr_tuple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg6_;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    for(i=0; i<sz; i++) {
      arg1 = (arg1 << 8) | (csuint64)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  argp2 = *(cs::xr_kind_role **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::xr_kind_role");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  argp4 = *(cs::sfile **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::sfile");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (cs::line_number)jarg5; 
  argp6 = *(cs::sfile **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::sfile");
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (cs::line_number)jarg7; 
  {
    try {
      result = (cs::xr_tuple *)new cs::xr_tuple(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_tuple **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1tuple_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::xr_tuple *arg1 = (cs::xr_tuple *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_tuple **)&jarg1; 
  {
    try {
      result = ((cs::xr_tuple const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1tuple_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::xr_tuple *arg1 = (cs::xr_tuple *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_tuple **)&jarg1; 
  result = ((cs::xr_tuple const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1xr_1tuple(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::xr_tuple *arg1 = (cs::xr_tuple *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::xr_tuple **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1file_1query_1add_1absolute_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cs::xr_file_query *arg1 = (cs::xr_file_query *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_file_query **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->add_absolute_filter((std::string const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1file_1query_1add_1absolute_1substring_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cs::xr_file_query *arg1 = (cs::xr_file_query *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_file_query **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->add_absolute_substring_filter((std::string const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1file_1query_1add_1dirname_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cs::xr_file_query *arg1 = (cs::xr_file_query *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_file_query **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->add_dirname_filter((std::string const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1file_1query_1add_1dirname_1substring_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cs::xr_file_query *arg1 = (cs::xr_file_query *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_file_query **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->add_dirname_substring_filter((std::string const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1file_1query_1add_1basename_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cs::xr_file_query *arg1 = (cs::xr_file_query *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_file_query **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->add_basename_filter((std::string const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1file_1query_1add_1basename_1substring_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cs::xr_file_query *arg1 = (cs::xr_file_query *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_file_query **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->add_basename_substring_filter((std::string const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1file_1query_1add_1file_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cs::xr_file_query *arg1 = (cs::xr_file_query *) 0 ;
  cs::sfile *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::xr_file_query **)&jarg1; 
  arg2 = *(cs::sfile **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::sfile const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->add_file_filter((cs::sfile const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1file_1query_1add_1line_1number_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  cs::xr_file_query *arg1 = (cs::xr_file_query *) 0 ;
  cs::line_number arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_file_query **)&jarg1; 
  arg2 = (cs::line_number)jarg2; 
  {
    try {
      (arg1)->add_line_number_filter(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1file_1query_1set_1reject_1libmodels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  cs::xr_file_query *arg1 = (cs::xr_file_query *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_file_query **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->set_reject_libmodels(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1xr_1file_1query(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_file_query *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (cs::xr_file_query *)new cs::xr_file_query();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_file_query **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1file_1query_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::xr_file_query *arg1 = (cs::xr_file_query *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_file_query **)&jarg1; 
  result = ((cs::xr_file_query const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1file_1query_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::xr_file_query *arg1 = (cs::xr_file_query *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_file_query **)&jarg1; 
  {
    try {
      result = ((cs::xr_file_query const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1xr_1file_1query(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::xr_file_query *arg1 = (cs::xr_file_query *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::xr_file_query **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1query_1add_1kind_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cs::xr_query *arg1 = (cs::xr_query *) 0 ;
  SwigValueWrapper< cs::xr_kind > arg2 ;
  cs::xr_kind *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::xr_query **)&jarg1; 
  argp2 = *(cs::xr_kind **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::xr_kind");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->add_kind_filter(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1query_1add_1role_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cs::xr_query *arg1 = (cs::xr_query *) 0 ;
  SwigValueWrapper< cs::xr_role > arg2 ;
  cs::xr_role *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::xr_query **)&jarg1; 
  argp2 = *(cs::xr_role **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::xr_role");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->add_role_filter(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1query_1add_1kind_1role_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cs::xr_query *arg1 = (cs::xr_query *) 0 ;
  SwigValueWrapper< cs::xr_kind_role > arg2 ;
  cs::xr_kind_role *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::xr_query **)&jarg1; 
  argp2 = *(cs::xr_kind_role **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::xr_kind_role");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->add_kind_role_filter(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1query_1add_1term_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cs::xr_query *arg1 = (cs::xr_query *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_query **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->add_term_filter((std::string const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1query_1set_1occurrence_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cs::xr_query *arg1 = (cs::xr_query *) 0 ;
  cs::xr_file_query *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::xr_query **)&jarg1; 
  arg2 = *(cs::xr_file_query **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::xr_file_query const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set_occurrence_filter((cs::xr_file_query const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1query_1set_1definition_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cs::xr_query *arg1 = (cs::xr_query *) 0 ;
  cs::xr_file_query *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::xr_query **)&jarg1; 
  arg2 = *(cs::xr_file_query **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::xr_file_query const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set_definition_filter((cs::xr_file_query const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1query_1set_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  cs::xr_query *arg1 = (cs::xr_query *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_query **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->set_offset(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1query_1set_1limit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  cs::xr_query *arg1 = (cs::xr_query *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_query **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->set_limit(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_xr_1query_1set_1flags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cs::xr_query *arg1 = (cs::xr_query *) 0 ;
  SwigValueWrapper< cs::xr_query_flags > arg2 ;
  cs::xr_query_flags *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::xr_query **)&jarg1; 
  argp2 = *(cs::xr_query_flags **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::xr_query_flags");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->set_flags(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1xr_1query(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::xr_query *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (cs::xr_query *)new cs::xr_query();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_query **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1query_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::xr_query *arg1 = (cs::xr_query *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_query **)&jarg1; 
  result = ((cs::xr_query const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_xr_1query_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::xr_query *arg1 = (cs::xr_query *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::xr_query **)&jarg1; 
  {
    try {
      result = ((cs::xr_query const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1xr_1query(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::xr_query *arg1 = (cs::xr_query *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::xr_query **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1value_1set(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jobject jarg4) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  csint64 arg2 ;
  csint64 arg3 ;
  csuint64 arg4 ;
  cs::value_set *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (csint64)jarg2; 
  arg3 = (csint64)jarg3; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    for(i=0; i<sz; i++) {
      arg4 = (arg4 << 8) | (csuint64)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    try {
      result = (cs::value_set *)new cs::value_set((std::string const &)*arg1,arg2,arg3,arg4);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::value_set **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_value_1set_1mem_1region(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::value_set *arg1 = (cs::value_set *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::value_set **)&jarg1; 
  {
    try {
      result = ((cs::value_set const *)arg1)->mem_region();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_value_1set_1lower(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::value_set *arg1 = (cs::value_set *) 0 ;
  csint64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::value_set **)&jarg1; 
  {
    try {
      result = (csint64)((cs::value_set const *)arg1)->lower();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_value_1set_1upper(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::value_set *arg1 = (cs::value_set *) 0 ;
  csint64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::value_set **)&jarg1; 
  {
    try {
      result = (csint64)((cs::value_set const *)arg1)->upper();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_grammatech_cs_csJNI_value_1set_1stride(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  cs::value_set *arg1 = (cs::value_set *) 0 ;
  csuint64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::value_set **)&jarg1; 
  {
    try {
      result = (csuint64)((cs::value_set const *)arg1)->stride();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_value_1set_1is_1bottom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::value_set *arg1 = (cs::value_set *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::value_set **)&jarg1; 
  {
    try {
      result = (bool)((cs::value_set const *)arg1)->is_bottom();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_value_1set_1is_1top(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::value_set *arg1 = (cs::value_set *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::value_set **)&jarg1; 
  {
    try {
      result = (bool)((cs::value_set const *)arg1)->is_top();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_value_1set_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::value_set *arg1 = (cs::value_set *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::value_set **)&jarg1; 
  {
    try {
      result = ((cs::value_set const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_value_1set_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::value_set *arg1 = (cs::value_set *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::value_set **)&jarg1; 
  result = ((cs::value_set const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::value_set *arg1 = (cs::value_set *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::value_set **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1amc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::amc *arg1 = 0 ;
  cs::amc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::amc **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::amc const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cs::amc *)new cs::amc((cs::amc const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::amc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1amc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::amc *arg1 = (cs::amc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::amc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_amc_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::amc *arg1 = (cs::amc *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::amc **)&jarg1; 
  result = (int)((cs::amc const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_amc_1is_1bottom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::amc *arg1 = (cs::amc *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::amc **)&jarg1; 
  {
    try {
      result = (bool)((cs::amc const *)arg1)->is_bottom();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_amc_1valuations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::amc *arg1 = (cs::amc *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::amc_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::amc **)&jarg1; 
  {
    try {
      result = ((cs::amc const *)arg1)->valuations();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::amc_iterator **)&jresult = new cs::amc_iterator((const cs::amc_iterator &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_amc_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::amc *arg1 = (cs::amc *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::amc **)&jarg1; 
  {
    try {
      result = ((cs::amc const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_amc_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::amc *arg1 = (cs::amc *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::amc **)&jarg1; 
  result = ((cs::amc const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_calling_1context_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::calling_context *arg1 = (cs::calling_context *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::calling_context **)&jarg1; 
  {
    try {
      result = ((cs::calling_context const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_calling_1context_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::calling_context *arg1 = (cs::calling_context *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::calling_context **)&jarg1; 
  result = ((cs::calling_context const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1calling_1context(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::calling_context *arg1 = (cs::calling_context *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::calling_context **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1amc_1analysis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::amc_analysis *arg1 = 0 ;
  cs::amc_analysis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::amc_analysis **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::amc_analysis const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cs::amc_analysis *)new cs::amc_analysis((cs::amc_analysis const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::amc_analysis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1amc_1analysis(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::amc_analysis *arg1 = (cs::amc_analysis *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::amc_analysis **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_amc_1analysis_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::amc_analysis *arg1 = (cs::amc_analysis *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::amc_analysis **)&jarg1; 
  result = (int)((cs::amc_analysis const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_amc_1analysis_1max_1calling_1context_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::amc_analysis *arg1 = (cs::amc_analysis *) 0 ;
  cs::compunit *arg2 = 0 ;
  csuint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::amc_analysis **)&jarg1; 
  arg2 = *(cs::compunit **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::compunit const & reference is null");
    return 0;
  } 
  {
    try {
      result = (csuint32)((cs::amc_analysis const *)arg1)->max_calling_context_size((cs::compunit const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_amc_1analysis_1read_1only_1amc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::amc_analysis *arg1 = (cs::amc_analysis *) 0 ;
  SwigValueWrapper< cs::amc > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::amc_analysis **)&jarg1; 
  {
    try {
      result = ((cs::amc_analysis const *)arg1)->read_only_amc();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::amc **)&jresult = new cs::amc((const cs::amc &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_amc_1analysis_1merged_1amc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::amc_analysis *arg1 = (cs::amc_analysis *) 0 ;
  cs::point *arg2 = 0 ;
  SwigValueWrapper< cs::amc > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::amc_analysis **)&jarg1; 
  arg2 = *(cs::point **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::point const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::amc_analysis const *)arg1)->merged_amc((cs::point const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::amc **)&jresult = new cs::amc((const cs::amc &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_amc_1analysis_1get_1contexts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::amc_analysis *arg1 = (cs::amc_analysis *) 0 ;
  cs::point *arg2 = 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::amc_context_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::amc_analysis **)&jarg1; 
  arg2 = *(cs::point **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::point const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::amc_analysis const *)arg1)->get_contexts((cs::point const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::amc_context_iterator **)&jresult = new cs::amc_context_iterator((const cs::amc_context_iterator &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_amc_1analysis_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::amc_analysis *arg1 = (cs::amc_analysis *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::amc_analysis **)&jarg1; 
  {
    try {
      result = ((cs::amc_analysis const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_amc_1analysis_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::amc_analysis *arg1 = (cs::amc_analysis *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::amc_analysis **)&jarg1; 
  result = ((cs::amc_analysis const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_project_1load(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  std::string *arg1 = 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      cs::project::load((std::string const &)*arg1,arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_project_1unload(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  {
    try {
      cs::project::unload();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1current(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::project > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = cs::project::current();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::project **)&jresult = new cs::project((const cs::project &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1symbols(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::symbol_universe_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  {
    try {
      result = ((cs::project const *)arg1)->symbols();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::symbol_universe_iterator **)&jresult = new cs::symbol_universe_iterator((const cs::symbol_universe_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1param_1symbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< cs::symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((cs::project const *)arg1)->param_symbol(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::symbol **)&jresult = new cs::symbol((const cs::symbol &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1lookup_1symbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< cs::symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = ((cs::project const *)arg1)->lookup_symbol((std::string const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::symbol **)&jresult = new cs::symbol((const cs::symbol &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1interest_1sets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  std::vector< cs::interest_set > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  {
    try {
      result = ((cs::project const *)arg1)->interest_sets();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::interest_set > **)&jresult = new std::vector< cs::interest_set >((const std::vector< cs::interest_set > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_project_1set_1interest_1sets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cs::project *arg1 = (cs::project *) 0 ;
  std::vector< cs::interest_set > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::project **)&jarg1; 
  arg2 = *(std::vector< cs::interest_set > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::interest_set > const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set_interest_sets((std::vector< cs::interest_set > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1interest_1set_1names(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  {
    try {
      result = ((cs::project const *)arg1)->interest_set_names();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1get_1interest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  std::string *arg2 = 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = ((cs::project const *)arg1)->get_interest_set((std::string const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_project_1set_1interest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  cs::project *arg1 = (cs::project *) 0 ;
  std::string *arg2 = 0 ;
  cs::point_set *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(cs::project **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(cs::point_set **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::point_set const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set_interest_set((std::string const &)*arg2,(cs::point_set const &)*arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1erase_1interest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  std::string *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->erase_interest_set((std::string const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1find_1procedure_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< cs::procedure > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = ((cs::project const *)arg1)->find_procedure((std::string const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::procedure **)&jresult = new cs::procedure((const cs::procedure &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1find_1procedure_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  csint64 arg2 ;
  SwigValueWrapper< cs::procedure > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  arg2 = (csint64)jarg2; 
  {
    try {
      result = ((cs::project const *)arg1)->find_procedure(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::procedure **)&jresult = new cs::procedure((const cs::procedure &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1procedures(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::project_procedures_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  {
    try {
      result = ((cs::project const *)arg1)->procedures();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::project_procedures_iterator **)&jresult = new cs::project_procedures_iterator((const cs::project_procedures_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1procedures_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  std::vector< cs::procedure > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  {
    try {
      result = ((cs::project const *)arg1)->procedures_vector();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::procedure > **)&jresult = new std::vector< cs::procedure >((const std::vector< cs::procedure > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1sccs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  std::vector< std::vector< cs::procedure > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  {
    try {
      result = ((cs::project const *)arg1)->sccs();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< std::vector< cs::procedure > > **)&jresult = new std::vector< std::vector< cs::procedure > >((const std::vector< std::vector< cs::procedure > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1compunits_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  std::vector< cs::compunit > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  {
    try {
      result = ((cs::project const *)arg1)->compunits_vector();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::compunit > **)&jresult = new std::vector< cs::compunit >((const std::vector< cs::compunit > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1compunits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::project_compunits_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  {
    try {
      result = ((cs::project const *)arg1)->compunits();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::project_compunits_iterator **)&jresult = new cs::project_compunits_iterator((const cs::project_compunits_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1sfiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::project_sfiles_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  {
    try {
      result = ((cs::project const *)arg1)->sfiles();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::project_sfiles_iterator **)&jresult = new cs::project_sfiles_iterator((const cs::project_sfiles_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1ignored_1compunits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  std::vector< cs::compunit > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  {
    try {
      result = ((cs::project const *)arg1)->ignored_compunits();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::compunit > **)&jresult = new std::vector< cs::compunit >((const std::vector< cs::compunit > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1root_1directories(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::project_root_directories_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  {
    try {
      result = ((cs::project const *)arg1)->root_directories();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::project_root_directories_iterator **)&jresult = new cs::project_root_directories_iterator((const cs::project_root_directories_iterator &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_project_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  {
    try {
      result = ((cs::project const *)arg1)->name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1error_1count_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  bool arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = ((cs::project const *)arg1)->error_count(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1error_1count_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  {
    try {
      result = ((cs::project const *)arg1)->error_count();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1warning_1count_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  bool arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = ((cs::project const *)arg1)->warning_count(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1warning_1count_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  {
    try {
      result = ((cs::project const *)arg1)->warning_count();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_project_1is_1loaded(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (bool)cs::project::is_loaded();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_project_1is_1read_1only(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  {
    try {
      result = (bool)((cs::project const *)arg1)->is_read_only();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_project_1file_1is_1newer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (bool)((cs::project const *)arg1)->file_is_newer((std::string const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_project_1has_1unnormalized_1c_1asts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  {
    try {
      result = (bool)((cs::project const *)arg1)->has_unnormalized_c_asts();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_project_1incremental_1capable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  {
    try {
      result = (bool)((cs::project const *)arg1)->incremental_capable();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1token_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  cs::xr_query *arg2 = 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::xr_query_iterator_policy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::project **)&jarg1; 
  arg2 = *(cs::xr_query **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::xr_query const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::project const *)arg1)->token_search((cs::xr_query const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::xr_query_iterator **)&jresult = new cs::xr_query_iterator((const cs::xr_query_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1get_1ir_1factory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  SwigValueWrapper< cs::ir_factory > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  {
    try {
      result = ((cs::project const *)arg1)->get_ir_factory();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::ir_factory **)&jresult = new cs::ir_factory((const cs::ir_factory &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_project_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  {
    try {
      result = ((cs::project const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_project_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  result = ((cs::project const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1get_1vsa_1results(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  SwigValueWrapper< cs::amc_analysis > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  {
    try {
      result = (arg1)->get_vsa_results();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::amc_analysis **)&jresult = new cs::amc_analysis((const cs::amc_analysis &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1run_1multiinterval_1analysis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  cs::procedure_name_to_model_vector *arg2 = 0 ;
  SwigValueWrapper< cs::amc_analysis > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::project **)&jarg1; 
  arg2 = *(cs::procedure_name_to_model_vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::procedure_name_to_model_vector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->run_multiinterval_analysis((cs::procedure_name_to_model_vector const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::amc_analysis **)&jresult = new cs::amc_analysis((const cs::amc_analysis &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1find_1symbols_1by_1address(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jlong jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  cs_ea arg2 ;
  cs::symbol_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (cs_ea)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    try {
      result = ((cs::project const *)arg1)->find_symbols_by_address(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::symbol_set **)&jresult = new cs::symbol_set((const cs::symbol_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1find_1containing_1symbols_1by_1address(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jlong jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  cs_ea arg2 ;
  cs::symbol_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (cs_ea)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    try {
      result = ((cs::project const *)arg1)->find_containing_symbols_by_address(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::symbol_set **)&jresult = new cs::symbol_set((const cs::symbol_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1find_1points_1by_1address(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jlong jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  cs_ea arg2 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (cs_ea)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    try {
      result = ((cs::project const *)arg1)->find_points_by_address(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1find_1procedure_1by_1address(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jlong jresult = 0 ;
  cs::project *arg1 = (cs::project *) 0 ;
  cs_ea arg2 ;
  SwigValueWrapper< cs::procedure > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::project **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (cs_ea)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    try {
      result = ((cs::project const *)arg1)->find_procedure_by_address(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::procedure **)&jresult = new cs::procedure((const cs::procedure &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1project(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::project *arg1 = (cs::project *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::project **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_derived_1metric_1compilation_1error_1get_1metric_1def(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::derived_metric_compilation_error *arg1 = (cs::derived_metric_compilation_error *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::derived_metric_compilation_error **)&jarg1; 
  {
    try {
      result = ((cs::derived_metric_compilation_error const *)arg1)->get_metric_def();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_derived_1metric_1compilation_1error_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::derived_metric_compilation_error *arg1 = (cs::derived_metric_compilation_error *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::derived_metric_compilation_error **)&jarg1; 
  {
    try {
      result = ((cs::derived_metric_compilation_error const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_derived_1metric_1compilation_1error_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::derived_metric_compilation_error *arg1 = (cs::derived_metric_compilation_error *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::derived_metric_compilation_error **)&jarg1; 
  result = ((cs::derived_metric_compilation_error const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1derived_1metric_1compilation_1error(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::derived_metric_compilation_error *arg1 = (cs::derived_metric_compilation_error *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::derived_metric_compilation_error **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1metric_1sfile_1filter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::metric_sfile_filter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (cs::metric_sfile_filter *)new SwigDirector_metric_sfile_filter(jenv);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::metric_sfile_filter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1metric_1sfile_1filter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::metric_sfile_filter *arg1 = 0 ;
  cs::metric_sfile_filter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric_sfile_filter **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::metric_sfile_filter const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cs::metric_sfile_filter *)new SwigDirector_metric_sfile_filter(jenv,(cs::metric_sfile_filter const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::metric_sfile_filter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_metric_1sfile_1filter_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::metric_sfile_filter *arg1 = (cs::metric_sfile_filter *) 0 ;
  SwigValueWrapper< cs::sfile > arg2 ;
  cs::sfile *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::metric_sfile_filter **)&jarg1; 
  argp2 = *(cs::sfile **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::sfile");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)(arg1)->operator ()(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1metric_1sfile_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::metric_sfile_filter *arg1 = (cs::metric_sfile_filter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::metric_sfile_filter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_metric_1sfile_1filter_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  cs::metric_sfile_filter *obj = *((cs::metric_sfile_filter **)&objarg);
  (void)jcls;
  SwigDirector_metric_sfile_filter *director = dynamic_cast<SwigDirector_metric_sfile_filter *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_metric_1sfile_1filter_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  cs::metric_sfile_filter *obj = *((cs::metric_sfile_filter **)&objarg);
  SwigDirector_metric_sfile_filter *director = dynamic_cast<SwigDirector_metric_sfile_filter *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_general_1metric_1manager_1set_1metric_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::metric_sfile_filter *arg1 = (cs::metric_sfile_filter *) 0 ;
  cs::metric_sfile_filter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric_sfile_filter **)&jarg1; 
  {
    try {
      result = (cs::metric_sfile_filter *)cs::general_metric_manager::set_metric_filter(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::metric_sfile_filter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_general_1metric_1manager_1create_1derived_1metric(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      cs::general_metric_manager::create_derived_metric((std::string const &)*arg1);
    }
    catch (cs::derived_metric_compilation_error &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/derived_metric_compilation_error");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(JZ)V"), 
        (jlong)new cs::derived_metric_compilation_error(e),
        (jboolean)1 );
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1general_1metric_1manager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::general_metric_manager *arg1 = (cs::general_metric_manager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::general_metric_manager **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1metric_1manager_1lookup(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  SwigValueWrapper< cs::metric< cs::project > > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = cs::metric_manager< cs::project >::SWIGTEMPLATEDISAMBIGUATOR lookup((std::string const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::metric< cs::project > **)&jresult = new cs::metric< cs::project >((const cs::metric< cs::project > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1metric_1manager_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  cs::metric_function< cs::project > *arg1 = (cs::metric_function< cs::project > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  SwigValueWrapper< cs::metric< cs::project > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric_function< cs::project > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = cs::metric_manager< cs::project >::SWIGTEMPLATEDISAMBIGUATOR create(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::metric< cs::project > **)&jresult = new cs::metric< cs::project >((const cs::metric< cs::project > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1metric_1manager_1metrics(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = cs::metric_manager< cs::project >::SWIGTEMPLATEDISAMBIGUATOR metrics();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > **)&jresult = new cs::iterator_adapter< cs::metric_iterator_policy< cs::project > >((const cs::iterator_adapter< cs::metric_iterator_policy< cs::project > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1project_1metric_1manager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::metric_manager< cs::project > *arg1 = (cs::metric_manager< cs::project > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::metric_manager< cs::project > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1metric_1manager_1lookup(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  SwigValueWrapper< cs::metric< cs::compunit > > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = cs::metric_manager< cs::compunit >::SWIGTEMPLATEDISAMBIGUATOR lookup((std::string const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::metric< cs::compunit > **)&jresult = new cs::metric< cs::compunit >((const cs::metric< cs::compunit > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1metric_1manager_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  cs::metric_function< cs::compunit > *arg1 = (cs::metric_function< cs::compunit > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  SwigValueWrapper< cs::metric< cs::compunit > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric_function< cs::compunit > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = cs::metric_manager< cs::compunit >::SWIGTEMPLATEDISAMBIGUATOR create(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::metric< cs::compunit > **)&jresult = new cs::metric< cs::compunit >((const cs::metric< cs::compunit > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1metric_1manager_1metrics(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = cs::metric_manager< cs::compunit >::SWIGTEMPLATEDISAMBIGUATOR metrics();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > **)&jresult = new cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > >((const cs::iterator_adapter< cs::metric_iterator_policy< cs::compunit > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1compunit_1metric_1manager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::metric_manager< cs::compunit > *arg1 = (cs::metric_manager< cs::compunit > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::metric_manager< cs::compunit > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1metric_1manager_1lookup(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  SwigValueWrapper< cs::metric< cs::sfile > > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = cs::metric_manager< cs::sfile >::SWIGTEMPLATEDISAMBIGUATOR lookup((std::string const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::metric< cs::sfile > **)&jresult = new cs::metric< cs::sfile >((const cs::metric< cs::sfile > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1metric_1manager_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  cs::metric_function< cs::sfile > *arg1 = (cs::metric_function< cs::sfile > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  SwigValueWrapper< cs::metric< cs::sfile > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric_function< cs::sfile > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = cs::metric_manager< cs::sfile >::SWIGTEMPLATEDISAMBIGUATOR create(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::metric< cs::sfile > **)&jresult = new cs::metric< cs::sfile >((const cs::metric< cs::sfile > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1metric_1manager_1metrics(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = cs::metric_manager< cs::sfile >::SWIGTEMPLATEDISAMBIGUATOR metrics();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > **)&jresult = new cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > >((const cs::iterator_adapter< cs::metric_iterator_policy< cs::sfile > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1sfile_1metric_1manager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::metric_manager< cs::sfile > *arg1 = (cs::metric_manager< cs::sfile > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::metric_manager< cs::sfile > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1metric_1manager_1lookup(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  SwigValueWrapper< cs::metric< cs::procedure > > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = cs::metric_manager< cs::procedure >::SWIGTEMPLATEDISAMBIGUATOR lookup((std::string const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::metric< cs::procedure > **)&jresult = new cs::metric< cs::procedure >((const cs::metric< cs::procedure > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1metric_1manager_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  cs::metric_function< cs::procedure > *arg1 = (cs::metric_function< cs::procedure > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  SwigValueWrapper< cs::metric< cs::procedure > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric_function< cs::procedure > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = cs::metric_manager< cs::procedure >::SWIGTEMPLATEDISAMBIGUATOR create(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::metric< cs::procedure > **)&jresult = new cs::metric< cs::procedure >((const cs::metric< cs::procedure > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1metric_1manager_1metrics(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = cs::metric_manager< cs::procedure >::SWIGTEMPLATEDISAMBIGUATOR metrics();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > **)&jresult = new cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > >((const cs::iterator_adapter< cs::metric_iterator_policy< cs::procedure > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1procedure_1metric_1manager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::metric_manager< cs::procedure > *arg1 = (cs::metric_manager< cs::procedure > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::metric_manager< cs::procedure > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1project_1metric_1function_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::metric_function< cs::project > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (cs::metric_function< cs::project > *)new SwigDirector_project_metric_function(jenv);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::metric_function< cs::project > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1project_1metric_1function_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::metric_function< cs::project > *arg1 = 0 ;
  cs::metric_function< cs::project > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric_function< cs::project > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::metric_function< cs::project > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cs::metric_function< cs::project > *)new SwigDirector_project_metric_function(jenv,(cs::metric_function< cs::project > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::metric_function< cs::project > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_grammatech_cs_csJNI_project_1metric_1function_1evaluate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  cs::metric_function< cs::project > *arg1 = (cs::metric_function< cs::project > *) 0 ;
  SwigValueWrapper< cs::project > arg2 ;
  cs::project *argp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::metric_function< cs::project > **)&jarg1; 
  argp2 = *(cs::project **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::project");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (double)(arg1)->operator ()(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1project_1metric_1function(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::metric_function< cs::project > *arg1 = (cs::metric_function< cs::project > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::metric_function< cs::project > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_project_1metric_1function_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  cs::metric_function< cs::project > *obj = *((cs::metric_function< cs::project > **)&objarg);
  (void)jcls;
  SwigDirector_project_metric_function *director = dynamic_cast<SwigDirector_project_metric_function *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_project_1metric_1function_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  cs::metric_function< cs::project > *obj = *((cs::metric_function< cs::project > **)&objarg);
  SwigDirector_project_metric_function *director = dynamic_cast<SwigDirector_project_metric_function *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1compunit_1metric_1function_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::metric_function< cs::compunit > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (cs::metric_function< cs::compunit > *)new SwigDirector_compunit_metric_function(jenv);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::metric_function< cs::compunit > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1compunit_1metric_1function_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::metric_function< cs::compunit > *arg1 = 0 ;
  cs::metric_function< cs::compunit > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric_function< cs::compunit > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::metric_function< cs::compunit > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cs::metric_function< cs::compunit > *)new SwigDirector_compunit_metric_function(jenv,(cs::metric_function< cs::compunit > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::metric_function< cs::compunit > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_grammatech_cs_csJNI_compunit_1metric_1function_1evaluate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  cs::metric_function< cs::compunit > *arg1 = (cs::metric_function< cs::compunit > *) 0 ;
  SwigValueWrapper< cs::compunit > arg2 ;
  cs::compunit *argp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::metric_function< cs::compunit > **)&jarg1; 
  argp2 = *(cs::compunit **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::compunit");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (double)(arg1)->operator ()(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1compunit_1metric_1function(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::metric_function< cs::compunit > *arg1 = (cs::metric_function< cs::compunit > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::metric_function< cs::compunit > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_compunit_1metric_1function_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  cs::metric_function< cs::compunit > *obj = *((cs::metric_function< cs::compunit > **)&objarg);
  (void)jcls;
  SwigDirector_compunit_metric_function *director = dynamic_cast<SwigDirector_compunit_metric_function *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_compunit_1metric_1function_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  cs::metric_function< cs::compunit > *obj = *((cs::metric_function< cs::compunit > **)&objarg);
  SwigDirector_compunit_metric_function *director = dynamic_cast<SwigDirector_compunit_metric_function *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1sfile_1metric_1function_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::metric_function< cs::sfile > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (cs::metric_function< cs::sfile > *)new SwigDirector_sfile_metric_function(jenv);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::metric_function< cs::sfile > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1sfile_1metric_1function_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::metric_function< cs::sfile > *arg1 = 0 ;
  cs::metric_function< cs::sfile > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric_function< cs::sfile > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::metric_function< cs::sfile > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cs::metric_function< cs::sfile > *)new SwigDirector_sfile_metric_function(jenv,(cs::metric_function< cs::sfile > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::metric_function< cs::sfile > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_grammatech_cs_csJNI_sfile_1metric_1function_1evaluate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  cs::metric_function< cs::sfile > *arg1 = (cs::metric_function< cs::sfile > *) 0 ;
  SwigValueWrapper< cs::sfile > arg2 ;
  cs::sfile *argp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::metric_function< cs::sfile > **)&jarg1; 
  argp2 = *(cs::sfile **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::sfile");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (double)(arg1)->operator ()(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1sfile_1metric_1function(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::metric_function< cs::sfile > *arg1 = (cs::metric_function< cs::sfile > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::metric_function< cs::sfile > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_sfile_1metric_1function_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  cs::metric_function< cs::sfile > *obj = *((cs::metric_function< cs::sfile > **)&objarg);
  (void)jcls;
  SwigDirector_sfile_metric_function *director = dynamic_cast<SwigDirector_sfile_metric_function *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_sfile_1metric_1function_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  cs::metric_function< cs::sfile > *obj = *((cs::metric_function< cs::sfile > **)&objarg);
  SwigDirector_sfile_metric_function *director = dynamic_cast<SwigDirector_sfile_metric_function *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1procedure_1metric_1function_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::metric_function< cs::procedure > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (cs::metric_function< cs::procedure > *)new SwigDirector_procedure_metric_function(jenv);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::metric_function< cs::procedure > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1procedure_1metric_1function_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::metric_function< cs::procedure > *arg1 = 0 ;
  cs::metric_function< cs::procedure > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric_function< cs::procedure > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::metric_function< cs::procedure > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cs::metric_function< cs::procedure > *)new SwigDirector_procedure_metric_function(jenv,(cs::metric_function< cs::procedure > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::metric_function< cs::procedure > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_grammatech_cs_csJNI_procedure_1metric_1function_1evaluate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  cs::metric_function< cs::procedure > *arg1 = (cs::metric_function< cs::procedure > *) 0 ;
  SwigValueWrapper< cs::procedure > arg2 ;
  cs::procedure *argp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::metric_function< cs::procedure > **)&jarg1; 
  argp2 = *(cs::procedure **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::procedure");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (double)(arg1)->operator ()(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1procedure_1metric_1function(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::metric_function< cs::procedure > *arg1 = (cs::metric_function< cs::procedure > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::metric_function< cs::procedure > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_procedure_1metric_1function_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  cs::metric_function< cs::procedure > *obj = *((cs::metric_function< cs::procedure > **)&objarg);
  (void)jcls;
  SwigDirector_procedure_metric_function *director = dynamic_cast<SwigDirector_procedure_metric_function *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_procedure_1metric_1function_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  cs::metric_function< cs::procedure > *obj = *((cs::metric_function< cs::procedure > **)&objarg);
  SwigDirector_procedure_metric_function *director = dynamic_cast<SwigDirector_procedure_metric_function *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_metric_1dependency_1result_1get_1procedure_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::metric_dependency_result *arg1 = (cs::metric_dependency_result *) 0 ;
  std::vector< cs::metric< cs::procedure > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric_dependency_result **)&jarg1; 
  {
    try {
      result = ((cs::metric_dependency_result const *)arg1)->get_procedure_metrics();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::metric< cs::procedure > > **)&jresult = new std::vector< cs::metric< cs::procedure > >((const std::vector< cs::metric< cs::procedure > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_metric_1dependency_1result_1get_1sfile_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::metric_dependency_result *arg1 = (cs::metric_dependency_result *) 0 ;
  std::vector< cs::metric< cs::sfile > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric_dependency_result **)&jarg1; 
  {
    try {
      result = ((cs::metric_dependency_result const *)arg1)->get_sfile_metrics();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::metric< cs::sfile > > **)&jresult = new std::vector< cs::metric< cs::sfile > >((const std::vector< cs::metric< cs::sfile > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_metric_1dependency_1result_1get_1compunit_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::metric_dependency_result *arg1 = (cs::metric_dependency_result *) 0 ;
  std::vector< cs::metric< cs::compunit > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric_dependency_result **)&jarg1; 
  {
    try {
      result = ((cs::metric_dependency_result const *)arg1)->get_compunit_metrics();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::metric< cs::compunit > > **)&jresult = new std::vector< cs::metric< cs::compunit > >((const std::vector< cs::metric< cs::compunit > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_metric_1dependency_1result_1get_1project_1metrics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::metric_dependency_result *arg1 = (cs::metric_dependency_result *) 0 ;
  std::vector< cs::metric< cs::project > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric_dependency_result **)&jarg1; 
  {
    try {
      result = ((cs::metric_dependency_result const *)arg1)->get_project_metrics();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::metric< cs::project > > **)&jresult = new std::vector< cs::metric< cs::project > >((const std::vector< cs::metric< cs::project > > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_metric_1dependency_1result_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::metric_dependency_result *arg1 = (cs::metric_dependency_result *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric_dependency_result **)&jarg1; 
  {
    try {
      result = ((cs::metric_dependency_result const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_metric_1dependency_1result_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::metric_dependency_result *arg1 = (cs::metric_dependency_result *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric_dependency_result **)&jarg1; 
  result = ((cs::metric_dependency_result const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1metric_1dependency_1result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::metric_dependency_result *arg1 = (cs::metric_dependency_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::metric_dependency_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_project_1metric_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::metric< cs::project > *arg1 = (cs::metric< cs::project > *) 0 ;
  cs::metric< cs::project > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::metric< cs::project > **)&jarg1; 
  arg2 = *(cs::metric< cs::project > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::metric< cs::project > const & reference is null");
    return 0;
  } 
  result = (int)((cs::metric< cs::project > const *)arg1)->cmp((cs::metric< cs::project > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_project_1metric_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::metric< cs::project > *arg1 = (cs::metric< cs::project > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric< cs::project > **)&jarg1; 
  result = (int)((cs::metric< cs::project > const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_project_1metric_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::metric< cs::project > *arg1 = (cs::metric< cs::project > *) 0 ;
  cs::metric< cs::project > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::metric< cs::project > **)&jarg1; 
  arg2 = *(cs::metric< cs::project > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::metric< cs::project > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->operator ==((cs::metric< cs::project > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_project_1metric_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::metric< cs::project > *arg1 = (cs::metric< cs::project > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric< cs::project > **)&jarg1; 
  {
    try {
      result = ((cs::metric< cs::project > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_project_1metric_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::metric< cs::project > *arg1 = (cs::metric< cs::project > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric< cs::project > **)&jarg1; 
  result = ((cs::metric< cs::project > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_project_1metric_1tag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::metric< cs::project > *arg1 = (cs::metric< cs::project > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric< cs::project > **)&jarg1; 
  {
    try {
      result = ((cs::metric< cs::project > const *)arg1)->tag();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_project_1metric_1description(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::metric< cs::project > *arg1 = (cs::metric< cs::project > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric< cs::project > **)&jarg1; 
  {
    try {
      result = ((cs::metric< cs::project > const *)arg1)->description();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_grammatech_cs_csJNI_project_1metric_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  cs::metric< cs::project > *arg1 = (cs::metric< cs::project > *) 0 ;
  SwigValueWrapper< cs::project > arg2 ;
  cs::project *argp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::metric< cs::project > **)&jarg1; 
  argp2 = *(cs::project **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::project");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (double)((cs::metric< cs::project > const *)arg1)->value(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1metric_1get_1dependencies(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::metric< cs::project > *arg1 = (cs::metric< cs::project > *) 0 ;
  SwigValueWrapper< cs::metric_dependency_result > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric< cs::project > **)&jarg1; 
  {
    try {
      result = ((cs::metric< cs::project > const *)arg1)->get_dependencies();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::metric_dependency_result **)&jresult = new cs::metric_dependency_result((const cs::metric_dependency_result &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1project_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::metric< cs::project > *arg1 = (cs::metric< cs::project > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::metric< cs::project > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_compunit_1metric_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::metric< cs::compunit > *arg1 = (cs::metric< cs::compunit > *) 0 ;
  cs::metric< cs::compunit > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::metric< cs::compunit > **)&jarg1; 
  arg2 = *(cs::metric< cs::compunit > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::metric< cs::compunit > const & reference is null");
    return 0;
  } 
  result = (int)((cs::metric< cs::compunit > const *)arg1)->cmp((cs::metric< cs::compunit > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_compunit_1metric_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::metric< cs::compunit > *arg1 = (cs::metric< cs::compunit > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric< cs::compunit > **)&jarg1; 
  result = (int)((cs::metric< cs::compunit > const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_compunit_1metric_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::metric< cs::compunit > *arg1 = (cs::metric< cs::compunit > *) 0 ;
  cs::metric< cs::compunit > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::metric< cs::compunit > **)&jarg1; 
  arg2 = *(cs::metric< cs::compunit > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::metric< cs::compunit > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->operator ==((cs::metric< cs::compunit > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_compunit_1metric_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::metric< cs::compunit > *arg1 = (cs::metric< cs::compunit > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric< cs::compunit > **)&jarg1; 
  {
    try {
      result = ((cs::metric< cs::compunit > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_compunit_1metric_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::metric< cs::compunit > *arg1 = (cs::metric< cs::compunit > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric< cs::compunit > **)&jarg1; 
  result = ((cs::metric< cs::compunit > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_compunit_1metric_1tag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::metric< cs::compunit > *arg1 = (cs::metric< cs::compunit > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric< cs::compunit > **)&jarg1; 
  {
    try {
      result = ((cs::metric< cs::compunit > const *)arg1)->tag();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_compunit_1metric_1description(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::metric< cs::compunit > *arg1 = (cs::metric< cs::compunit > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric< cs::compunit > **)&jarg1; 
  {
    try {
      result = ((cs::metric< cs::compunit > const *)arg1)->description();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_grammatech_cs_csJNI_compunit_1metric_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  cs::metric< cs::compunit > *arg1 = (cs::metric< cs::compunit > *) 0 ;
  SwigValueWrapper< cs::compunit > arg2 ;
  cs::compunit *argp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::metric< cs::compunit > **)&jarg1; 
  argp2 = *(cs::compunit **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::compunit");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (double)((cs::metric< cs::compunit > const *)arg1)->value(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1metric_1get_1dependencies(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::metric< cs::compunit > *arg1 = (cs::metric< cs::compunit > *) 0 ;
  SwigValueWrapper< cs::metric_dependency_result > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric< cs::compunit > **)&jarg1; 
  {
    try {
      result = ((cs::metric< cs::compunit > const *)arg1)->get_dependencies();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::metric_dependency_result **)&jresult = new cs::metric_dependency_result((const cs::metric_dependency_result &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1compunit_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::metric< cs::compunit > *arg1 = (cs::metric< cs::compunit > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::metric< cs::compunit > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_sfile_1metric_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::metric< cs::sfile > *arg1 = (cs::metric< cs::sfile > *) 0 ;
  cs::metric< cs::sfile > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::metric< cs::sfile > **)&jarg1; 
  arg2 = *(cs::metric< cs::sfile > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::metric< cs::sfile > const & reference is null");
    return 0;
  } 
  result = (int)((cs::metric< cs::sfile > const *)arg1)->cmp((cs::metric< cs::sfile > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_sfile_1metric_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::metric< cs::sfile > *arg1 = (cs::metric< cs::sfile > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric< cs::sfile > **)&jarg1; 
  result = (int)((cs::metric< cs::sfile > const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_sfile_1metric_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::metric< cs::sfile > *arg1 = (cs::metric< cs::sfile > *) 0 ;
  cs::metric< cs::sfile > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::metric< cs::sfile > **)&jarg1; 
  arg2 = *(cs::metric< cs::sfile > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::metric< cs::sfile > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->operator ==((cs::metric< cs::sfile > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_sfile_1metric_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::metric< cs::sfile > *arg1 = (cs::metric< cs::sfile > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric< cs::sfile > **)&jarg1; 
  {
    try {
      result = ((cs::metric< cs::sfile > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_sfile_1metric_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::metric< cs::sfile > *arg1 = (cs::metric< cs::sfile > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric< cs::sfile > **)&jarg1; 
  result = ((cs::metric< cs::sfile > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_sfile_1metric_1tag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::metric< cs::sfile > *arg1 = (cs::metric< cs::sfile > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric< cs::sfile > **)&jarg1; 
  {
    try {
      result = ((cs::metric< cs::sfile > const *)arg1)->tag();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_sfile_1metric_1description(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::metric< cs::sfile > *arg1 = (cs::metric< cs::sfile > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric< cs::sfile > **)&jarg1; 
  {
    try {
      result = ((cs::metric< cs::sfile > const *)arg1)->description();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_grammatech_cs_csJNI_sfile_1metric_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  cs::metric< cs::sfile > *arg1 = (cs::metric< cs::sfile > *) 0 ;
  SwigValueWrapper< cs::sfile > arg2 ;
  cs::sfile *argp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::metric< cs::sfile > **)&jarg1; 
  argp2 = *(cs::sfile **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::sfile");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (double)((cs::metric< cs::sfile > const *)arg1)->value(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1metric_1get_1dependencies(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::metric< cs::sfile > *arg1 = (cs::metric< cs::sfile > *) 0 ;
  SwigValueWrapper< cs::metric_dependency_result > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric< cs::sfile > **)&jarg1; 
  {
    try {
      result = ((cs::metric< cs::sfile > const *)arg1)->get_dependencies();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::metric_dependency_result **)&jresult = new cs::metric_dependency_result((const cs::metric_dependency_result &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1sfile_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::metric< cs::sfile > *arg1 = (cs::metric< cs::sfile > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::metric< cs::sfile > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_procedure_1metric_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cs::metric< cs::procedure > *arg1 = (cs::metric< cs::procedure > *) 0 ;
  cs::metric< cs::procedure > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::metric< cs::procedure > **)&jarg1; 
  arg2 = *(cs::metric< cs::procedure > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::metric< cs::procedure > const & reference is null");
    return 0;
  } 
  result = (int)((cs::metric< cs::procedure > const *)arg1)->cmp((cs::metric< cs::procedure > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_procedure_1metric_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::metric< cs::procedure > *arg1 = (cs::metric< cs::procedure > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric< cs::procedure > **)&jarg1; 
  result = (int)((cs::metric< cs::procedure > const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_procedure_1metric_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::metric< cs::procedure > *arg1 = (cs::metric< cs::procedure > *) 0 ;
  cs::metric< cs::procedure > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::metric< cs::procedure > **)&jarg1; 
  arg2 = *(cs::metric< cs::procedure > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::metric< cs::procedure > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->operator ==((cs::metric< cs::procedure > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_procedure_1metric_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::metric< cs::procedure > *arg1 = (cs::metric< cs::procedure > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric< cs::procedure > **)&jarg1; 
  {
    try {
      result = ((cs::metric< cs::procedure > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_procedure_1metric_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::metric< cs::procedure > *arg1 = (cs::metric< cs::procedure > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric< cs::procedure > **)&jarg1; 
  result = ((cs::metric< cs::procedure > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_procedure_1metric_1tag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::metric< cs::procedure > *arg1 = (cs::metric< cs::procedure > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric< cs::procedure > **)&jarg1; 
  {
    try {
      result = ((cs::metric< cs::procedure > const *)arg1)->tag();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_procedure_1metric_1description(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::metric< cs::procedure > *arg1 = (cs::metric< cs::procedure > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric< cs::procedure > **)&jarg1; 
  {
    try {
      result = ((cs::metric< cs::procedure > const *)arg1)->description();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_grammatech_cs_csJNI_procedure_1metric_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  cs::metric< cs::procedure > *arg1 = (cs::metric< cs::procedure > *) 0 ;
  SwigValueWrapper< cs::procedure > arg2 ;
  cs::procedure *argp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::metric< cs::procedure > **)&jarg1; 
  argp2 = *(cs::procedure **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::procedure");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (double)((cs::metric< cs::procedure > const *)arg1)->value(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1metric_1get_1dependencies(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::metric< cs::procedure > *arg1 = (cs::metric< cs::procedure > *) 0 ;
  SwigValueWrapper< cs::metric_dependency_result > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::metric< cs::procedure > **)&jarg1; 
  {
    try {
      result = ((cs::metric< cs::procedure > const *)arg1)->get_dependencies();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::metric_dependency_result **)&jresult = new cs::metric_dependency_result((const cs::metric_dependency_result &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1procedure_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::metric< cs::procedure > *arg1 = (cs::metric< cs::procedure > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::metric< cs::procedure > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1procedure_1metric_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cs::metric< cs::procedure > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< cs::metric< cs::procedure > > *)new std::vector< cs::metric< cs::procedure > >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::metric< cs::procedure > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1metric_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::metric< cs::procedure > > *arg1 = (std::vector< cs::metric< cs::procedure > > *) 0 ;
  std::vector< cs::metric< cs::procedure > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::metric< cs::procedure > > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::metric< cs::procedure > > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1metric_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::metric< cs::procedure > > *arg1 = (std::vector< cs::metric< cs::procedure > > *) 0 ;
  std::vector< cs::metric< cs::procedure > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::metric< cs::procedure > > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::metric< cs::procedure > > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_procedure_1metric_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cs::metric< cs::procedure > > *arg1 = (std::vector< cs::metric< cs::procedure > > *) 0 ;
  std::vector< cs::metric< cs::procedure > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::metric< cs::procedure > > **)&jarg1; 
  arg2 = (std::vector< cs::metric< cs::procedure > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_procedure_1metric_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cs::metric< cs::procedure > > *arg1 = (std::vector< cs::metric< cs::procedure > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::metric< cs::procedure > > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< cs::metric< cs::procedure > > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_procedure_1metric_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cs::metric< cs::procedure > > *arg1 = (std::vector< cs::metric< cs::procedure > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::metric< cs::procedure > > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_procedure_1metric_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cs::metric< cs::procedure > > *arg1 = (std::vector< cs::metric< cs::procedure > > *) 0 ;
  std::vector< cs::metric< cs::procedure > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cs::metric< cs::procedure > > **)&jarg1; 
  arg2 = *(std::vector< cs::metric< cs::procedure > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::metric< cs::procedure > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< cs::metric< cs::procedure > >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_procedure_1metric_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cs::metric< cs::procedure > > *arg1 = (std::vector< cs::metric< cs::procedure > > *) 0 ;
  int arg2 ;
  std::vector< cs::metric< cs::procedure > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::metric< cs::procedure > > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< cs::metric< cs::procedure > >::value_type *) &std_vector_Sl_cs_metric_Sl_cs_procedure_Sg__Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::metric< cs::procedure > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_procedure_1metric_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cs::metric< cs::procedure > > *arg1 = (std::vector< cs::metric< cs::procedure > > *) 0 ;
  int arg2 ;
  std::vector< cs::metric< cs::procedure > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cs::metric< cs::procedure > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< cs::metric< cs::procedure > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::metric< cs::procedure > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_cs_metric_Sl_cs_procedure_Sg__Sg__set(arg1,arg2,(cs::metric< cs::procedure > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1procedure_1metric_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cs::metric< cs::procedure > > *arg1 = (std::vector< cs::metric< cs::procedure > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cs::metric< cs::procedure > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1sfile_1metric_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cs::metric< cs::sfile > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< cs::metric< cs::sfile > > *)new std::vector< cs::metric< cs::sfile > >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::metric< cs::sfile > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1metric_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::metric< cs::sfile > > *arg1 = (std::vector< cs::metric< cs::sfile > > *) 0 ;
  std::vector< cs::metric< cs::sfile > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::metric< cs::sfile > > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::metric< cs::sfile > > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1metric_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::metric< cs::sfile > > *arg1 = (std::vector< cs::metric< cs::sfile > > *) 0 ;
  std::vector< cs::metric< cs::sfile > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::metric< cs::sfile > > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::metric< cs::sfile > > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_sfile_1metric_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cs::metric< cs::sfile > > *arg1 = (std::vector< cs::metric< cs::sfile > > *) 0 ;
  std::vector< cs::metric< cs::sfile > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::metric< cs::sfile > > **)&jarg1; 
  arg2 = (std::vector< cs::metric< cs::sfile > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_sfile_1metric_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cs::metric< cs::sfile > > *arg1 = (std::vector< cs::metric< cs::sfile > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::metric< cs::sfile > > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< cs::metric< cs::sfile > > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_sfile_1metric_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cs::metric< cs::sfile > > *arg1 = (std::vector< cs::metric< cs::sfile > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::metric< cs::sfile > > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_sfile_1metric_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cs::metric< cs::sfile > > *arg1 = (std::vector< cs::metric< cs::sfile > > *) 0 ;
  std::vector< cs::metric< cs::sfile > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cs::metric< cs::sfile > > **)&jarg1; 
  arg2 = *(std::vector< cs::metric< cs::sfile > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::metric< cs::sfile > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< cs::metric< cs::sfile > >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_sfile_1metric_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cs::metric< cs::sfile > > *arg1 = (std::vector< cs::metric< cs::sfile > > *) 0 ;
  int arg2 ;
  std::vector< cs::metric< cs::sfile > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::metric< cs::sfile > > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< cs::metric< cs::sfile > >::value_type *) &std_vector_Sl_cs_metric_Sl_cs_sfile_Sg__Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::metric< cs::sfile > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_sfile_1metric_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cs::metric< cs::sfile > > *arg1 = (std::vector< cs::metric< cs::sfile > > *) 0 ;
  int arg2 ;
  std::vector< cs::metric< cs::sfile > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cs::metric< cs::sfile > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< cs::metric< cs::sfile > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::metric< cs::sfile > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_cs_metric_Sl_cs_sfile_Sg__Sg__set(arg1,arg2,(cs::metric< cs::sfile > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1sfile_1metric_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cs::metric< cs::sfile > > *arg1 = (std::vector< cs::metric< cs::sfile > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cs::metric< cs::sfile > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1compunit_1metric_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cs::metric< cs::compunit > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< cs::metric< cs::compunit > > *)new std::vector< cs::metric< cs::compunit > >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::metric< cs::compunit > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1metric_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::metric< cs::compunit > > *arg1 = (std::vector< cs::metric< cs::compunit > > *) 0 ;
  std::vector< cs::metric< cs::compunit > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::metric< cs::compunit > > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::metric< cs::compunit > > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1metric_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::metric< cs::compunit > > *arg1 = (std::vector< cs::metric< cs::compunit > > *) 0 ;
  std::vector< cs::metric< cs::compunit > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::metric< cs::compunit > > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::metric< cs::compunit > > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_compunit_1metric_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cs::metric< cs::compunit > > *arg1 = (std::vector< cs::metric< cs::compunit > > *) 0 ;
  std::vector< cs::metric< cs::compunit > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::metric< cs::compunit > > **)&jarg1; 
  arg2 = (std::vector< cs::metric< cs::compunit > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_compunit_1metric_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cs::metric< cs::compunit > > *arg1 = (std::vector< cs::metric< cs::compunit > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::metric< cs::compunit > > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< cs::metric< cs::compunit > > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_compunit_1metric_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cs::metric< cs::compunit > > *arg1 = (std::vector< cs::metric< cs::compunit > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::metric< cs::compunit > > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_compunit_1metric_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cs::metric< cs::compunit > > *arg1 = (std::vector< cs::metric< cs::compunit > > *) 0 ;
  std::vector< cs::metric< cs::compunit > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cs::metric< cs::compunit > > **)&jarg1; 
  arg2 = *(std::vector< cs::metric< cs::compunit > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::metric< cs::compunit > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< cs::metric< cs::compunit > >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_compunit_1metric_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cs::metric< cs::compunit > > *arg1 = (std::vector< cs::metric< cs::compunit > > *) 0 ;
  int arg2 ;
  std::vector< cs::metric< cs::compunit > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::metric< cs::compunit > > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< cs::metric< cs::compunit > >::value_type *) &std_vector_Sl_cs_metric_Sl_cs_compunit_Sg__Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::metric< cs::compunit > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_compunit_1metric_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cs::metric< cs::compunit > > *arg1 = (std::vector< cs::metric< cs::compunit > > *) 0 ;
  int arg2 ;
  std::vector< cs::metric< cs::compunit > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cs::metric< cs::compunit > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< cs::metric< cs::compunit > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::metric< cs::compunit > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_cs_metric_Sl_cs_compunit_Sg__Sg__set(arg1,arg2,(cs::metric< cs::compunit > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1compunit_1metric_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cs::metric< cs::compunit > > *arg1 = (std::vector< cs::metric< cs::compunit > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cs::metric< cs::compunit > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1project_1metric_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cs::metric< cs::project > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< cs::metric< cs::project > > *)new std::vector< cs::metric< cs::project > >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::metric< cs::project > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1metric_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::metric< cs::project > > *arg1 = (std::vector< cs::metric< cs::project > > *) 0 ;
  std::vector< cs::metric< cs::project > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::metric< cs::project > > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::metric< cs::project > > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1metric_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::metric< cs::project > > *arg1 = (std::vector< cs::metric< cs::project > > *) 0 ;
  std::vector< cs::metric< cs::project > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::metric< cs::project > > **)&jarg1; 
  {
    try {
      result = ((std::vector< cs::metric< cs::project > > const *)arg1)->capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_project_1metric_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cs::metric< cs::project > > *arg1 = (std::vector< cs::metric< cs::project > > *) 0 ;
  std::vector< cs::metric< cs::project > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::metric< cs::project > > **)&jarg1; 
  arg2 = (std::vector< cs::metric< cs::project > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_project_1metric_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cs::metric< cs::project > > *arg1 = (std::vector< cs::metric< cs::project > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::metric< cs::project > > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< cs::metric< cs::project > > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_project_1metric_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cs::metric< cs::project > > *arg1 = (std::vector< cs::metric< cs::project > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::metric< cs::project > > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_project_1metric_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cs::metric< cs::project > > *arg1 = (std::vector< cs::metric< cs::project > > *) 0 ;
  std::vector< cs::metric< cs::project > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cs::metric< cs::project > > **)&jarg1; 
  arg2 = *(std::vector< cs::metric< cs::project > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::metric< cs::project > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< cs::metric< cs::project > >::value_type const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_project_1metric_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cs::metric< cs::project > > *arg1 = (std::vector< cs::metric< cs::project > > *) 0 ;
  int arg2 ;
  std::vector< cs::metric< cs::project > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::metric< cs::project > > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< cs::metric< cs::project > >::value_type *) &std_vector_Sl_cs_metric_Sl_cs_project_Sg__Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::metric< cs::project > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_project_1metric_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cs::metric< cs::project > > *arg1 = (std::vector< cs::metric< cs::project > > *) 0 ;
  int arg2 ;
  std::vector< cs::metric< cs::project > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cs::metric< cs::project > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< cs::metric< cs::project > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::metric< cs::project > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_cs_metric_Sl_cs_project_Sg__Sg__set(arg1,arg2,(cs::metric< cs::project > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1project_1metric_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cs::metric< cs::project > > *arg1 = (std::vector< cs::metric< cs::project > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cs::metric< cs::project > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_csurf_1info_1version(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = cs::csurf_info::version();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_csurf_1info_1major_1version(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)cs::csurf_info::major_version();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_csurf_1info_1minor_1version(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)cs::csurf_info::minor_version();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_csurf_1info_1patch_1version(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)cs::csurf_info::patch_version();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_csurf_1info_1install_1path(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = cs::csurf_info::install_path();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1csurf_1info(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::csurf_info *arg1 = (cs::csurf_info *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::csurf_info **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_sysinfo_1user_1name(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = cs::sysinfo::user_name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_sysinfo_1machine_1name(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = cs::sysinfo::machine_name();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1sysinfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::sysinfo *arg1 = (cs::sysinfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::sysinfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_object_1pager_1flush(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  {
    try {
      cs::object_pager::flush();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_object_1pager_1set_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  size_t arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      cs::object_pager::set_capacity(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_object_1pager_1get_1capacity(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = cs::object_pager::get_capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_object_1pager_1set_1io_1buffer_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  size_t arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      cs::object_pager::set_io_buffer_capacity(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_object_1pager_1get_1pending_1io_1buffer_1capacity(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = cs::object_pager::get_pending_io_buffer_capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_object_1pager_1get_1current_1io_1buffer_1capacity(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = cs::object_pager::get_current_io_buffer_capacity();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1object_1pager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::object_pager *arg1 = (cs::object_pager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::object_pager **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1to_1int_1pair_1set_1in_1compunit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  SwigValueWrapper< cs::compunit > arg2 ;
  cs::compunit *argp2 ;
  cs::int_pair_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  argp2 = *(cs::compunit **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::compunit");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->to_int_pair_set_in_compunit(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::int_pair_set **)&jresult = new cs::int_pair_set((const cs::int_pair_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1intersect_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::point_set *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::point_set **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::point_set const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->intersect_size((cs::point_set const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::pdg_edge_kind arg2 ;
  cs::pdg_edge_kind *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  argp2 = *(cs::pdg_edge_kind **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::pdg_edge_kind");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->cycle(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1categorize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::compunit_points_vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->categorize();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::compunit_points_vector **)&jresult = new cs::compunit_points_vector((const cs::compunit_points_vector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1categorize_1by_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  std::vector< cs::compunit_points_pair > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->categorize_by_file();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::compunit_points_pair > **)&jresult = new std::vector< cs::compunit_points_pair >((const std::vector< cs::compunit_points_pair > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1intersects_1procedure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  SwigValueWrapper< cs::procedure > arg2 ;
  cs::procedure *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  argp2 = *(cs::procedure **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::procedure");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->intersects_procedure(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1procedures(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  std::vector< cs::procedure > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->procedures();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::procedure > **)&jresult = new std::vector< cs::procedure >((const std::vector< cs::procedure > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1sort_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  std::vector< cs::point > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->sort();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::point > **)&jresult = new std::vector< cs::point >((const std::vector< cs::point > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1sort_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< cs::point > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->sort((std::string const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::point > **)&jresult = new std::vector< cs::point >((const std::vector< cs::point > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1predecessors_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::depfilter *arg2 = 0 ;
  size_t arg3 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::depfilter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::depfilter const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->predecessors((cs::depfilter const &)*arg2,arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1predecessors_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::depfilter *arg2 = 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::depfilter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::depfilter const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->predecessors((cs::depfilter const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1successors_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::depfilter *arg2 = 0 ;
  size_t arg3 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::depfilter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::depfilter const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->successors((cs::depfilter const &)*arg2,arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1successors_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::depfilter *arg2 = 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::depfilter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::depfilter const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->successors((cs::depfilter const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1predecessors_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  size_t arg2 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->predecessors(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1predecessors_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->predecessors();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1successors_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  size_t arg2 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->successors(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1successors_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->successors();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1backward_1slice_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::pdg_edge_kind arg2 ;
  cs::pdg_edge_kind *argp2 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  argp2 = *(cs::pdg_edge_kind **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::pdg_edge_kind");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->backward_slice(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1backward_1slice_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->backward_slice();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1forward_1slice_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::pdg_edge_kind arg2 ;
  cs::pdg_edge_kind *argp2 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  argp2 = *(cs::pdg_edge_kind **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::pdg_edge_kind");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->forward_slice(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1forward_1slice_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->forward_slice();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1backward_1slice_1out_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::pdg_edge_kind arg2 ;
  cs::pdg_edge_kind *argp2 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  argp2 = *(cs::pdg_edge_kind **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::pdg_edge_kind");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->backward_slice_out(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1backward_1slice_1out_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->backward_slice_out();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1forward_1slice_1out_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::pdg_edge_kind arg2 ;
  cs::pdg_edge_kind *argp2 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  argp2 = *(cs::pdg_edge_kind **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::pdg_edge_kind");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->forward_slice_out(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1forward_1slice_1out_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->forward_slice_out();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1backward_1slice_1in_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::pdg_edge_kind arg2 ;
  cs::pdg_edge_kind *argp2 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  argp2 = *(cs::pdg_edge_kind **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::pdg_edge_kind");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->backward_slice_in(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1backward_1slice_1in_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->backward_slice_in();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1forward_1slice_1in_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::pdg_edge_kind arg2 ;
  cs::pdg_edge_kind *argp2 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  argp2 = *(cs::pdg_edge_kind **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::pdg_edge_kind");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->forward_slice_in(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1forward_1slice_1in_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->forward_slice_in();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1chop_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::point_set *arg2 = 0 ;
  cs::pdg_edge_kind arg3 ;
  cs::pdg_edge_kind *argp3 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::point_set **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::point_set const & reference is null");
    return 0;
  } 
  argp3 = *(cs::pdg_edge_kind **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::pdg_edge_kind");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->chop((cs::point_set const &)*arg2,arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1chop_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::point_set *arg2 = 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::point_set **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::point_set const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->chop((cs::point_set const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1truncated_1chop_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::point_set *arg2 = 0 ;
  cs::pdg_edge_kind arg3 ;
  cs::pdg_edge_kind *argp3 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::point_set **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::point_set const & reference is null");
    return 0;
  } 
  argp3 = *(cs::pdg_edge_kind **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::pdg_edge_kind");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->truncated_chop((cs::point_set const &)*arg2,arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1truncated_1chop_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::point_set *arg2 = 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::point_set **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::point_set const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->truncated_chop((cs::point_set const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1fast_1chop_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::point_set *arg2 = 0 ;
  cs::pdg_edge_kind arg3 ;
  cs::pdg_edge_kind *argp3 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::point_set **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::point_set const & reference is null");
    return 0;
  } 
  argp3 = *(cs::pdg_edge_kind **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::pdg_edge_kind");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->fast_chop((cs::point_set const &)*arg2,arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1fast_1chop_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::point_set *arg2 = 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::point_set **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::point_set const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->fast_chop((cs::point_set const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1var_1predecessors_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::symbol_set *arg2 = 0 ;
  cs::depfilter *arg3 = 0 ;
  size_t arg4 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::symbol_set **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::symbol_set const & reference is null");
    return 0;
  } 
  arg3 = *(cs::depfilter **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::depfilter const & reference is null");
    return 0;
  } 
  arg4 = (size_t)jarg4; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->var_predecessors((cs::symbol_set const &)*arg2,(cs::depfilter const &)*arg3,arg4);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1var_1predecessors_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::symbol_set *arg2 = 0 ;
  cs::depfilter *arg3 = 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::symbol_set **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::symbol_set const & reference is null");
    return 0;
  } 
  arg3 = *(cs::depfilter **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::depfilter const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->var_predecessors((cs::symbol_set const &)*arg2,(cs::depfilter const &)*arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1var_1successors_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::symbol_set *arg2 = 0 ;
  cs::depfilter *arg3 = 0 ;
  size_t arg4 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::symbol_set **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::symbol_set const & reference is null");
    return 0;
  } 
  arg3 = *(cs::depfilter **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::depfilter const & reference is null");
    return 0;
  } 
  arg4 = (size_t)jarg4; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->var_successors((cs::symbol_set const &)*arg2,(cs::depfilter const &)*arg3,arg4);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1var_1successors_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::symbol_set *arg2 = 0 ;
  cs::depfilter *arg3 = 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::symbol_set **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::symbol_set const & reference is null");
    return 0;
  } 
  arg3 = *(cs::depfilter **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::depfilter const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->var_successors((cs::symbol_set const &)*arg2,(cs::depfilter const &)*arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1var_1backward_1slice_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::symbol_set *arg2 = 0 ;
  cs::pdg_edge_kind arg3 ;
  cs::pdg_edge_kind *argp3 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::symbol_set **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::symbol_set const & reference is null");
    return 0;
  } 
  argp3 = *(cs::pdg_edge_kind **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::pdg_edge_kind");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->var_backward_slice((cs::symbol_set const &)*arg2,arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1var_1backward_1slice_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::symbol_set *arg2 = 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::symbol_set **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::symbol_set const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->var_backward_slice((cs::symbol_set const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1var_1forward_1slice_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::symbol_set *arg2 = 0 ;
  cs::pdg_edge_kind arg3 ;
  cs::pdg_edge_kind *argp3 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::symbol_set **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::symbol_set const & reference is null");
    return 0;
  } 
  argp3 = *(cs::pdg_edge_kind **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::pdg_edge_kind");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->var_forward_slice((cs::symbol_set const &)*arg2,arg3);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1var_1forward_1slice_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::symbol_set *arg2 = 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::symbol_set **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::symbol_set const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->var_forward_slice((cs::symbol_set const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1var_1chop_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::symbol_set *arg2 = 0 ;
  cs::point_set *arg3 = 0 ;
  cs::symbol_set *arg4 = 0 ;
  cs::pdg_edge_kind arg5 ;
  cs::pdg_edge_kind *argp5 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::symbol_set **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::symbol_set const & reference is null");
    return 0;
  } 
  arg3 = *(cs::point_set **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::point_set const & reference is null");
    return 0;
  } 
  arg4 = *(cs::symbol_set **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::symbol_set const & reference is null");
    return 0;
  } 
  argp5 = *(cs::pdg_edge_kind **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::pdg_edge_kind");
    return 0;
  }
  arg5 = *argp5; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->var_chop((cs::symbol_set const &)*arg2,(cs::point_set const &)*arg3,(cs::symbol_set const &)*arg4,arg5);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1var_1chop_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::symbol_set *arg2 = 0 ;
  cs::point_set *arg3 = 0 ;
  cs::symbol_set *arg4 = 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::symbol_set **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::symbol_set const & reference is null");
    return 0;
  } 
  arg3 = *(cs::point_set **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::point_set const & reference is null");
    return 0;
  } 
  arg4 = *(cs::symbol_set **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::symbol_set const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->var_chop((cs::symbol_set const &)*arg2,(cs::point_set const &)*arg3,(cs::symbol_set const &)*arg4);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1var_1truncated_1chop_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::symbol_set *arg2 = 0 ;
  cs::point_set *arg3 = 0 ;
  cs::symbol_set *arg4 = 0 ;
  cs::pdg_edge_kind arg5 ;
  cs::pdg_edge_kind *argp5 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::symbol_set **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::symbol_set const & reference is null");
    return 0;
  } 
  arg3 = *(cs::point_set **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::point_set const & reference is null");
    return 0;
  } 
  arg4 = *(cs::symbol_set **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::symbol_set const & reference is null");
    return 0;
  } 
  argp5 = *(cs::pdg_edge_kind **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::pdg_edge_kind");
    return 0;
  }
  arg5 = *argp5; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->var_truncated_chop((cs::symbol_set const &)*arg2,(cs::point_set const &)*arg3,(cs::symbol_set const &)*arg4,arg5);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1var_1truncated_1chop_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::symbol_set *arg2 = 0 ;
  cs::point_set *arg3 = 0 ;
  cs::symbol_set *arg4 = 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::symbol_set **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::symbol_set const & reference is null");
    return 0;
  } 
  arg3 = *(cs::point_set **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::point_set const & reference is null");
    return 0;
  } 
  arg4 = *(cs::symbol_set **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::symbol_set const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->var_truncated_chop((cs::symbol_set const &)*arg2,(cs::point_set const &)*arg3,(cs::symbol_set const &)*arg4);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1var_1fast_1chop_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::symbol_set *arg2 = 0 ;
  cs::point_set *arg3 = 0 ;
  cs::symbol_set *arg4 = 0 ;
  cs::pdg_edge_kind arg5 ;
  cs::pdg_edge_kind *argp5 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::symbol_set **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::symbol_set const & reference is null");
    return 0;
  } 
  arg3 = *(cs::point_set **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::point_set const & reference is null");
    return 0;
  } 
  arg4 = *(cs::symbol_set **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::symbol_set const & reference is null");
    return 0;
  } 
  argp5 = *(cs::pdg_edge_kind **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::pdg_edge_kind");
    return 0;
  }
  arg5 = *argp5; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->var_fast_chop((cs::symbol_set const &)*arg2,(cs::point_set const &)*arg3,(cs::symbol_set const &)*arg4,arg5);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1var_1fast_1chop_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::symbol_set *arg2 = 0 ;
  cs::point_set *arg3 = 0 ;
  cs::symbol_set *arg4 = 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::symbol_set **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::symbol_set const & reference is null");
    return 0;
  } 
  arg3 = *(cs::point_set **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::point_set const & reference is null");
    return 0;
  } 
  arg4 = *(cs::symbol_set **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::symbol_set const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::point > > const *)arg1)->var_fast_chop((cs::symbol_set const &)*arg2,(cs::point_set const &)*arg3,(cs::symbol_set const &)*arg4);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1filtered_1predecessors_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::predsucc_filter *arg2 = 0 ;
  cs::pdg_edge_kind arg3 ;
  size_t arg4 ;
  bool arg5 ;
  cs::pdg_edge_kind *argp3 ;
  SwigValueWrapper< std::pair< cs::mutable_set< cs::point >,bool > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::predsucc_filter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::predsucc_filter & reference is null");
    return 0;
  } 
  argp3 = *(cs::pdg_edge_kind **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::pdg_edge_kind");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (size_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      result = (arg1)->filtered_predecessors_java(*arg2,arg3,arg4,arg5); 
    }
    /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
    catch (cs::filtered_predsucc_swig_exc &) {
      /* exception has already been thrown, we just need to unwind
                       * the stack.
                       */
      return 0;
    }
  }
  *(std::pair< cs::point_set,bool > **)&jresult = new std::pair< cs::point_set,bool >((const std::pair< cs::point_set,bool > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1filtered_1predecessors_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::predsucc_filter *arg2 = 0 ;
  cs::pdg_edge_kind arg3 ;
  size_t arg4 ;
  cs::pdg_edge_kind *argp3 ;
  SwigValueWrapper< std::pair< cs::mutable_set< cs::point >,bool > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::predsucc_filter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::predsucc_filter & reference is null");
    return 0;
  } 
  argp3 = *(cs::pdg_edge_kind **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::pdg_edge_kind");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (size_t)jarg4; 
  {
    try {
      result = (arg1)->filtered_predecessors_java(*arg2,arg3,arg4); 
    }
    /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
    catch (cs::filtered_predsucc_swig_exc &) {
      /* exception has already been thrown, we just need to unwind
                       * the stack.
                       */
      return 0;
    }
  }
  *(std::pair< cs::point_set,bool > **)&jresult = new std::pair< cs::point_set,bool >((const std::pair< cs::point_set,bool > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1filtered_1predecessors_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::predsucc_filter *arg2 = 0 ;
  cs::pdg_edge_kind arg3 ;
  cs::pdg_edge_kind *argp3 ;
  SwigValueWrapper< std::pair< cs::mutable_set< cs::point >,bool > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::predsucc_filter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::predsucc_filter & reference is null");
    return 0;
  } 
  argp3 = *(cs::pdg_edge_kind **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::pdg_edge_kind");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (arg1)->filtered_predecessors_java(*arg2,arg3); 
    }
    /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
    catch (cs::filtered_predsucc_swig_exc &) {
      /* exception has already been thrown, we just need to unwind
                       * the stack.
                       */
      return 0;
    }
  }
  *(std::pair< cs::point_set,bool > **)&jresult = new std::pair< cs::point_set,bool >((const std::pair< cs::point_set,bool > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1filtered_1predecessors_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::predsucc_filter *arg2 = 0 ;
  SwigValueWrapper< std::pair< cs::mutable_set< cs::point >,bool > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::predsucc_filter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::predsucc_filter & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->filtered_predecessors_java(*arg2); 
    }
    /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
    catch (cs::filtered_predsucc_swig_exc &) {
      /* exception has already been thrown, we just need to unwind
                       * the stack.
                       */
      return 0;
    }
  }
  *(std::pair< cs::point_set,bool > **)&jresult = new std::pair< cs::point_set,bool >((const std::pair< cs::point_set,bool > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1filtered_1successors_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::predsucc_filter *arg2 = 0 ;
  cs::pdg_edge_kind arg3 ;
  size_t arg4 ;
  bool arg5 ;
  cs::pdg_edge_kind *argp3 ;
  SwigValueWrapper< std::pair< cs::mutable_set< cs::point >,bool > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::predsucc_filter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::predsucc_filter & reference is null");
    return 0;
  } 
  argp3 = *(cs::pdg_edge_kind **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::pdg_edge_kind");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (size_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      result = (arg1)->filtered_successors_java(*arg2,arg3,arg4,arg5); 
    }
    /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
    catch (cs::filtered_predsucc_swig_exc &) {
      /* exception has already been thrown, we just need to unwind
                       * the stack.
                       */
      return 0;
    }
  }
  *(std::pair< cs::point_set,bool > **)&jresult = new std::pair< cs::point_set,bool >((const std::pair< cs::point_set,bool > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1filtered_1successors_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::predsucc_filter *arg2 = 0 ;
  cs::pdg_edge_kind arg3 ;
  size_t arg4 ;
  cs::pdg_edge_kind *argp3 ;
  SwigValueWrapper< std::pair< cs::mutable_set< cs::point >,bool > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::predsucc_filter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::predsucc_filter & reference is null");
    return 0;
  } 
  argp3 = *(cs::pdg_edge_kind **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::pdg_edge_kind");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (size_t)jarg4; 
  {
    try {
      result = (arg1)->filtered_successors_java(*arg2,arg3,arg4); 
    }
    /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
    catch (cs::filtered_predsucc_swig_exc &) {
      /* exception has already been thrown, we just need to unwind
                       * the stack.
                       */
      return 0;
    }
  }
  *(std::pair< cs::point_set,bool > **)&jresult = new std::pair< cs::point_set,bool >((const std::pair< cs::point_set,bool > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1filtered_1successors_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::predsucc_filter *arg2 = 0 ;
  cs::pdg_edge_kind arg3 ;
  cs::pdg_edge_kind *argp3 ;
  SwigValueWrapper< std::pair< cs::mutable_set< cs::point >,bool > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::predsucc_filter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::predsucc_filter & reference is null");
    return 0;
  } 
  argp3 = *(cs::pdg_edge_kind **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::pdg_edge_kind");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (arg1)->filtered_successors_java(*arg2,arg3); 
    }
    /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
    catch (cs::filtered_predsucc_swig_exc &) {
      /* exception has already been thrown, we just need to unwind
                       * the stack.
                       */
      return 0;
    }
  }
  *(std::pair< cs::point_set,bool > **)&jresult = new std::pair< cs::point_set,bool >((const std::pair< cs::point_set,bool > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1mixin_1filtered_1successors_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  cs::predsucc_filter *arg2 = 0 ;
  SwigValueWrapper< std::pair< cs::mutable_set< cs::point >,bool > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  arg2 = *(cs::predsucc_filter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::predsucc_filter & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->filtered_successors_java(*arg2); 
    }
    /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
    catch (cs::filtered_predsucc_swig_exc &) {
      /* exception has already been thrown, we just need to unwind
                       * the stack.
                       */
      return 0;
    }
  }
  *(std::pair< cs::point_set,bool > **)&jresult = new std::pair< cs::point_set,bool >((const std::pair< cs::point_set,bool > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1point_1set_1mixin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::set_mixin< cs::mutable_set< cs::point > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::point > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::point > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1point_1set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::point > *arg1 = 0 ;
  cs::mutable_set< cs::point > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::point > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::mutable_set< cs::point > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cs::mutable_set< cs::point > *)new cs::mutable_set< cs::point >((cs::mutable_set< cs::point > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::point > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1kind(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::point > *arg1 = (cs::mutable_set< cs::point > *) 0 ;
  SwigValueWrapper< cs::set_kind > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::point > **)&jarg1; 
  {
    try {
      result = ((cs::mutable_set< cs::point > const *)arg1)->kind();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::set_kind **)&jresult = new cs::set_kind((const cs::set_kind &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::point > *arg1 = (cs::mutable_set< cs::point > *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< cs::point > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::point > **)&jarg1; 
  {
    try {
      result = ((cs::mutable_set< cs::point > const *)arg1)->begin();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::point >::iterator **)&jresult = new cs::mutable_set< cs::point >::iterator((const cs::mutable_set< cs::point >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::point > *arg1 = (cs::mutable_set< cs::point > *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< cs::point > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::point > **)&jarg1; 
  {
    try {
      result = ((cs::mutable_set< cs::point > const *)arg1)->end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::point >::iterator **)&jresult = new cs::mutable_set< cs::point >::iterator((const cs::mutable_set< cs::point >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1cbegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::point > *arg1 = (cs::mutable_set< cs::point > *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< cs::point > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::point > **)&jarg1; 
  {
    try {
      result = ((cs::mutable_set< cs::point > const *)arg1)->cbegin();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::point >::iterator **)&jresult = new cs::mutable_set< cs::point >::iterator((const cs::mutable_set< cs::point >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1cend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::point > *arg1 = (cs::mutable_set< cs::point > *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< cs::point > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::point > **)&jarg1; 
  {
    try {
      result = ((cs::mutable_set< cs::point > const *)arg1)->cend();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::point >::iterator **)&jresult = new cs::mutable_set< cs::point >::iterator((const cs::mutable_set< cs::point >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_point_1set_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::mutable_set< cs::point > *arg1 = (cs::mutable_set< cs::point > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::point > **)&jarg1; 
  {
    try {
      result = (bool)((cs::mutable_set< cs::point > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::point > *arg1 = (cs::mutable_set< cs::point > *) 0 ;
  cs::mutable_set< cs::point >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::point > **)&jarg1; 
  {
    try {
      result = ((cs::mutable_set< cs::point > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::point > *arg1 = (cs::mutable_set< cs::point > *) 0 ;
  cs::point *arg2 = 0 ;
  cs::mutable_set< cs::point >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::point > **)&jarg1; 
  arg2 = *(cs::point **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::point const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::mutable_set< cs::point > const *)arg1)->count((cs::point const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::point > *arg1 = (cs::mutable_set< cs::point > *) 0 ;
  cs::point *arg2 = 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< cs::point > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::point > **)&jarg1; 
  arg2 = *(cs::point **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::point const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::mutable_set< cs::point > const *)arg1)->find((cs::point const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::point >::const_iterator **)&jresult = new cs::mutable_set< cs::point >::const_iterator((const cs::mutable_set< cs::point >::const_iterator &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_point_1set_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::mutable_set< cs::point > *arg1 = (cs::mutable_set< cs::point > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::point > **)&jarg1; 
  result = (int)((cs::mutable_set< cs::point > const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1to_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::point > *arg1 = (cs::mutable_set< cs::point > *) 0 ;
  std::vector< cs::point > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::point > **)&jarg1; 
  {
    try {
      result = ((cs::mutable_set< cs::point > const *)arg1)->to_vector();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::point > **)&jresult = new std::vector< cs::point >((const std::vector< cs::point > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1point_1set_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::point > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (cs::mutable_set< cs::point > *)new cs::mutable_set< cs::point >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::point > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1point_1set_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::set_kind > arg1 ;
  cs::set_kind *argp1 ;
  cs::mutable_set< cs::point > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(cs::set_kind **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::set_kind");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (cs::mutable_set< cs::point > *)new cs::mutable_set< cs::point >(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::point > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1point_1set_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::point > *arg1 = 0 ;
  cs::mutable_set< cs::point > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::point > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::point > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cs::mutable_set< cs::point > *)new cs::mutable_set< cs::point >((std::vector< cs::point > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::point > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_point_1set_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::mutable_set< cs::point > *arg1 = (cs::mutable_set< cs::point > *) 0 ;
  cs::point *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::point > **)&jarg1; 
  arg2 = *(cs::point **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::point const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->add((cs::point const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1erase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::point > *arg1 = (cs::mutable_set< cs::point > *) 0 ;
  cs::point *arg2 = 0 ;
  cs::mutable_set< cs::point >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::point > **)&jarg1; 
  arg2 = *(cs::point **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::point const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->erase((cs::point const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_point_1set_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::mutable_set< cs::point > *arg1 = (cs::mutable_set< cs::point > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::point > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1union_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::point > *arg1 = (cs::mutable_set< cs::point > *) 0 ;
  cs::mutable_set< cs::point > *arg2 = 0 ;
  cs::mutable_set< cs::point > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::point > **)&jarg1; 
  arg2 = *(cs::mutable_set< cs::point > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::mutable_set< cs::point > const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::mutable_set< cs::point > const *)arg1)->union_((cs::mutable_set< cs::point > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::point > **)&jresult = new cs::mutable_set< cs::point >((const cs::mutable_set< cs::point > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_point_1set_1union_1p(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cs::mutable_set< cs::point > *arg1 = (cs::mutable_set< cs::point > *) 0 ;
  cs::mutable_set< cs::point > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::point > **)&jarg1; 
  arg2 = *(cs::mutable_set< cs::point > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::mutable_set< cs::point > const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->union_p((cs::mutable_set< cs::point > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1intersect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::point > *arg1 = (cs::mutable_set< cs::point > *) 0 ;
  cs::mutable_set< cs::point > *arg2 = 0 ;
  cs::mutable_set< cs::point > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::point > **)&jarg1; 
  arg2 = *(cs::mutable_set< cs::point > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::mutable_set< cs::point > const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::mutable_set< cs::point > const *)arg1)->intersect((cs::mutable_set< cs::point > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::point > **)&jresult = new cs::mutable_set< cs::point >((const cs::mutable_set< cs::point > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1subtract(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::point > *arg1 = (cs::mutable_set< cs::point > *) 0 ;
  cs::mutable_set< cs::point > *arg2 = 0 ;
  cs::mutable_set< cs::point > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::point > **)&jarg1; 
  arg2 = *(cs::mutable_set< cs::point > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::mutable_set< cs::point > const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::mutable_set< cs::point > const *)arg1)->subtract((cs::mutable_set< cs::point > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::point > **)&jresult = new cs::mutable_set< cs::point >((const cs::mutable_set< cs::point > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_point_1set_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::mutable_set< cs::point > *arg1 = (cs::mutable_set< cs::point > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::point > **)&jarg1; 
  {
    try {
      result = ((cs::mutable_set< cs::point > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_point_1set_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::mutable_set< cs::point > *arg1 = (cs::mutable_set< cs::point > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::point > **)&jarg1; 
  result = ((cs::mutable_set< cs::point > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_point_1set_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::mutable_set< cs::point > *arg1 = (cs::mutable_set< cs::point > *) 0 ;
  cs::mutable_set< cs::point > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::point > **)&jarg1; 
  arg2 = *(cs::mutable_set< cs::point > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::mutable_set< cs::point > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::mutable_set< cs::point > const *)arg1)->operator ==((cs::mutable_set< cs::point > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1point_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::mutable_set< cs::point > *arg1 = (cs::mutable_set< cs::point > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::mutable_set< cs::point > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1set_1mixin_1to_1point_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::int_pair > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::int_pair > > *) 0 ;
  SwigValueWrapper< cs::compunit > arg2 ;
  cs::compunit *argp2 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::int_pair > > **)&jarg1; 
  argp2 = *(cs::compunit **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::compunit");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::int_pair > > const *)arg1)->to_point_set(arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1int_1pair_1set_1mixin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::set_mixin< cs::mutable_set< cs::int_pair > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::int_pair > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::int_pair > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1int_1pair_1set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::int_pair > *arg1 = 0 ;
  cs::mutable_set< cs::int_pair > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::int_pair > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::mutable_set< cs::int_pair > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cs::mutable_set< cs::int_pair > *)new cs::mutable_set< cs::int_pair >((cs::mutable_set< cs::int_pair > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::int_pair > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1set_1kind(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::int_pair > *arg1 = (cs::mutable_set< cs::int_pair > *) 0 ;
  SwigValueWrapper< cs::set_kind > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::int_pair > **)&jarg1; 
  {
    try {
      result = ((cs::mutable_set< cs::int_pair > const *)arg1)->kind();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::set_kind **)&jresult = new cs::set_kind((const cs::set_kind &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1set_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::int_pair > *arg1 = (cs::mutable_set< cs::int_pair > *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< std::pair< unsigned int,unsigned int > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::int_pair > **)&jarg1; 
  {
    try {
      result = ((cs::mutable_set< cs::int_pair > const *)arg1)->begin();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< std::pair< unsigned int,unsigned int > >::iterator **)&jresult = new cs::mutable_set< std::pair< unsigned int,unsigned int > >::iterator((const cs::mutable_set< std::pair< unsigned int,unsigned int > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1set_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::int_pair > *arg1 = (cs::mutable_set< cs::int_pair > *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< std::pair< unsigned int,unsigned int > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::int_pair > **)&jarg1; 
  {
    try {
      result = ((cs::mutable_set< cs::int_pair > const *)arg1)->end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< std::pair< unsigned int,unsigned int > >::iterator **)&jresult = new cs::mutable_set< std::pair< unsigned int,unsigned int > >::iterator((const cs::mutable_set< std::pair< unsigned int,unsigned int > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1set_1cbegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::int_pair > *arg1 = (cs::mutable_set< cs::int_pair > *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< std::pair< unsigned int,unsigned int > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::int_pair > **)&jarg1; 
  {
    try {
      result = ((cs::mutable_set< cs::int_pair > const *)arg1)->cbegin();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< std::pair< unsigned int,unsigned int > >::iterator **)&jresult = new cs::mutable_set< std::pair< unsigned int,unsigned int > >::iterator((const cs::mutable_set< std::pair< unsigned int,unsigned int > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1set_1cend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::int_pair > *arg1 = (cs::mutable_set< cs::int_pair > *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< std::pair< unsigned int,unsigned int > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::int_pair > **)&jarg1; 
  {
    try {
      result = ((cs::mutable_set< cs::int_pair > const *)arg1)->cend();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< std::pair< unsigned int,unsigned int > >::iterator **)&jresult = new cs::mutable_set< std::pair< unsigned int,unsigned int > >::iterator((const cs::mutable_set< std::pair< unsigned int,unsigned int > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1set_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::mutable_set< cs::int_pair > *arg1 = (cs::mutable_set< cs::int_pair > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::int_pair > **)&jarg1; 
  {
    try {
      result = (bool)((cs::mutable_set< cs::int_pair > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1set_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::int_pair > *arg1 = (cs::mutable_set< cs::int_pair > *) 0 ;
  cs::mutable_set< std::pair< unsigned int,unsigned int > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::int_pair > **)&jarg1; 
  {
    try {
      result = ((cs::mutable_set< cs::int_pair > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1set_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::int_pair > *arg1 = (cs::mutable_set< cs::int_pair > *) 0 ;
  std::pair< unsigned int,unsigned int > *arg2 = 0 ;
  cs::mutable_set< std::pair< unsigned int,unsigned int > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::int_pair > **)&jarg1; 
  arg2 = *(std::pair< unsigned int,unsigned int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< unsigned int,unsigned int > const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::mutable_set< cs::int_pair > const *)arg1)->count((std::pair< unsigned int,unsigned int > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1set_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::int_pair > *arg1 = (cs::mutable_set< cs::int_pair > *) 0 ;
  std::pair< unsigned int,unsigned int > *arg2 = 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< std::pair< unsigned int,unsigned int > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::int_pair > **)&jarg1; 
  arg2 = *(std::pair< unsigned int,unsigned int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< unsigned int,unsigned int > const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::mutable_set< cs::int_pair > const *)arg1)->find((std::pair< unsigned int,unsigned int > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< std::pair< unsigned int,unsigned int > >::const_iterator **)&jresult = new cs::mutable_set< std::pair< unsigned int,unsigned int > >::const_iterator((const cs::mutable_set< std::pair< unsigned int,unsigned int > >::const_iterator &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1set_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::mutable_set< cs::int_pair > *arg1 = (cs::mutable_set< cs::int_pair > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::int_pair > **)&jarg1; 
  result = (int)((cs::mutable_set< cs::int_pair > const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1set_1to_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::int_pair > *arg1 = (cs::mutable_set< cs::int_pair > *) 0 ;
  std::vector< std::pair< csuint32,csuint32 > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::int_pair > **)&jarg1; 
  {
    try {
      result = ((cs::mutable_set< cs::int_pair > const *)arg1)->to_vector();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< std::pair< csuint32,csuint32 > > **)&jresult = new std::vector< std::pair< csuint32,csuint32 > >((const std::vector< std::pair< csuint32,csuint32 > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1int_1pair_1set_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::int_pair > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (cs::mutable_set< cs::int_pair > *)new cs::mutable_set< cs::int_pair >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::int_pair > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1int_1pair_1set_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::set_kind > arg1 ;
  cs::set_kind *argp1 ;
  cs::mutable_set< cs::int_pair > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(cs::set_kind **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::set_kind");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (cs::mutable_set< cs::int_pair > *)new cs::mutable_set< cs::int_pair >(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::int_pair > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1int_1pair_1set_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< csuint32,csuint32 > > *arg1 = 0 ;
  cs::mutable_set< cs::int_pair > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< csuint32,csuint32 > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< csuint32,csuint32 > > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cs::mutable_set< cs::int_pair > *)new cs::mutable_set< cs::int_pair >((std::vector< std::pair< csuint32,csuint32 > > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::int_pair > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1set_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::mutable_set< cs::int_pair > *arg1 = (cs::mutable_set< cs::int_pair > *) 0 ;
  std::pair< unsigned int,unsigned int > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::int_pair > **)&jarg1; 
  arg2 = *(std::pair< unsigned int,unsigned int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< unsigned int,unsigned int > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->add((std::pair< unsigned int,unsigned int > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1set_1erase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::int_pair > *arg1 = (cs::mutable_set< cs::int_pair > *) 0 ;
  std::pair< unsigned int,unsigned int > *arg2 = 0 ;
  cs::mutable_set< std::pair< unsigned int,unsigned int > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::int_pair > **)&jarg1; 
  arg2 = *(std::pair< unsigned int,unsigned int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< unsigned int,unsigned int > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->erase((std::pair< unsigned int,unsigned int > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1set_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::mutable_set< cs::int_pair > *arg1 = (cs::mutable_set< cs::int_pair > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::int_pair > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1set_1union_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::int_pair > *arg1 = (cs::mutable_set< cs::int_pair > *) 0 ;
  cs::mutable_set< cs::int_pair > *arg2 = 0 ;
  cs::mutable_set< cs::int_pair > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::int_pair > **)&jarg1; 
  arg2 = *(cs::mutable_set< cs::int_pair > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::mutable_set< cs::int_pair > const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::mutable_set< cs::int_pair > const *)arg1)->union_((cs::mutable_set< cs::int_pair > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::int_pair > **)&jresult = new cs::mutable_set< cs::int_pair >((const cs::mutable_set< cs::int_pair > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1set_1union_1p(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cs::mutable_set< cs::int_pair > *arg1 = (cs::mutable_set< cs::int_pair > *) 0 ;
  cs::mutable_set< cs::int_pair > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::int_pair > **)&jarg1; 
  arg2 = *(cs::mutable_set< cs::int_pair > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::mutable_set< cs::int_pair > const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->union_p((cs::mutable_set< cs::int_pair > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1set_1intersect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::int_pair > *arg1 = (cs::mutable_set< cs::int_pair > *) 0 ;
  cs::mutable_set< cs::int_pair > *arg2 = 0 ;
  cs::mutable_set< cs::int_pair > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::int_pair > **)&jarg1; 
  arg2 = *(cs::mutable_set< cs::int_pair > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::mutable_set< cs::int_pair > const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::mutable_set< cs::int_pair > const *)arg1)->intersect((cs::mutable_set< cs::int_pair > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::int_pair > **)&jresult = new cs::mutable_set< cs::int_pair >((const cs::mutable_set< cs::int_pair > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1set_1subtract(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::int_pair > *arg1 = (cs::mutable_set< cs::int_pair > *) 0 ;
  cs::mutable_set< cs::int_pair > *arg2 = 0 ;
  cs::mutable_set< cs::int_pair > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::int_pair > **)&jarg1; 
  arg2 = *(cs::mutable_set< cs::int_pair > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::mutable_set< cs::int_pair > const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::mutable_set< cs::int_pair > const *)arg1)->subtract((cs::mutable_set< cs::int_pair > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::int_pair > **)&jresult = new cs::mutable_set< cs::int_pair >((const cs::mutable_set< cs::int_pair > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1set_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::mutable_set< cs::int_pair > *arg1 = (cs::mutable_set< cs::int_pair > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::int_pair > **)&jarg1; 
  {
    try {
      result = ((cs::mutable_set< cs::int_pair > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1set_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::mutable_set< cs::int_pair > *arg1 = (cs::mutable_set< cs::int_pair > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::int_pair > **)&jarg1; 
  result = ((cs::mutable_set< cs::int_pair > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1set_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::mutable_set< cs::int_pair > *arg1 = (cs::mutable_set< cs::int_pair > *) 0 ;
  cs::mutable_set< cs::int_pair > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::int_pair > **)&jarg1; 
  arg2 = *(cs::mutable_set< cs::int_pair > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::mutable_set< cs::int_pair > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::mutable_set< cs::int_pair > const *)arg1)->operator ==((cs::mutable_set< cs::int_pair > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1int_1pair_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::mutable_set< cs::int_pair > *arg1 = (cs::mutable_set< cs::int_pair > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::mutable_set< cs::int_pair > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1mixin_1used_1points(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::symbol > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::symbol > > *) 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::symbol > > **)&jarg1; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::symbol > > const *)arg1)->used_points();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1mixin_1killed_1points(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::symbol > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::symbol > > *) 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::symbol > > **)&jarg1; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::symbol > > const *)arg1)->killed_points();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1mixin_1cond_1killed_1points(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::symbol > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::symbol > > *) 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::symbol > > **)&jarg1; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::symbol > > const *)arg1)->cond_killed_points();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1mixin_1may_1killed_1points(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::set_mixin< cs::mutable_set< cs::symbol > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::symbol > > *) 0 ;
  cs::point_set result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::symbol > > **)&jarg1; 
  {
    try {
      result = ((cs::set_mixin< cs::mutable_set< cs::symbol > > const *)arg1)->may_killed_points();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::point_set **)&jresult = new cs::point_set((const cs::point_set &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1symbol_1set_1mixin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::set_mixin< cs::mutable_set< cs::symbol > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::symbol > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::symbol > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1symbol_1set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::symbol > *arg1 = 0 ;
  cs::mutable_set< cs::symbol > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::symbol > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::mutable_set< cs::symbol > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cs::mutable_set< cs::symbol > *)new cs::mutable_set< cs::symbol >((cs::mutable_set< cs::symbol > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::symbol > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1kind(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::symbol > *arg1 = (cs::mutable_set< cs::symbol > *) 0 ;
  SwigValueWrapper< cs::set_kind > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::symbol > **)&jarg1; 
  {
    try {
      result = ((cs::mutable_set< cs::symbol > const *)arg1)->kind();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::set_kind **)&jresult = new cs::set_kind((const cs::set_kind &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::symbol > *arg1 = (cs::mutable_set< cs::symbol > *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::symbol > **)&jarg1; 
  {
    try {
      result = ((cs::mutable_set< cs::symbol > const *)arg1)->begin();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::symbol >::iterator **)&jresult = new cs::mutable_set< cs::symbol >::iterator((const cs::mutable_set< cs::symbol >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::symbol > *arg1 = (cs::mutable_set< cs::symbol > *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::symbol > **)&jarg1; 
  {
    try {
      result = ((cs::mutable_set< cs::symbol > const *)arg1)->end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::symbol >::iterator **)&jresult = new cs::mutable_set< cs::symbol >::iterator((const cs::mutable_set< cs::symbol >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1cbegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::symbol > *arg1 = (cs::mutable_set< cs::symbol > *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::symbol > **)&jarg1; 
  {
    try {
      result = ((cs::mutable_set< cs::symbol > const *)arg1)->cbegin();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::symbol >::iterator **)&jresult = new cs::mutable_set< cs::symbol >::iterator((const cs::mutable_set< cs::symbol >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1cend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::symbol > *arg1 = (cs::mutable_set< cs::symbol > *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::symbol > **)&jarg1; 
  {
    try {
      result = ((cs::mutable_set< cs::symbol > const *)arg1)->cend();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::symbol >::iterator **)&jresult = new cs::mutable_set< cs::symbol >::iterator((const cs::mutable_set< cs::symbol >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::mutable_set< cs::symbol > *arg1 = (cs::mutable_set< cs::symbol > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::symbol > **)&jarg1; 
  {
    try {
      result = (bool)((cs::mutable_set< cs::symbol > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::symbol > *arg1 = (cs::mutable_set< cs::symbol > *) 0 ;
  cs::mutable_set< cs::symbol >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::symbol > **)&jarg1; 
  {
    try {
      result = ((cs::mutable_set< cs::symbol > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::symbol > *arg1 = (cs::mutable_set< cs::symbol > *) 0 ;
  cs::symbol *arg2 = 0 ;
  cs::mutable_set< cs::symbol >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::symbol > **)&jarg1; 
  arg2 = *(cs::symbol **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::symbol const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::mutable_set< cs::symbol > const *)arg1)->count((cs::symbol const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::symbol > *arg1 = (cs::mutable_set< cs::symbol > *) 0 ;
  cs::symbol *arg2 = 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< cs::symbol > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::symbol > **)&jarg1; 
  arg2 = *(cs::symbol **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::symbol const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::mutable_set< cs::symbol > const *)arg1)->find((cs::symbol const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::symbol >::const_iterator **)&jresult = new cs::mutable_set< cs::symbol >::const_iterator((const cs::mutable_set< cs::symbol >::const_iterator &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::mutable_set< cs::symbol > *arg1 = (cs::mutable_set< cs::symbol > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::symbol > **)&jarg1; 
  result = (int)((cs::mutable_set< cs::symbol > const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1to_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::symbol > *arg1 = (cs::mutable_set< cs::symbol > *) 0 ;
  std::vector< cs::symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::symbol > **)&jarg1; 
  {
    try {
      result = ((cs::mutable_set< cs::symbol > const *)arg1)->to_vector();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::symbol > **)&jresult = new std::vector< cs::symbol >((const std::vector< cs::symbol > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1symbol_1set_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::symbol > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (cs::mutable_set< cs::symbol > *)new cs::mutable_set< cs::symbol >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::symbol > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1symbol_1set_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::set_kind > arg1 ;
  cs::set_kind *argp1 ;
  cs::mutable_set< cs::symbol > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(cs::set_kind **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::set_kind");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (cs::mutable_set< cs::symbol > *)new cs::mutable_set< cs::symbol >(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::symbol > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1symbol_1set_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::symbol > *arg1 = 0 ;
  cs::mutable_set< cs::symbol > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::symbol > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::symbol > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cs::mutable_set< cs::symbol > *)new cs::mutable_set< cs::symbol >((std::vector< cs::symbol > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::symbol > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::mutable_set< cs::symbol > *arg1 = (cs::mutable_set< cs::symbol > *) 0 ;
  cs::symbol *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::symbol > **)&jarg1; 
  arg2 = *(cs::symbol **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::symbol const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->add((cs::symbol const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1erase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::symbol > *arg1 = (cs::mutable_set< cs::symbol > *) 0 ;
  cs::symbol *arg2 = 0 ;
  cs::mutable_set< cs::symbol >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::symbol > **)&jarg1; 
  arg2 = *(cs::symbol **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::symbol const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->erase((cs::symbol const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::mutable_set< cs::symbol > *arg1 = (cs::mutable_set< cs::symbol > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::symbol > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1union_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::symbol > *arg1 = (cs::mutable_set< cs::symbol > *) 0 ;
  cs::mutable_set< cs::symbol > *arg2 = 0 ;
  cs::mutable_set< cs::symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::symbol > **)&jarg1; 
  arg2 = *(cs::mutable_set< cs::symbol > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::mutable_set< cs::symbol > const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::mutable_set< cs::symbol > const *)arg1)->union_((cs::mutable_set< cs::symbol > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::symbol > **)&jresult = new cs::mutable_set< cs::symbol >((const cs::mutable_set< cs::symbol > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1union_1p(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cs::mutable_set< cs::symbol > *arg1 = (cs::mutable_set< cs::symbol > *) 0 ;
  cs::mutable_set< cs::symbol > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::symbol > **)&jarg1; 
  arg2 = *(cs::mutable_set< cs::symbol > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::mutable_set< cs::symbol > const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->union_p((cs::mutable_set< cs::symbol > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1intersect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::symbol > *arg1 = (cs::mutable_set< cs::symbol > *) 0 ;
  cs::mutable_set< cs::symbol > *arg2 = 0 ;
  cs::mutable_set< cs::symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::symbol > **)&jarg1; 
  arg2 = *(cs::mutable_set< cs::symbol > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::mutable_set< cs::symbol > const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::mutable_set< cs::symbol > const *)arg1)->intersect((cs::mutable_set< cs::symbol > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::symbol > **)&jresult = new cs::mutable_set< cs::symbol >((const cs::mutable_set< cs::symbol > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1subtract(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::symbol > *arg1 = (cs::mutable_set< cs::symbol > *) 0 ;
  cs::mutable_set< cs::symbol > *arg2 = 0 ;
  cs::mutable_set< cs::symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::symbol > **)&jarg1; 
  arg2 = *(cs::mutable_set< cs::symbol > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::mutable_set< cs::symbol > const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::mutable_set< cs::symbol > const *)arg1)->subtract((cs::mutable_set< cs::symbol > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::symbol > **)&jresult = new cs::mutable_set< cs::symbol >((const cs::mutable_set< cs::symbol > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::mutable_set< cs::symbol > *arg1 = (cs::mutable_set< cs::symbol > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::symbol > **)&jarg1; 
  {
    try {
      result = ((cs::mutable_set< cs::symbol > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::mutable_set< cs::symbol > *arg1 = (cs::mutable_set< cs::symbol > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::symbol > **)&jarg1; 
  result = ((cs::mutable_set< cs::symbol > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::mutable_set< cs::symbol > *arg1 = (cs::mutable_set< cs::symbol > *) 0 ;
  cs::mutable_set< cs::symbol > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::symbol > **)&jarg1; 
  arg2 = *(cs::mutable_set< cs::symbol > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::mutable_set< cs::symbol > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::mutable_set< cs::symbol > const *)arg1)->operator ==((cs::mutable_set< cs::symbol > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1symbol_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::mutable_set< cs::symbol > *arg1 = (cs::mutable_set< cs::symbol > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::mutable_set< cs::symbol > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1basic_1block_1cfg_1edge_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::basic_block_cfg_edge > *arg1 = 0 ;
  cs::immutable_set< cs::basic_block_cfg_edge > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::basic_block_cfg_edge > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::immutable_set< cs::basic_block_cfg_edge > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cs::immutable_set< cs::basic_block_cfg_edge > *)new cs::immutable_set< cs::basic_block_cfg_edge >((cs::immutable_set< cs::basic_block_cfg_edge > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::immutable_set< cs::basic_block_cfg_edge > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1cfg_1edge_1set_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::basic_block_cfg_edge > *arg1 = (cs::immutable_set< cs::basic_block_cfg_edge > *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< std::pair< cs::basic_block,cs::edge_label > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::basic_block_cfg_edge > **)&jarg1; 
  {
    try {
      result = ((cs::immutable_set< cs::basic_block_cfg_edge > const *)arg1)->begin();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::immutable_set< std::pair< cs::basic_block,cs::edge_label > >::iterator **)&jresult = new cs::immutable_set< std::pair< cs::basic_block,cs::edge_label > >::iterator((const cs::immutable_set< std::pair< cs::basic_block,cs::edge_label > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1cfg_1edge_1set_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::basic_block_cfg_edge > *arg1 = (cs::immutable_set< cs::basic_block_cfg_edge > *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< std::pair< cs::basic_block,cs::edge_label > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::basic_block_cfg_edge > **)&jarg1; 
  {
    try {
      result = ((cs::immutable_set< cs::basic_block_cfg_edge > const *)arg1)->end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::immutable_set< std::pair< cs::basic_block,cs::edge_label > >::iterator **)&jresult = new cs::immutable_set< std::pair< cs::basic_block,cs::edge_label > >::iterator((const cs::immutable_set< std::pair< cs::basic_block,cs::edge_label > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1cfg_1edge_1set_1cbegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::basic_block_cfg_edge > *arg1 = (cs::immutable_set< cs::basic_block_cfg_edge > *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< std::pair< cs::basic_block,cs::edge_label > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::basic_block_cfg_edge > **)&jarg1; 
  {
    try {
      result = ((cs::immutable_set< cs::basic_block_cfg_edge > const *)arg1)->cbegin();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::immutable_set< std::pair< cs::basic_block,cs::edge_label > >::iterator **)&jresult = new cs::immutable_set< std::pair< cs::basic_block,cs::edge_label > >::iterator((const cs::immutable_set< std::pair< cs::basic_block,cs::edge_label > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1cfg_1edge_1set_1cend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::basic_block_cfg_edge > *arg1 = (cs::immutable_set< cs::basic_block_cfg_edge > *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< std::pair< cs::basic_block,cs::edge_label > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::basic_block_cfg_edge > **)&jarg1; 
  {
    try {
      result = ((cs::immutable_set< cs::basic_block_cfg_edge > const *)arg1)->cend();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::immutable_set< std::pair< cs::basic_block,cs::edge_label > >::iterator **)&jresult = new cs::immutable_set< std::pair< cs::basic_block,cs::edge_label > >::iterator((const cs::immutable_set< std::pair< cs::basic_block,cs::edge_label > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1cfg_1edge_1set_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::immutable_set< cs::basic_block_cfg_edge > *arg1 = (cs::immutable_set< cs::basic_block_cfg_edge > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::basic_block_cfg_edge > **)&jarg1; 
  {
    try {
      result = (bool)((cs::immutable_set< cs::basic_block_cfg_edge > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1cfg_1edge_1set_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::basic_block_cfg_edge > *arg1 = (cs::immutable_set< cs::basic_block_cfg_edge > *) 0 ;
  cs::immutable_set< std::pair< cs::basic_block,cs::edge_label > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::basic_block_cfg_edge > **)&jarg1; 
  {
    try {
      result = ((cs::immutable_set< cs::basic_block_cfg_edge > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1cfg_1edge_1set_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::basic_block_cfg_edge > *arg1 = (cs::immutable_set< cs::basic_block_cfg_edge > *) 0 ;
  std::pair< cs::basic_block,cs::edge_label > *arg2 = 0 ;
  cs::immutable_set< std::pair< cs::basic_block,cs::edge_label > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::immutable_set< cs::basic_block_cfg_edge > **)&jarg1; 
  arg2 = *(std::pair< cs::basic_block,cs::edge_label > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< cs::basic_block,cs::edge_label > const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::immutable_set< cs::basic_block_cfg_edge > const *)arg1)->count((std::pair< cs::basic_block,cs::edge_label > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1cfg_1edge_1set_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::basic_block_cfg_edge > *arg1 = (cs::immutable_set< cs::basic_block_cfg_edge > *) 0 ;
  std::pair< cs::basic_block,cs::edge_label > *arg2 = 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< std::pair< cs::basic_block,cs::edge_label > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::immutable_set< cs::basic_block_cfg_edge > **)&jarg1; 
  arg2 = *(std::pair< cs::basic_block,cs::edge_label > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< cs::basic_block,cs::edge_label > const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::immutable_set< cs::basic_block_cfg_edge > const *)arg1)->find((std::pair< cs::basic_block,cs::edge_label > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::immutable_set< std::pair< cs::basic_block,cs::edge_label > >::const_iterator **)&jresult = new cs::immutable_set< std::pair< cs::basic_block,cs::edge_label > >::const_iterator((const cs::immutable_set< std::pair< cs::basic_block,cs::edge_label > >::const_iterator &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1cfg_1edge_1set_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::immutable_set< cs::basic_block_cfg_edge > *arg1 = (cs::immutable_set< cs::basic_block_cfg_edge > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::basic_block_cfg_edge > **)&jarg1; 
  result = (int)((cs::immutable_set< cs::basic_block_cfg_edge > const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1cfg_1edge_1set_1to_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::basic_block_cfg_edge > *arg1 = (cs::immutable_set< cs::basic_block_cfg_edge > *) 0 ;
  std::vector< std::pair< cs::basic_block,cs::edge_label > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::basic_block_cfg_edge > **)&jarg1; 
  {
    try {
      result = ((cs::immutable_set< cs::basic_block_cfg_edge > const *)arg1)->to_vector();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< std::pair< cs::basic_block,cs::edge_label > > **)&jresult = new std::vector< std::pair< cs::basic_block,cs::edge_label > >((const std::vector< std::pair< cs::basic_block,cs::edge_label > > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1cfg_1edge_1set_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::immutable_set< cs::basic_block_cfg_edge > *arg1 = (cs::immutable_set< cs::basic_block_cfg_edge > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::basic_block_cfg_edge > **)&jarg1; 
  {
    try {
      result = ((cs::immutable_set< cs::basic_block_cfg_edge > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1cfg_1edge_1set_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::immutable_set< cs::basic_block_cfg_edge > *arg1 = (cs::immutable_set< cs::basic_block_cfg_edge > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::basic_block_cfg_edge > **)&jarg1; 
  result = ((cs::immutable_set< cs::basic_block_cfg_edge > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1cfg_1edge_1set_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::immutable_set< cs::basic_block_cfg_edge > *arg1 = (cs::immutable_set< cs::basic_block_cfg_edge > *) 0 ;
  cs::immutable_set< cs::basic_block_cfg_edge > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::immutable_set< cs::basic_block_cfg_edge > **)&jarg1; 
  arg2 = *(cs::immutable_set< cs::basic_block_cfg_edge > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::immutable_set< cs::basic_block_cfg_edge > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::immutable_set< cs::basic_block_cfg_edge > const *)arg1)->operator ==((cs::immutable_set< cs::basic_block_cfg_edge > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1basic_1block_1cfg_1edge_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::immutable_set< cs::basic_block_cfg_edge > *arg1 = (cs::immutable_set< cs::basic_block_cfg_edge > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::immutable_set< cs::basic_block_cfg_edge > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1basic_1block_1set_1mixin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::set_mixin< cs::mutable_set< cs::basic_block > > *arg1 = (cs::set_mixin< cs::mutable_set< cs::basic_block > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::set_mixin< cs::mutable_set< cs::basic_block > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1basic_1block_1set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::basic_block > *arg1 = 0 ;
  cs::mutable_set< cs::basic_block > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::basic_block > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::mutable_set< cs::basic_block > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cs::mutable_set< cs::basic_block > *)new cs::mutable_set< cs::basic_block >((cs::mutable_set< cs::basic_block > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::basic_block > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1set_1kind(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::basic_block > *arg1 = (cs::mutable_set< cs::basic_block > *) 0 ;
  SwigValueWrapper< cs::set_kind > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::basic_block > **)&jarg1; 
  {
    try {
      result = ((cs::mutable_set< cs::basic_block > const *)arg1)->kind();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::set_kind **)&jresult = new cs::set_kind((const cs::set_kind &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1set_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::basic_block > *arg1 = (cs::mutable_set< cs::basic_block > *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::basic_block > **)&jarg1; 
  {
    try {
      result = ((cs::mutable_set< cs::basic_block > const *)arg1)->begin();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::basic_block >::iterator **)&jresult = new cs::mutable_set< cs::basic_block >::iterator((const cs::mutable_set< cs::basic_block >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1set_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::basic_block > *arg1 = (cs::mutable_set< cs::basic_block > *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::basic_block > **)&jarg1; 
  {
    try {
      result = ((cs::mutable_set< cs::basic_block > const *)arg1)->end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::basic_block >::iterator **)&jresult = new cs::mutable_set< cs::basic_block >::iterator((const cs::mutable_set< cs::basic_block >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1set_1cbegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::basic_block > *arg1 = (cs::mutable_set< cs::basic_block > *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::basic_block > **)&jarg1; 
  {
    try {
      result = ((cs::mutable_set< cs::basic_block > const *)arg1)->cbegin();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::basic_block >::iterator **)&jresult = new cs::mutable_set< cs::basic_block >::iterator((const cs::mutable_set< cs::basic_block >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1set_1cend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::basic_block > *arg1 = (cs::mutable_set< cs::basic_block > *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::basic_block > **)&jarg1; 
  {
    try {
      result = ((cs::mutable_set< cs::basic_block > const *)arg1)->cend();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::basic_block >::iterator **)&jresult = new cs::mutable_set< cs::basic_block >::iterator((const cs::mutable_set< cs::basic_block >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1set_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::mutable_set< cs::basic_block > *arg1 = (cs::mutable_set< cs::basic_block > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::basic_block > **)&jarg1; 
  {
    try {
      result = (bool)((cs::mutable_set< cs::basic_block > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1set_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::basic_block > *arg1 = (cs::mutable_set< cs::basic_block > *) 0 ;
  cs::mutable_set< cs::basic_block >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::basic_block > **)&jarg1; 
  {
    try {
      result = ((cs::mutable_set< cs::basic_block > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1set_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::basic_block > *arg1 = (cs::mutable_set< cs::basic_block > *) 0 ;
  cs::basic_block *arg2 = 0 ;
  cs::mutable_set< cs::basic_block >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::basic_block > **)&jarg1; 
  arg2 = *(cs::basic_block **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::basic_block const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::mutable_set< cs::basic_block > const *)arg1)->count((cs::basic_block const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1set_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::basic_block > *arg1 = (cs::mutable_set< cs::basic_block > *) 0 ;
  cs::basic_block *arg2 = 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< cs::basic_block > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::basic_block > **)&jarg1; 
  arg2 = *(cs::basic_block **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::basic_block const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::mutable_set< cs::basic_block > const *)arg1)->find((cs::basic_block const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::basic_block >::const_iterator **)&jresult = new cs::mutable_set< cs::basic_block >::const_iterator((const cs::mutable_set< cs::basic_block >::const_iterator &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1set_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::mutable_set< cs::basic_block > *arg1 = (cs::mutable_set< cs::basic_block > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::basic_block > **)&jarg1; 
  result = (int)((cs::mutable_set< cs::basic_block > const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1set_1to_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::basic_block > *arg1 = (cs::mutable_set< cs::basic_block > *) 0 ;
  std::vector< cs::basic_block > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::basic_block > **)&jarg1; 
  {
    try {
      result = ((cs::mutable_set< cs::basic_block > const *)arg1)->to_vector();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< cs::basic_block > **)&jresult = new std::vector< cs::basic_block >((const std::vector< cs::basic_block > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1basic_1block_1set_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::basic_block > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (cs::mutable_set< cs::basic_block > *)new cs::mutable_set< cs::basic_block >();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::basic_block > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1basic_1block_1set_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SwigValueWrapper< cs::set_kind > arg1 ;
  cs::set_kind *argp1 ;
  cs::mutable_set< cs::basic_block > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(cs::set_kind **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cs::set_kind");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (cs::mutable_set< cs::basic_block > *)new cs::mutable_set< cs::basic_block >(arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::basic_block > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1basic_1block_1set_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cs::basic_block > *arg1 = 0 ;
  cs::mutable_set< cs::basic_block > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cs::basic_block > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cs::basic_block > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cs::mutable_set< cs::basic_block > *)new cs::mutable_set< cs::basic_block >((std::vector< cs::basic_block > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::basic_block > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1set_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::mutable_set< cs::basic_block > *arg1 = (cs::mutable_set< cs::basic_block > *) 0 ;
  cs::basic_block *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::basic_block > **)&jarg1; 
  arg2 = *(cs::basic_block **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::basic_block const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->add((cs::basic_block const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1set_1erase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::basic_block > *arg1 = (cs::mutable_set< cs::basic_block > *) 0 ;
  cs::basic_block *arg2 = 0 ;
  cs::mutable_set< cs::basic_block >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::basic_block > **)&jarg1; 
  arg2 = *(cs::basic_block **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::basic_block const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->erase((cs::basic_block const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1set_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cs::mutable_set< cs::basic_block > *arg1 = (cs::mutable_set< cs::basic_block > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::basic_block > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1set_1union_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::basic_block > *arg1 = (cs::mutable_set< cs::basic_block > *) 0 ;
  cs::mutable_set< cs::basic_block > *arg2 = 0 ;
  cs::mutable_set< cs::basic_block > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::basic_block > **)&jarg1; 
  arg2 = *(cs::mutable_set< cs::basic_block > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::mutable_set< cs::basic_block > const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::mutable_set< cs::basic_block > const *)arg1)->union_((cs::mutable_set< cs::basic_block > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::basic_block > **)&jresult = new cs::mutable_set< cs::basic_block >((const cs::mutable_set< cs::basic_block > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1set_1union_1p(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cs::mutable_set< cs::basic_block > *arg1 = (cs::mutable_set< cs::basic_block > *) 0 ;
  cs::mutable_set< cs::basic_block > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::basic_block > **)&jarg1; 
  arg2 = *(cs::mutable_set< cs::basic_block > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::mutable_set< cs::basic_block > const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->union_p((cs::mutable_set< cs::basic_block > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return ;
    }
    /*@SWIG@*/
  }
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1set_1intersect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::basic_block > *arg1 = (cs::mutable_set< cs::basic_block > *) 0 ;
  cs::mutable_set< cs::basic_block > *arg2 = 0 ;
  cs::mutable_set< cs::basic_block > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::basic_block > **)&jarg1; 
  arg2 = *(cs::mutable_set< cs::basic_block > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::mutable_set< cs::basic_block > const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::mutable_set< cs::basic_block > const *)arg1)->intersect((cs::mutable_set< cs::basic_block > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::basic_block > **)&jresult = new cs::mutable_set< cs::basic_block >((const cs::mutable_set< cs::basic_block > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1set_1subtract(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::mutable_set< cs::basic_block > *arg1 = (cs::mutable_set< cs::basic_block > *) 0 ;
  cs::mutable_set< cs::basic_block > *arg2 = 0 ;
  cs::mutable_set< cs::basic_block > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::basic_block > **)&jarg1; 
  arg2 = *(cs::mutable_set< cs::basic_block > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::mutable_set< cs::basic_block > const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::mutable_set< cs::basic_block > const *)arg1)->subtract((cs::mutable_set< cs::basic_block > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::mutable_set< cs::basic_block > **)&jresult = new cs::mutable_set< cs::basic_block >((const cs::mutable_set< cs::basic_block > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1set_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::mutable_set< cs::basic_block > *arg1 = (cs::mutable_set< cs::basic_block > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::basic_block > **)&jarg1; 
  {
    try {
      result = ((cs::mutable_set< cs::basic_block > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1set_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::mutable_set< cs::basic_block > *arg1 = (cs::mutable_set< cs::basic_block > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::mutable_set< cs::basic_block > **)&jarg1; 
  result = ((cs::mutable_set< cs::basic_block > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1set_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::mutable_set< cs::basic_block > *arg1 = (cs::mutable_set< cs::basic_block > *) 0 ;
  cs::mutable_set< cs::basic_block > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::mutable_set< cs::basic_block > **)&jarg1; 
  arg2 = *(cs::mutable_set< cs::basic_block > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::mutable_set< cs::basic_block > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::mutable_set< cs::basic_block > const *)arg1)->operator ==((cs::mutable_set< cs::basic_block > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1basic_1block_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::mutable_set< cs::basic_block > *arg1 = (cs::mutable_set< cs::basic_block > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::mutable_set< cs::basic_block > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1cfg_1edge_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::cfg_edge > *arg1 = 0 ;
  cs::immutable_set< cs::cfg_edge > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::cfg_edge > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::immutable_set< cs::cfg_edge > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cs::immutable_set< cs::cfg_edge > *)new cs::immutable_set< cs::cfg_edge >((cs::immutable_set< cs::cfg_edge > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::immutable_set< cs::cfg_edge > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_cfg_1edge_1set_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::cfg_edge > *arg1 = (cs::immutable_set< cs::cfg_edge > *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< std::pair< cs::point,cs::edge_label > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::cfg_edge > **)&jarg1; 
  {
    try {
      result = ((cs::immutable_set< cs::cfg_edge > const *)arg1)->begin();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::immutable_set< std::pair< cs::point,cs::edge_label > >::iterator **)&jresult = new cs::immutable_set< std::pair< cs::point,cs::edge_label > >::iterator((const cs::immutable_set< std::pair< cs::point,cs::edge_label > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_cfg_1edge_1set_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::cfg_edge > *arg1 = (cs::immutable_set< cs::cfg_edge > *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< std::pair< cs::point,cs::edge_label > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::cfg_edge > **)&jarg1; 
  {
    try {
      result = ((cs::immutable_set< cs::cfg_edge > const *)arg1)->end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::immutable_set< std::pair< cs::point,cs::edge_label > >::iterator **)&jresult = new cs::immutable_set< std::pair< cs::point,cs::edge_label > >::iterator((const cs::immutable_set< std::pair< cs::point,cs::edge_label > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_cfg_1edge_1set_1cbegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::cfg_edge > *arg1 = (cs::immutable_set< cs::cfg_edge > *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< std::pair< cs::point,cs::edge_label > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::cfg_edge > **)&jarg1; 
  {
    try {
      result = ((cs::immutable_set< cs::cfg_edge > const *)arg1)->cbegin();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::immutable_set< std::pair< cs::point,cs::edge_label > >::iterator **)&jresult = new cs::immutable_set< std::pair< cs::point,cs::edge_label > >::iterator((const cs::immutable_set< std::pair< cs::point,cs::edge_label > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_cfg_1edge_1set_1cend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::cfg_edge > *arg1 = (cs::immutable_set< cs::cfg_edge > *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< std::pair< cs::point,cs::edge_label > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::cfg_edge > **)&jarg1; 
  {
    try {
      result = ((cs::immutable_set< cs::cfg_edge > const *)arg1)->cend();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::immutable_set< std::pair< cs::point,cs::edge_label > >::iterator **)&jresult = new cs::immutable_set< std::pair< cs::point,cs::edge_label > >::iterator((const cs::immutable_set< std::pair< cs::point,cs::edge_label > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_cfg_1edge_1set_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::immutable_set< cs::cfg_edge > *arg1 = (cs::immutable_set< cs::cfg_edge > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::cfg_edge > **)&jarg1; 
  {
    try {
      result = (bool)((cs::immutable_set< cs::cfg_edge > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_cfg_1edge_1set_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::cfg_edge > *arg1 = (cs::immutable_set< cs::cfg_edge > *) 0 ;
  cs::immutable_set< std::pair< cs::point,cs::edge_label > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::cfg_edge > **)&jarg1; 
  {
    try {
      result = ((cs::immutable_set< cs::cfg_edge > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_cfg_1edge_1set_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::cfg_edge > *arg1 = (cs::immutable_set< cs::cfg_edge > *) 0 ;
  std::pair< cs::point,cs::edge_label > *arg2 = 0 ;
  cs::immutable_set< std::pair< cs::point,cs::edge_label > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::immutable_set< cs::cfg_edge > **)&jarg1; 
  arg2 = *(std::pair< cs::point,cs::edge_label > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< cs::point,cs::edge_label > const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::immutable_set< cs::cfg_edge > const *)arg1)->count((std::pair< cs::point,cs::edge_label > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_cfg_1edge_1set_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::cfg_edge > *arg1 = (cs::immutable_set< cs::cfg_edge > *) 0 ;
  std::pair< cs::point,cs::edge_label > *arg2 = 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< std::pair< cs::point,cs::edge_label > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::immutable_set< cs::cfg_edge > **)&jarg1; 
  arg2 = *(std::pair< cs::point,cs::edge_label > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< cs::point,cs::edge_label > const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::immutable_set< cs::cfg_edge > const *)arg1)->find((std::pair< cs::point,cs::edge_label > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::immutable_set< std::pair< cs::point,cs::edge_label > >::const_iterator **)&jresult = new cs::immutable_set< std::pair< cs::point,cs::edge_label > >::const_iterator((const cs::immutable_set< std::pair< cs::point,cs::edge_label > >::const_iterator &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_cfg_1edge_1set_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::immutable_set< cs::cfg_edge > *arg1 = (cs::immutable_set< cs::cfg_edge > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::cfg_edge > **)&jarg1; 
  result = (int)((cs::immutable_set< cs::cfg_edge > const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_cfg_1edge_1set_1to_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::cfg_edge > *arg1 = (cs::immutable_set< cs::cfg_edge > *) 0 ;
  std::vector< std::pair< cs::point,cs::edge_label > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::cfg_edge > **)&jarg1; 
  {
    try {
      result = ((cs::immutable_set< cs::cfg_edge > const *)arg1)->to_vector();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< std::pair< cs::point,cs::edge_label > > **)&jresult = new std::vector< std::pair< cs::point,cs::edge_label > >((const std::vector< std::pair< cs::point,cs::edge_label > > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_cfg_1edge_1set_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::immutable_set< cs::cfg_edge > *arg1 = (cs::immutable_set< cs::cfg_edge > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::cfg_edge > **)&jarg1; 
  {
    try {
      result = ((cs::immutable_set< cs::cfg_edge > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_cfg_1edge_1set_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::immutable_set< cs::cfg_edge > *arg1 = (cs::immutable_set< cs::cfg_edge > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::cfg_edge > **)&jarg1; 
  result = ((cs::immutable_set< cs::cfg_edge > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_cfg_1edge_1set_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::immutable_set< cs::cfg_edge > *arg1 = (cs::immutable_set< cs::cfg_edge > *) 0 ;
  cs::immutable_set< cs::cfg_edge > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::immutable_set< cs::cfg_edge > **)&jarg1; 
  arg2 = *(cs::immutable_set< cs::cfg_edge > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::immutable_set< cs::cfg_edge > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::immutable_set< cs::cfg_edge > const *)arg1)->operator ==((cs::immutable_set< cs::cfg_edge > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1cfg_1edge_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::immutable_set< cs::cfg_edge > *arg1 = (cs::immutable_set< cs::cfg_edge > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::immutable_set< cs::cfg_edge > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1labeled_1pdg_1edge_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::labeled_pdg_edge > *arg1 = 0 ;
  cs::immutable_set< cs::labeled_pdg_edge > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::labeled_pdg_edge > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::immutable_set< cs::labeled_pdg_edge > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cs::immutable_set< cs::labeled_pdg_edge > *)new cs::immutable_set< cs::labeled_pdg_edge >((cs::immutable_set< cs::labeled_pdg_edge > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::immutable_set< cs::labeled_pdg_edge > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_labeled_1pdg_1edge_1set_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::labeled_pdg_edge > *arg1 = (cs::immutable_set< cs::labeled_pdg_edge > *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< std::pair< cs::point,cs::pdg_edge_label > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::labeled_pdg_edge > **)&jarg1; 
  {
    try {
      result = ((cs::immutable_set< cs::labeled_pdg_edge > const *)arg1)->begin();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::immutable_set< std::pair< cs::point,cs::pdg_edge_label > >::iterator **)&jresult = new cs::immutable_set< std::pair< cs::point,cs::pdg_edge_label > >::iterator((const cs::immutable_set< std::pair< cs::point,cs::pdg_edge_label > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_labeled_1pdg_1edge_1set_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::labeled_pdg_edge > *arg1 = (cs::immutable_set< cs::labeled_pdg_edge > *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< std::pair< cs::point,cs::pdg_edge_label > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::labeled_pdg_edge > **)&jarg1; 
  {
    try {
      result = ((cs::immutable_set< cs::labeled_pdg_edge > const *)arg1)->end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::immutable_set< std::pair< cs::point,cs::pdg_edge_label > >::iterator **)&jresult = new cs::immutable_set< std::pair< cs::point,cs::pdg_edge_label > >::iterator((const cs::immutable_set< std::pair< cs::point,cs::pdg_edge_label > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_labeled_1pdg_1edge_1set_1cbegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::labeled_pdg_edge > *arg1 = (cs::immutable_set< cs::labeled_pdg_edge > *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< std::pair< cs::point,cs::pdg_edge_label > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::labeled_pdg_edge > **)&jarg1; 
  {
    try {
      result = ((cs::immutable_set< cs::labeled_pdg_edge > const *)arg1)->cbegin();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::immutable_set< std::pair< cs::point,cs::pdg_edge_label > >::iterator **)&jresult = new cs::immutable_set< std::pair< cs::point,cs::pdg_edge_label > >::iterator((const cs::immutable_set< std::pair< cs::point,cs::pdg_edge_label > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_labeled_1pdg_1edge_1set_1cend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::labeled_pdg_edge > *arg1 = (cs::immutable_set< cs::labeled_pdg_edge > *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< std::pair< cs::point,cs::pdg_edge_label > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::labeled_pdg_edge > **)&jarg1; 
  {
    try {
      result = ((cs::immutable_set< cs::labeled_pdg_edge > const *)arg1)->cend();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::immutable_set< std::pair< cs::point,cs::pdg_edge_label > >::iterator **)&jresult = new cs::immutable_set< std::pair< cs::point,cs::pdg_edge_label > >::iterator((const cs::immutable_set< std::pair< cs::point,cs::pdg_edge_label > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_labeled_1pdg_1edge_1set_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::immutable_set< cs::labeled_pdg_edge > *arg1 = (cs::immutable_set< cs::labeled_pdg_edge > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::labeled_pdg_edge > **)&jarg1; 
  {
    try {
      result = (bool)((cs::immutable_set< cs::labeled_pdg_edge > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_labeled_1pdg_1edge_1set_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::labeled_pdg_edge > *arg1 = (cs::immutable_set< cs::labeled_pdg_edge > *) 0 ;
  cs::immutable_set< std::pair< cs::point,cs::pdg_edge_label > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::labeled_pdg_edge > **)&jarg1; 
  {
    try {
      result = ((cs::immutable_set< cs::labeled_pdg_edge > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_labeled_1pdg_1edge_1set_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::labeled_pdg_edge > *arg1 = (cs::immutable_set< cs::labeled_pdg_edge > *) 0 ;
  std::pair< cs::point,cs::pdg_edge_label > *arg2 = 0 ;
  cs::immutable_set< std::pair< cs::point,cs::pdg_edge_label > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::immutable_set< cs::labeled_pdg_edge > **)&jarg1; 
  arg2 = *(std::pair< cs::point,cs::pdg_edge_label > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< cs::point,cs::pdg_edge_label > const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::immutable_set< cs::labeled_pdg_edge > const *)arg1)->count((std::pair< cs::point,cs::pdg_edge_label > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_labeled_1pdg_1edge_1set_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::labeled_pdg_edge > *arg1 = (cs::immutable_set< cs::labeled_pdg_edge > *) 0 ;
  std::pair< cs::point,cs::pdg_edge_label > *arg2 = 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< std::pair< cs::point,cs::pdg_edge_label > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::immutable_set< cs::labeled_pdg_edge > **)&jarg1; 
  arg2 = *(std::pair< cs::point,cs::pdg_edge_label > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< cs::point,cs::pdg_edge_label > const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::immutable_set< cs::labeled_pdg_edge > const *)arg1)->find((std::pair< cs::point,cs::pdg_edge_label > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::immutable_set< std::pair< cs::point,cs::pdg_edge_label > >::const_iterator **)&jresult = new cs::immutable_set< std::pair< cs::point,cs::pdg_edge_label > >::const_iterator((const cs::immutable_set< std::pair< cs::point,cs::pdg_edge_label > >::const_iterator &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_labeled_1pdg_1edge_1set_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::immutable_set< cs::labeled_pdg_edge > *arg1 = (cs::immutable_set< cs::labeled_pdg_edge > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::labeled_pdg_edge > **)&jarg1; 
  result = (int)((cs::immutable_set< cs::labeled_pdg_edge > const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_labeled_1pdg_1edge_1set_1to_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::labeled_pdg_edge > *arg1 = (cs::immutable_set< cs::labeled_pdg_edge > *) 0 ;
  std::vector< std::pair< cs::point,cs::pdg_edge_label > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::labeled_pdg_edge > **)&jarg1; 
  {
    try {
      result = ((cs::immutable_set< cs::labeled_pdg_edge > const *)arg1)->to_vector();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< std::pair< cs::point,cs::pdg_edge_label > > **)&jresult = new std::vector< std::pair< cs::point,cs::pdg_edge_label > >((const std::vector< std::pair< cs::point,cs::pdg_edge_label > > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_labeled_1pdg_1edge_1set_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::immutable_set< cs::labeled_pdg_edge > *arg1 = (cs::immutable_set< cs::labeled_pdg_edge > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::labeled_pdg_edge > **)&jarg1; 
  {
    try {
      result = ((cs::immutable_set< cs::labeled_pdg_edge > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_labeled_1pdg_1edge_1set_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::immutable_set< cs::labeled_pdg_edge > *arg1 = (cs::immutable_set< cs::labeled_pdg_edge > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::labeled_pdg_edge > **)&jarg1; 
  result = ((cs::immutable_set< cs::labeled_pdg_edge > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_labeled_1pdg_1edge_1set_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::immutable_set< cs::labeled_pdg_edge > *arg1 = (cs::immutable_set< cs::labeled_pdg_edge > *) 0 ;
  cs::immutable_set< cs::labeled_pdg_edge > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::immutable_set< cs::labeled_pdg_edge > **)&jarg1; 
  arg2 = *(cs::immutable_set< cs::labeled_pdg_edge > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::immutable_set< cs::labeled_pdg_edge > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::immutable_set< cs::labeled_pdg_edge > const *)arg1)->operator ==((cs::immutable_set< cs::labeled_pdg_edge > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1labeled_1pdg_1edge_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::immutable_set< cs::labeled_pdg_edge > *arg1 = (cs::immutable_set< cs::labeled_pdg_edge > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::immutable_set< cs::labeled_pdg_edge > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_new_1pdg_1edge_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::pdg_edge > *arg1 = 0 ;
  cs::immutable_set< cs::pdg_edge > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::pdg_edge > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::immutable_set< cs::pdg_edge > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cs::immutable_set< cs::pdg_edge > *)new cs::immutable_set< cs::pdg_edge >((cs::immutable_set< cs::pdg_edge > const &)*arg1);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::immutable_set< cs::pdg_edge > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1set_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::pdg_edge > *arg1 = (cs::immutable_set< cs::pdg_edge > *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< std::pair< cs::point,cs::pdg_edge_kind > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::pdg_edge > **)&jarg1; 
  {
    try {
      result = ((cs::immutable_set< cs::pdg_edge > const *)arg1)->begin();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::immutable_set< std::pair< cs::point,cs::pdg_edge_kind > >::iterator **)&jresult = new cs::immutable_set< std::pair< cs::point,cs::pdg_edge_kind > >::iterator((const cs::immutable_set< std::pair< cs::point,cs::pdg_edge_kind > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1set_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::pdg_edge > *arg1 = (cs::immutable_set< cs::pdg_edge > *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< std::pair< cs::point,cs::pdg_edge_kind > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::pdg_edge > **)&jarg1; 
  {
    try {
      result = ((cs::immutable_set< cs::pdg_edge > const *)arg1)->end();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::immutable_set< std::pair< cs::point,cs::pdg_edge_kind > >::iterator **)&jresult = new cs::immutable_set< std::pair< cs::point,cs::pdg_edge_kind > >::iterator((const cs::immutable_set< std::pair< cs::point,cs::pdg_edge_kind > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1set_1cbegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::pdg_edge > *arg1 = (cs::immutable_set< cs::pdg_edge > *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< std::pair< cs::point,cs::pdg_edge_kind > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::pdg_edge > **)&jarg1; 
  {
    try {
      result = ((cs::immutable_set< cs::pdg_edge > const *)arg1)->cbegin();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::immutable_set< std::pair< cs::point,cs::pdg_edge_kind > >::iterator **)&jresult = new cs::immutable_set< std::pair< cs::point,cs::pdg_edge_kind > >::iterator((const cs::immutable_set< std::pair< cs::point,cs::pdg_edge_kind > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1set_1cend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::pdg_edge > *arg1 = (cs::immutable_set< cs::pdg_edge > *) 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< std::pair< cs::point,cs::pdg_edge_kind > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::pdg_edge > **)&jarg1; 
  {
    try {
      result = ((cs::immutable_set< cs::pdg_edge > const *)arg1)->cend();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::immutable_set< std::pair< cs::point,cs::pdg_edge_kind > >::iterator **)&jresult = new cs::immutable_set< std::pair< cs::point,cs::pdg_edge_kind > >::iterator((const cs::immutable_set< std::pair< cs::point,cs::pdg_edge_kind > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1set_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cs::immutable_set< cs::pdg_edge > *arg1 = (cs::immutable_set< cs::pdg_edge > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::pdg_edge > **)&jarg1; 
  {
    try {
      result = (bool)((cs::immutable_set< cs::pdg_edge > const *)arg1)->empty();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1set_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::pdg_edge > *arg1 = (cs::immutable_set< cs::pdg_edge > *) 0 ;
  cs::immutable_set< std::pair< cs::point,cs::pdg_edge_kind > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::pdg_edge > **)&jarg1; 
  {
    try {
      result = ((cs::immutable_set< cs::pdg_edge > const *)arg1)->size();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1set_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::pdg_edge > *arg1 = (cs::immutable_set< cs::pdg_edge > *) 0 ;
  std::pair< cs::point,cs::pdg_edge_kind > *arg2 = 0 ;
  cs::immutable_set< std::pair< cs::point,cs::pdg_edge_kind > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::immutable_set< cs::pdg_edge > **)&jarg1; 
  arg2 = *(std::pair< cs::point,cs::pdg_edge_kind > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< cs::point,cs::pdg_edge_kind > const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::immutable_set< cs::pdg_edge > const *)arg1)->count((std::pair< cs::point,cs::pdg_edge_kind > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1set_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::pdg_edge > *arg1 = (cs::immutable_set< cs::pdg_edge > *) 0 ;
  std::pair< cs::point,cs::pdg_edge_kind > *arg2 = 0 ;
  SwigValueWrapper< cs::iterator_adapter< cs::set_iterator_policy< std::pair< cs::point,cs::pdg_edge_kind > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::immutable_set< cs::pdg_edge > **)&jarg1; 
  arg2 = *(std::pair< cs::point,cs::pdg_edge_kind > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< cs::point,cs::pdg_edge_kind > const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((cs::immutable_set< cs::pdg_edge > const *)arg1)->find((std::pair< cs::point,cs::pdg_edge_kind > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(cs::immutable_set< std::pair< cs::point,cs::pdg_edge_kind > >::const_iterator **)&jresult = new cs::immutable_set< std::pair< cs::point,cs::pdg_edge_kind > >::const_iterator((const cs::immutable_set< std::pair< cs::point,cs::pdg_edge_kind > >::const_iterator &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1set_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cs::immutable_set< cs::pdg_edge > *arg1 = (cs::immutable_set< cs::pdg_edge > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::pdg_edge > **)&jarg1; 
  result = (int)((cs::immutable_set< cs::pdg_edge > const *)arg1)->hash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1set_1to_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cs::immutable_set< cs::pdg_edge > *arg1 = (cs::immutable_set< cs::pdg_edge > *) 0 ;
  std::vector< std::pair< cs::point,cs::pdg_edge_kind > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::pdg_edge > **)&jarg1; 
  {
    try {
      result = ((cs::immutable_set< cs::pdg_edge > const *)arg1)->to_vector();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  *(std::vector< std::pair< cs::point,cs::pdg_edge_kind > > **)&jresult = new std::vector< std::pair< cs::point,cs::pdg_edge_kind > >((const std::vector< std::pair< cs::point,cs::pdg_edge_kind > > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1set_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::immutable_set< cs::pdg_edge > *arg1 = (cs::immutable_set< cs::pdg_edge > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::pdg_edge > **)&jarg1; 
  {
    try {
      result = ((cs::immutable_set< cs::pdg_edge > const *)arg1)->as_string();
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1set_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cs::immutable_set< cs::pdg_edge > *arg1 = (cs::immutable_set< cs::pdg_edge > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cs::immutable_set< cs::pdg_edge > **)&jarg1; 
  result = ((cs::immutable_set< cs::pdg_edge > const *)arg1)->as_repr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_grammatech_cs_csJNI_pdg_1edge_1set_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cs::immutable_set< cs::pdg_edge > *arg1 = (cs::immutable_set< cs::pdg_edge > *) 0 ;
  cs::immutable_set< cs::pdg_edge > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cs::immutable_set< cs::pdg_edge > **)&jarg1; 
  arg2 = *(cs::immutable_set< cs::pdg_edge > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cs::immutable_set< cs::pdg_edge > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((cs::immutable_set< cs::pdg_edge > const *)arg1)->operator ==((cs::immutable_set< cs::pdg_edge > const &)*arg2);
    } /*@SWIG:csurf/src/api/cpp/cs_types.hpp,376,CATCH_CS_RESULT@*/
    catch (cs::result &e) {
      jclass clazz = jenv->FindClass("com/grammatech/cs/result");
      jobject obj = jenv->NewObject(
        clazz, 
        jenv->GetMethodID(clazz, "<init>", "(J)V"), 
        (long)e.unwrap());
      jenv->Throw(static_cast<jthrowable>(obj));
      return 0;
    }
    /*@SWIG@*/
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_delete_1pdg_1edge_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cs::immutable_set< cs::pdg_edge > *arg1 = (cs::immutable_set< cs::pdg_edge > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cs::immutable_set< cs::pdg_edge > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_point_1set_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(cs::set_mixin< cs::mutable_set< cs::point > > **)&baseptr = *(cs::mutable_set< cs::point > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_int_1pair_1set_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(cs::set_mixin< cs::mutable_set< cs::int_pair > > **)&baseptr = *(cs::mutable_set< cs::int_pair > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_symbol_1set_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(cs::set_mixin< cs::mutable_set< cs::symbol > > **)&baseptr = *(cs::mutable_set< cs::symbol > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_grammatech_cs_csJNI_basic_1block_1set_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(cs::set_mixin< cs::mutable_set< cs::basic_block > > **)&baseptr = *(cs::mutable_set< cs::basic_block > **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_com_grammatech_cs_csJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[6] = {
    {
      "SwigDirector_predsucc_filter_visit", "(Lcom/grammatech/cs/predsucc_filter;J)J" 
    },
    {
      "SwigDirector_metric_sfile_filter_filter", "(Lcom/grammatech/cs/metric_sfile_filter;J)Z" 
    },
    {
      "SwigDirector_project_metric_function_evaluate", "(Lcom/grammatech/cs/project_metric_function;J)D" 
    },
    {
      "SwigDirector_compunit_metric_function_evaluate", "(Lcom/grammatech/cs/compunit_metric_function;J)D" 
    },
    {
      "SwigDirector_sfile_metric_function_evaluate", "(Lcom/grammatech/cs/sfile_metric_function;J)D" 
    },
    {
      "SwigDirector_procedure_metric_function_evaluate", "(Lcom/grammatech/cs/procedure_metric_function;J)D" 
    }
  };
  Swig::jclass_csJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_csJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

