/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.grammatech.cs;

public class language implements Comparable<language> {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected language(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(language obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        csJNI.delete_language(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  protected static long getCPtrAndDisown(language obj) {
    if (obj != null) obj.swigCMemOwn= false;
    return getCPtr(obj);
  }

  public language(long _inner) throws result {
    this(csJNI.new_language(_inner), true);
  }

  public int compareTo(language other) {
    return csJNI.language_compareTo(swigCPtr, this, language.getCPtr(other), other);
  }

  public boolean equals(language other) throws result {
    return csJNI.language_equals(swigCPtr, this, language.getCPtr(other), other);
  }

  public int hashCode() {
    return csJNI.language_hashCode(swigCPtr, this);
  }

  public String as_string() throws result {
    return csJNI.language_as_string(swigCPtr, this);
  }

  public String toString() {
    return csJNI.language_toString(swigCPtr, this);
  }

  public String name() throws result {
    return csJNI.language_name(swigCPtr, this);
  }

  public boolean is_machine_code() throws result {
    return csJNI.language_is_machine_code(swigCPtr, this);
  }

  public static language getWILDCARD() throws result {
    long cPtr = csJNI.language_WILDCARD_get();
    return (cPtr == 0) ? null : new language(cPtr, false);
  }

  public static language getSYNTHETIC() throws result {
    long cPtr = csJNI.language_SYNTHETIC_get();
    return (cPtr == 0) ? null : new language(cPtr, false);
  }

  public static language getC() throws result {
    long cPtr = csJNI.language_C_get();
    return (cPtr == 0) ? null : new language(cPtr, false);
  }

  public static language getCPP() throws result {
    long cPtr = csJNI.language_CPP_get();
    return (cPtr == 0) ? null : new language(cPtr, false);
  }

  public static language getX86() throws result {
    long cPtr = csJNI.language_X86_get();
    return (cPtr == 0) ? null : new language(cPtr, false);
  }

  public static language getX64() throws result {
    long cPtr = csJNI.language_X64_get();
    return (cPtr == 0) ? null : new language(cPtr, false);
  }

  public static language getJAVA() throws result {
    long cPtr = csJNI.language_JAVA_get();
    return (cPtr == 0) ? null : new language(cPtr, false);
  }

  public static language getCSHARP() throws result {
    long cPtr = csJNI.language_CSHARP_get();
    return (cPtr == 0) ? null : new language(cPtr, false);
  }

  public static language getPPC32() throws result {
    long cPtr = csJNI.language_PPC32_get();
    return (cPtr == 0) ? null : new language(cPtr, false);
  }

  public static language getARM() throws result {
    long cPtr = csJNI.language_ARM_get();
    return (cPtr == 0) ? null : new language(cPtr, false);
  }

}
