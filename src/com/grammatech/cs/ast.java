/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.grammatech.cs;

public class ast implements Comparable<ast> {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected ast(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ast obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        csJNI.delete_ast(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  protected static long getCPtrAndDisown(ast obj) {
    if (obj != null) obj.swigCMemOwn= false;
    return getCPtr(obj);
  }

  public int compareTo(ast other) {
    return csJNI.ast_compareTo(swigCPtr, this, ast.getCPtr(other), other);
  }

  public int hashCode() {
    return csJNI.ast_hashCode(swigCPtr, this);
  }

  public boolean equals(ast other) throws result {
    return csJNI.ast_equals(swigCPtr, this, ast.getCPtr(other), other);
  }

  public ast_class get_class() throws result {
    return new ast_class(csJNI.ast_get_class(swigCPtr, this), true);
  }

  public boolean is_a(ast_class c) throws result {
    return csJNI.ast_is_a(swigCPtr, this, ast_class.getCPtr(c), c);
  }

  public ast_field get(ast_ordinal ord) throws result {
    return new ast_field(csJNI.ast_get__SWIG_0(swigCPtr, this, ast_ordinal.getCPtr(ord), ord), true);
  }

  public ast_field get(long ord) throws result {
    return new ast_field(csJNI.ast_get__SWIG_1(swigCPtr, this, ord), true);
  }

  public boolean has_field(ast_ordinal ord) throws result {
    return csJNI.ast_has_field__SWIG_0(swigCPtr, this, ast_ordinal.getCPtr(ord), ord);
  }

  public boolean has_field(long ord) throws result {
    return csJNI.ast_has_field__SWIG_1(swigCPtr, this, ord);
  }

  public long num_fields() throws result {
    return csJNI.ast_num_fields(swigCPtr, this);
  }

  public ast_field_vector fields() throws result {
    return new ast_field_vector(csJNI.ast_fields(swigCPtr, this), true);
  }

  public ast_field_vector children() throws result {
    return new ast_field_vector(csJNI.ast_children(swigCPtr, this), true);
  }

  public ast_field_vector attributes() throws result {
    return new ast_field_vector(csJNI.ast_attributes(swigCPtr, this), true);
  }

  public String pretty_print(long limit) throws result {
    return csJNI.ast_pretty_print__SWIG_0(swigCPtr, this, limit);
  }

  public String pretty_print() throws result {
    return csJNI.ast_pretty_print__SWIG_1(swigCPtr, this);
  }

  public String dump(long attribute_depth) throws result {
    return csJNI.ast_dump__SWIG_0(swigCPtr, this, attribute_depth);
  }

  public String dump() throws result {
    return csJNI.ast_dump__SWIG_1(swigCPtr, this);
  }

  public void set_field(ast_field c) throws result {
    csJNI.ast_set_field(swigCPtr, this, ast_field.getCPtr(c), c);
  }

  public ast_iterator traverse(ast_traverse_flags flags) throws result {
    return new ast_iterator(csJNI.ast_traverse__SWIG_0(swigCPtr, this, ast_traverse_flags.getCPtr(flags), flags), true);
  }

  public ast_iterator traverse() throws result {
    return new ast_iterator(csJNI.ast_traverse__SWIG_1(swigCPtr, this), true);
  }

  public String as_string() throws result {
    return csJNI.ast_as_string(swigCPtr, this);
  }

  public String toString() {
    return csJNI.ast_toString(swigCPtr, this);
  }

}
