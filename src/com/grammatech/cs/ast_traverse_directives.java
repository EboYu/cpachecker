/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.grammatech.cs;

public class ast_traverse_directives implements Comparable<ast_traverse_directives> {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected ast_traverse_directives(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ast_traverse_directives obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        csJNI.delete_ast_traverse_directives(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  protected static long getCPtrAndDisown(ast_traverse_directives obj) {
    if (obj != null) obj.swigCMemOwn= false;
    return getCPtr(obj);
  }

  public ast_traverse_directives(long _inner) throws result {
    this(csJNI.new_ast_traverse_directives(_inner), true);
  }

  public int compareTo(ast_traverse_directives other) {
    return csJNI.ast_traverse_directives_compareTo(swigCPtr, this, ast_traverse_directives.getCPtr(other), other);
  }

  public boolean equals(ast_traverse_directives other) throws result {
    return csJNI.ast_traverse_directives_equals(swigCPtr, this, ast_traverse_directives.getCPtr(other), other);
  }

  public int hashCode() {
    return csJNI.ast_traverse_directives_hashCode(swigCPtr, this);
  }

  public String as_string() throws result {
    return csJNI.ast_traverse_directives_as_string(swigCPtr, this);
  }

  public String toString() {
    return csJNI.ast_traverse_directives_toString(swigCPtr, this);
  }

  public String name() throws result {
    return csJNI.ast_traverse_directives_name(swigCPtr, this);
  }

  public ast_traverse_directives or_(ast_traverse_directives b) throws result {
    return new ast_traverse_directives(csJNI.ast_traverse_directives_or_(swigCPtr, this, ast_traverse_directives.getCPtr(b), b), true);
  }

  public ast_traverse_directives and_(ast_traverse_directives b) throws result {
    return new ast_traverse_directives(csJNI.ast_traverse_directives_and_(swigCPtr, this, ast_traverse_directives.getCPtr(b), b), true);
  }

  public ast_traverse_directives not_() throws result {
    return new ast_traverse_directives(csJNI.ast_traverse_directives_not_(swigCPtr, this), true);
  }

  public static ast_traverse_directives getNONE() throws result {
    long cPtr = csJNI.ast_traverse_directives_NONE_get();
    return (cPtr == 0) ? null : new ast_traverse_directives(cPtr, false);
  }

  public static ast_traverse_directives getSKIP_CHILDREN() throws result {
    long cPtr = csJNI.ast_traverse_directives_SKIP_CHILDREN_get();
    return (cPtr == 0) ? null : new ast_traverse_directives(cPtr, false);
  }

}
